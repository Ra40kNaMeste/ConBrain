{"version":3,"file":"index.js","sources":["../../babel-helper-plugin-utils/src/index.ts","../../babel-plugin-syntax-jsx/src/index.ts","../../babel-types/src/utils/shallowEqual.ts","../../babel-types/src/utils/deprecationWarning.ts","../../babel-types/src/validators/generated/index.ts","../../babel-types/src/validators/matchesPattern.ts","../../babel-types/src/validators/buildMatchMemberExpression.ts","../../babel-types/src/validators/react/isReactComponent.ts","../../babel-types/src/validators/react/isCompatTag.ts","../../../node_modules/to-fast-properties-BABEL_8_BREAKING-true/index.js","../../../node_modules/to-fast-properties/index.js","../../babel-types/src/validators/isType.ts","../../babel-types/src/validators/isPlaceholderType.ts","../../babel-types/src/validators/is.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../../babel-types/src/validators/isValidIdentifier.ts","../../babel-helper-string-parser/src/index.ts","../../babel-types/src/constants/index.ts","../../babel-types/src/definitions/utils.ts","../../babel-types/src/definitions/core.ts","../../babel-types/src/definitions/flow.ts","../../babel-types/src/definitions/jsx.ts","../../babel-types/src/definitions/placeholders.ts","../../babel-types/src/definitions/misc.ts","../../babel-types/src/definitions/experimental.ts","../../babel-types/src/definitions/typescript.ts","../../babel-types/src/definitions/deprecated-aliases.ts","../../babel-types/src/definitions/index.ts","../../babel-types/src/validators/validate.ts","../../babel-types/src/builders/validateNode.ts","../../babel-types/src/builders/generated/index.ts","../../babel-types/src/utils/react/cleanJSXElementLiteralChild.ts","../../babel-types/src/builders/react/buildChildren.ts","../../babel-types/src/validators/isNode.ts","../../babel-types/src/asserts/assertNode.ts","../../babel-types/src/asserts/generated/index.ts","../../babel-types/src/builders/flow/createTypeAnnotationBasedOnTypeof.ts","../../babel-types/src/modifications/flow/removeTypeDuplicates.ts","../../babel-types/src/builders/flow/createFlowUnionType.ts","../../babel-types/src/modifications/typescript/removeTypeDuplicates.ts","../../babel-types/src/builders/typescript/createTSUnionType.ts","../../babel-types/src/builders/productions.ts","../../babel-types/src/clone/cloneNode.ts","../../babel-types/src/clone/clone.ts","../../babel-types/src/clone/cloneDeep.ts","../../babel-types/src/clone/cloneDeepWithoutLoc.ts","../../babel-types/src/clone/cloneWithoutLoc.ts","../../babel-types/src/comments/addComments.ts","../../babel-types/src/comments/addComment.ts","../../babel-types/src/utils/inherit.ts","../../babel-types/src/comments/inheritInnerComments.ts","../../babel-types/src/comments/inheritLeadingComments.ts","../../babel-types/src/comments/inheritTrailingComments.ts","../../babel-types/src/comments/inheritsComments.ts","../../babel-types/src/comments/removeComments.ts","../../babel-types/src/constants/generated/index.ts","../../babel-types/src/converters/toBlock.ts","../../babel-types/src/converters/ensureBlock.ts","../../babel-types/src/converters/toIdentifier.ts","../../babel-types/src/converters/toBindingIdentifierName.ts","../../babel-types/src/converters/toComputedKey.ts","../../babel-types/src/converters/toExpression.ts","../../babel-types/src/traverse/traverseFast.ts","../../babel-types/src/modifications/removeProperties.ts","../../babel-types/src/modifications/removePropertiesDeep.ts","../../babel-types/src/converters/toKeyAlias.ts","../../babel-types/src/converters/toStatement.ts","../../babel-types/src/converters/valueToNode.ts","../../babel-types/src/modifications/appendToMemberExpression.ts","../../babel-types/src/modifications/inherits.ts","../../babel-types/src/modifications/prependToMemberExpression.ts","../../babel-types/src/retrievers/getBindingIdentifiers.ts","../../babel-types/src/retrievers/getOuterBindingIdentifiers.ts","../../babel-types/src/traverse/traverse.ts","../../babel-types/src/validators/isBinding.ts","../../babel-types/src/validators/isLet.ts","../../babel-types/src/validators/isBlockScoped.ts","../../babel-types/src/validators/isImmutable.ts","../../babel-types/src/validators/isNodesEquivalent.ts","../../babel-types/src/validators/isReferenced.ts","../../babel-types/src/validators/isScope.ts","../../babel-types/src/validators/isSpecifierDefault.ts","../../babel-types/src/validators/isValidES3Identifier.ts","../../babel-types/src/validators/isVar.ts","../../babel-types/src/index.ts","../../babel-helper-module-imports/src/import-builder.ts","../../babel-helper-module-imports/src/is-module.ts","../../babel-helper-module-imports/src/import-injector.ts","../../babel-helper-module-imports/src/index.ts","../../babel-helper-annotate-as-pure/src/index.ts","../../babel-plugin-transform-react-jsx/src/create-plugin.ts","../../babel-plugin-transform-react-jsx/src/development.ts"],"sourcesContent":["import type {\n  PluginAPI,\n  PluginObject,\n  PluginPass,\n  PresetAPI,\n  PresetObject,\n} from \"@babel/core\";\n\ntype APIPolyfillFactory<T extends keyof PluginAPI> = (\n  api: PluginAPI,\n) => PluginAPI[T];\n\ntype APIPolyfills = {\n  assertVersion: APIPolyfillFactory<\"assertVersion\">;\n};\n\nconst apiPolyfills: APIPolyfills = {\n  // Not supported by Babel 7 and early versions of Babel 7 beta.\n  // It's important that this is polyfilled for older Babel versions\n  // since it's needed to report the version mismatch.\n  assertVersion: (api: PluginAPI) => (range: number | string) => {\n    throwVersionError(range, api.version);\n  },\n};\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(apiPolyfills, {\n    // This is supported starting from Babel 7.13\n    targets: () => () => {\n      return {};\n    },\n    // This is supported starting from Babel 7.13\n    assumption: () => () => {\n      return undefined;\n    },\n  });\n}\n\nexport function declare<State = {}, Option = {}>(\n  builder: (\n    api: PluginAPI,\n    options: Option,\n    dirname: string,\n  ) => PluginObject<State & PluginPass>,\n): (\n  api: PluginAPI,\n  options: Option,\n  dirname: string,\n) => PluginObject<State & PluginPass> {\n  return (api, options: Option, dirname: string) => {\n    let clonedApi: PluginAPI;\n\n    for (const name of Object.keys(\n      apiPolyfills,\n    ) as (keyof typeof apiPolyfills)[]) {\n      if (api[name]) continue;\n\n      clonedApi ??= copyApiObject(api);\n      clonedApi[name] = apiPolyfills[name](clonedApi);\n    }\n\n    // @ts-expect-error options || {} may not be assigned to Options\n    return builder(clonedApi ?? api, options || {}, dirname);\n  };\n}\n\nexport const declarePreset = declare as <Option = {}>(\n  builder: (api: PresetAPI, options: Option, dirname: string) => PresetObject,\n) => (api: PresetAPI, options: Option, dirname: string) => PresetObject;\n\nfunction copyApiObject(api: PluginAPI): PluginAPI {\n  // Babel >= 7 <= beta.41 passed the API as a new object that had\n  // babel/core as the prototype. While slightly faster, it also\n  // means that the Object.assign copy below fails. Rather than\n  // keep complexity, the Babel 6 behavior has been reverted and this\n  // normalizes all that for Babel 7.\n  let proto = null;\n  if (typeof api.version === \"string\" && /^7\\./.test(api.version)) {\n    proto = Object.getPrototypeOf(api);\n    if (\n      proto &&\n      (!Object.hasOwn(proto, \"version\") ||\n        !Object.hasOwn(proto, \"transform\") ||\n        !Object.hasOwn(proto, \"template\") ||\n        !Object.hasOwn(proto, \"types\"))\n    ) {\n      proto = null;\n    }\n  }\n\n  return {\n    ...proto,\n    ...api,\n  };\n}\n\nfunction throwVersionError(range: string | number, version: string) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n    range = `^${range}.0.0-0`;\n  }\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    // Bump up the limit if needed so that users are more likely\n    // to be able to see what is calling Babel.\n    Error.stackTraceLimit = 25;\n  }\n\n  let err;\n  if (version.slice(0, 2) === \"7.\") {\n    err = new Error(\n      `Requires Babel \"^7.0.0-beta.41\", but was loaded with \"${version}\". ` +\n        `You'll need to update your @babel/core version.`,\n    );\n  } else {\n    err = new Error(\n      `Requires Babel \"${range}\", but was loaded with \"${version}\". ` +\n        `If you are sure you have a compatible version of @babel/core, ` +\n        `it is likely that something in your build process is loading the ` +\n        `wrong version. Inspect the stack trace of this error to look for ` +\n        `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` +\n        `to see what is calling Babel.`,\n    );\n  }\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version,\n    range,\n  } as any);\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\n\nexport default declare(api => {\n  api.assertVersion(\n    process.env.BABEL_8_BREAKING && process.env.IS_PUBLISH\n      ? PACKAGE_JSON.version\n      : 7,\n  );\n\n  return {\n    name: \"syntax-jsx\",\n\n    manipulateOptions(opts, parserOpts) {\n      if (!process.env.BABEL_8_BREAKING) {\n        // If the Typescript plugin already ran, it will have decided whether\n        // or not this is a TSX file.\n        if (\n          parserOpts.plugins.some(\n            p => (Array.isArray(p) ? p[0] : p) === \"typescript\",\n          )\n        ) {\n          return;\n        }\n      }\n\n      parserOpts.plugins.push(\"jsx\");\n    },\n  };\n});\n","export default function shallowEqual<T extends object>(\n  actual: object,\n  expected: T,\n): actual is T {\n  const keys = Object.keys(expected) as (keyof T)[];\n\n  for (const key of keys) {\n    if (\n      // @ts-expect-error maybe we should check whether key exists first\n      actual[key] !== expected[key]\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","const warnings = new Set();\n\nexport default function deprecationWarning(\n  oldName: string,\n  newName: string,\n  prefix: string = \"\",\n) {\n  if (warnings.has(oldName)) return;\n  warnings.add(oldName);\n\n  const { internal, trace } = captureShortStackTrace(1, 2);\n  if (internal) {\n    // If usage comes from an internal package, there is no point in warning because\n    // 1. The new version of the package will already use the new API\n    // 2. When the deprecation will become an error (in a future major version), users\n    //    will have to update every package anyway.\n    return;\n  }\n  console.warn(\n    `${prefix}\\`${oldName}\\` has been deprecated, please migrate to \\`${newName}\\`\\n${trace}`,\n  );\n}\n\nfunction captureShortStackTrace(skip: number, length: number) {\n  const { stackTraceLimit, prepareStackTrace } = Error;\n  let stackTrace: NodeJS.CallSite[];\n  // We add 1 to also take into account this function.\n  Error.stackTraceLimit = 1 + skip + length;\n  Error.prepareStackTrace = function (err, stack) {\n    stackTrace = stack;\n  };\n  new Error().stack;\n  Error.stackTraceLimit = stackTraceLimit;\n  Error.prepareStackTrace = prepareStackTrace;\n\n  if (!stackTrace) return { internal: false, trace: \"\" };\n\n  const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);\n  return {\n    internal: /[\\\\/]@babel[\\\\/]/.test(shortStackTrace[1].getFileName()),\n    trace: shortStackTrace.map(frame => `    at ${frame}`).join(\"\\n\"),\n  };\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/* eslint-disable no-fallthrough */\n\nimport shallowEqual from \"../../utils/shallowEqual.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport function isArrayExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayExpression> | null,\n): node is t.ArrayExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentExpression> | null,\n): node is t.AssignmentExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BinaryExpression> | null,\n): node is t.BinaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BinaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterpreterDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterpreterDirective> | null,\n): node is t.InterpreterDirective {\n  if (!node) return false;\n\n  if (node.type !== \"InterpreterDirective\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Directive> | null,\n): node is t.Directive {\n  if (!node) return false;\n\n  if (node.type !== \"Directive\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirectiveLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DirectiveLiteral> | null,\n): node is t.DirectiveLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DirectiveLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockStatement> | null,\n): node is t.BlockStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BlockStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBreakStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BreakStatement> | null,\n): node is t.BreakStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BreakStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CallExpression> | null,\n): node is t.CallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"CallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCatchClause(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CatchClause> | null,\n): node is t.CatchClause {\n  if (!node) return false;\n\n  if (node.type !== \"CatchClause\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditionalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ConditionalExpression> | null,\n): node is t.ConditionalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ConditionalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isContinueStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ContinueStatement> | null,\n): node is t.ContinueStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ContinueStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDebuggerStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DebuggerStatement> | null,\n): node is t.DebuggerStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DebuggerStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoWhileStatement> | null,\n): node is t.DoWhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DoWhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyStatement> | null,\n): node is t.EmptyStatement {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionStatement> | null,\n): node is t.ExpressionStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ExpressionStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.File> | null,\n): node is t.File {\n  if (!node) return false;\n\n  if (node.type !== \"File\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForInStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForInStatement> | null,\n): node is t.ForInStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForInStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForStatement> | null,\n): node is t.ForStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionDeclaration> | null,\n): node is t.FunctionDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionExpression> | null,\n): node is t.FunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Identifier> | null,\n): node is t.Identifier {\n  if (!node) return false;\n\n  if (node.type !== \"Identifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IfStatement> | null,\n): node is t.IfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"IfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLabeledStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LabeledStatement> | null,\n): node is t.LabeledStatement {\n  if (!node) return false;\n\n  if (node.type !== \"LabeledStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteral> | null,\n): node is t.StringLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumericLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumericLiteral> | null,\n): node is t.NumericLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NumericLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteral> | null,\n): node is t.NullLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteral> | null,\n): node is t.BooleanLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRegExpLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegExpLiteral> | null,\n): node is t.RegExpLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"RegExpLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLogicalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LogicalExpression> | null,\n): node is t.LogicalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"LogicalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MemberExpression> | null,\n): node is t.MemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"MemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNewExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NewExpression> | null,\n): node is t.NewExpression {\n  if (!node) return false;\n\n  if (node.type !== \"NewExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProgram(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Program> | null,\n): node is t.Program {\n  if (!node) return false;\n\n  if (node.type !== \"Program\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectExpression> | null,\n): node is t.ObjectExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMethod> | null,\n): node is t.ObjectMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectProperty> | null,\n): node is t.ObjectProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRestElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestElement> | null,\n): node is t.RestElement {\n  if (!node) return false;\n\n  if (node.type !== \"RestElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isReturnStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ReturnStatement> | null,\n): node is t.ReturnStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ReturnStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSequenceExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SequenceExpression> | null,\n): node is t.SequenceExpression {\n  if (!node) return false;\n\n  if (node.type !== \"SequenceExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isParenthesizedExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ParenthesizedExpression> | null,\n): node is t.ParenthesizedExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ParenthesizedExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchCase(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchCase> | null,\n): node is t.SwitchCase {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchCase\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchStatement> | null,\n): node is t.SwitchStatement {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisExpression> | null,\n): node is t.ThisExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ThisExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThrowStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThrowStatement> | null,\n): node is t.ThrowStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ThrowStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTryStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TryStatement> | null,\n): node is t.TryStatement {\n  if (!node) return false;\n\n  if (node.type !== \"TryStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryExpression> | null,\n): node is t.UnaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UnaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUpdateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UpdateExpression> | null,\n): node is t.UpdateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UpdateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclaration> | null,\n): node is t.VariableDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclarator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclarator> | null,\n): node is t.VariableDeclarator {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclarator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WhileStatement> | null,\n): node is t.WhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWithStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WithStatement> | null,\n): node is t.WithStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WithStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentPattern> | null,\n): node is t.AssignmentPattern {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayPattern> | null,\n): node is t.ArrayPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrowFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrowFunctionExpression> | null,\n): node is t.ArrowFunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrowFunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassBody> | null,\n): node is t.ClassBody {\n  if (!node) return false;\n\n  if (node.type !== \"ClassBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassExpression> | null,\n): node is t.ClassExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ClassExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassDeclaration> | null,\n): node is t.ClassDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ClassDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportAllDeclaration> | null,\n): node is t.ExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultDeclaration> | null,\n): node is t.ExportDefaultDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamedDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamedDeclaration> | null,\n): node is t.ExportNamedDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamedDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportSpecifier> | null,\n): node is t.ExportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForOfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForOfStatement> | null,\n): node is t.ForOfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForOfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDeclaration> | null,\n): node is t.ImportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDefaultSpecifier> | null,\n): node is t.ImportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportNamespaceSpecifier> | null,\n): node is t.ImportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportSpecifier> | null,\n): node is t.ImportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportExpression> | null,\n): node is t.ImportExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ImportExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMetaProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MetaProperty> | null,\n): node is t.MetaProperty {\n  if (!node) return false;\n\n  if (node.type !== \"MetaProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassMethod> | null,\n): node is t.ClassMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectPattern> | null,\n): node is t.ObjectPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSpreadElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadElement> | null,\n): node is t.SpreadElement {\n  if (!node) return false;\n\n  if (node.type !== \"SpreadElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSuper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Super> | null,\n): node is t.Super {\n  if (!node) return false;\n\n  if (node.type !== \"Super\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTaggedTemplateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TaggedTemplateExpression> | null,\n): node is t.TaggedTemplateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TaggedTemplateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateElement> | null,\n): node is t.TemplateElement {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateLiteral> | null,\n): node is t.TemplateLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isYieldExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.YieldExpression> | null,\n): node is t.YieldExpression {\n  if (!node) return false;\n\n  if (node.type !== \"YieldExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAwaitExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AwaitExpression> | null,\n): node is t.AwaitExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AwaitExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImport(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Import> | null,\n): node is t.Import {\n  if (!node) return false;\n\n  if (node.type !== \"Import\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBigIntLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BigIntLiteral> | null,\n): node is t.BigIntLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BigIntLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamespaceSpecifier> | null,\n): node is t.ExportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalMemberExpression> | null,\n): node is t.OptionalMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalCallExpression> | null,\n): node is t.OptionalCallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalCallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassProperty> | null,\n): node is t.ClassProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassAccessorProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassAccessorProperty> | null,\n): node is t.ClassAccessorProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassAccessorProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateProperty> | null,\n): node is t.ClassPrivateProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateMethod> | null,\n): node is t.ClassPrivateMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivateName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PrivateName> | null,\n): node is t.PrivateName {\n  if (!node) return false;\n\n  if (node.type !== \"PrivateName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStaticBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StaticBlock> | null,\n): node is t.StaticBlock {\n  if (!node) return false;\n\n  if (node.type !== \"StaticBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAnyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AnyTypeAnnotation> | null,\n): node is t.AnyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"AnyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayTypeAnnotation> | null,\n): node is t.ArrayTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanTypeAnnotation> | null,\n): node is t.BooleanTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteralTypeAnnotation> | null,\n): node is t.BooleanLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteralTypeAnnotation> | null,\n): node is t.NullLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassImplements(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassImplements> | null,\n): node is t.ClassImplements {\n  if (!node) return false;\n\n  if (node.type !== \"ClassImplements\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareClass> | null,\n): node is t.DeclareClass {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareClass\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareFunction> | null,\n): node is t.DeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareInterface(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareInterface> | null,\n): node is t.DeclareInterface {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareInterface\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModule(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModule> | null,\n): node is t.DeclareModule {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModule\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModuleExports(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModuleExports> | null,\n): node is t.DeclareModuleExports {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModuleExports\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareTypeAlias> | null,\n): node is t.DeclareTypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareTypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareOpaqueType> | null,\n): node is t.DeclareOpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareOpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareVariable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareVariable> | null,\n): node is t.DeclareVariable {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareVariable\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportDeclaration> | null,\n): node is t.DeclareExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportAllDeclaration> | null,\n): node is t.DeclareExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclaredPredicate> | null,\n): node is t.DeclaredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"DeclaredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExistsTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExistsTypeAnnotation> | null,\n): node is t.ExistsTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ExistsTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeAnnotation> | null,\n): node is t.FunctionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeParam(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeParam> | null,\n): node is t.FunctionTypeParam {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeParam\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isGenericTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.GenericTypeAnnotation> | null,\n): node is t.GenericTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"GenericTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInferredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InferredPredicate> | null,\n): node is t.InferredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"InferredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceExtends(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceExtends> | null,\n): node is t.InterfaceExtends {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceExtends\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceDeclaration> | null,\n): node is t.InterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceTypeAnnotation> | null,\n): node is t.InterfaceTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIntersectionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IntersectionTypeAnnotation> | null,\n): node is t.IntersectionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"IntersectionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMixedTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MixedTypeAnnotation> | null,\n): node is t.MixedTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"MixedTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyTypeAnnotation> | null,\n): node is t.EmptyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullableTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullableTypeAnnotation> | null,\n): node is t.NullableTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullableTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteralTypeAnnotation> | null,\n): node is t.NumberLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberTypeAnnotation> | null,\n): node is t.NumberTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeAnnotation> | null,\n): node is t.ObjectTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeInternalSlot(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeInternalSlot> | null,\n): node is t.ObjectTypeInternalSlot {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeInternalSlot\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeCallProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeCallProperty> | null,\n): node is t.ObjectTypeCallProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeCallProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeIndexer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeIndexer> | null,\n): node is t.ObjectTypeIndexer {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeIndexer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeProperty> | null,\n): node is t.ObjectTypeProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeSpreadProperty> | null,\n): node is t.ObjectTypeSpreadProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeSpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OpaqueType> | null,\n): node is t.OpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"OpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isQualifiedTypeIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.QualifiedTypeIdentifier> | null,\n): node is t.QualifiedTypeIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"QualifiedTypeIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteralTypeAnnotation> | null,\n): node is t.StringLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringTypeAnnotation> | null,\n): node is t.StringTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSymbolTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SymbolTypeAnnotation> | null,\n): node is t.SymbolTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"SymbolTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisTypeAnnotation> | null,\n): node is t.ThisTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ThisTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleTypeAnnotation> | null,\n): node is t.TupleTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TupleTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeofTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeofTypeAnnotation> | null,\n): node is t.TypeofTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeofTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAlias> | null,\n): node is t.TypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAnnotation> | null,\n): node is t.TypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeCastExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeCastExpression> | null,\n): node is t.TypeCastExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TypeCastExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameter> | null,\n): node is t.TypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterDeclaration> | null,\n): node is t.TypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterInstantiation> | null,\n): node is t.TypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnionTypeAnnotation> | null,\n): node is t.UnionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"UnionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariance(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Variance> | null,\n): node is t.Variance {\n  if (!node) return false;\n\n  if (node.type !== \"Variance\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVoidTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VoidTypeAnnotation> | null,\n): node is t.VoidTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"VoidTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDeclaration> | null,\n): node is t.EnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanBody> | null,\n): node is t.EnumBooleanBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberBody> | null,\n): node is t.EnumNumberBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringBody> | null,\n): node is t.EnumStringBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumSymbolBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumSymbolBody> | null,\n): node is t.EnumSymbolBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumSymbolBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanMember> | null,\n): node is t.EnumBooleanMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberMember> | null,\n): node is t.EnumNumberMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringMember> | null,\n): node is t.EnumStringMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDefaultedMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDefaultedMember> | null,\n): node is t.EnumDefaultedMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDefaultedMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IndexedAccessType> | null,\n): node is t.IndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"IndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalIndexedAccessType> | null,\n): node is t.OptionalIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXAttribute> | null,\n): node is t.JSXAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingElement> | null,\n): node is t.JSXClosingElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXElement> | null,\n): node is t.JSXElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXEmptyExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXEmptyExpression> | null,\n): node is t.JSXEmptyExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXEmptyExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXExpressionContainer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXExpressionContainer> | null,\n): node is t.JSXExpressionContainer {\n  if (!node) return false;\n\n  if (node.type !== \"JSXExpressionContainer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadChild(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadChild> | null,\n): node is t.JSXSpreadChild {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadChild\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXIdentifier> | null,\n): node is t.JSXIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"JSXIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXMemberExpression> | null,\n): node is t.JSXMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXNamespacedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXNamespacedName> | null,\n): node is t.JSXNamespacedName {\n  if (!node) return false;\n\n  if (node.type !== \"JSXNamespacedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningElement> | null,\n): node is t.JSXOpeningElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadAttribute> | null,\n): node is t.JSXSpreadAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXText(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXText> | null,\n): node is t.JSXText {\n  if (!node) return false;\n\n  if (node.type !== \"JSXText\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXFragment> | null,\n): node is t.JSXFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningFragment> | null,\n): node is t.JSXOpeningFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingFragment> | null,\n): node is t.JSXClosingFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Noop> | null,\n): node is t.Noop {\n  if (!node) return false;\n\n  if (node.type !== \"Noop\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Placeholder> | null,\n): node is t.Placeholder {\n  if (!node) return false;\n\n  if (node.type !== \"Placeholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isV8IntrinsicIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.V8IntrinsicIdentifier> | null,\n): node is t.V8IntrinsicIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"V8IntrinsicIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArgumentPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArgumentPlaceholder> | null,\n): node is t.ArgumentPlaceholder {\n  if (!node) return false;\n\n  if (node.type !== \"ArgumentPlaceholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBindExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BindExpression> | null,\n): node is t.BindExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BindExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportAttribute> | null,\n): node is t.ImportAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"ImportAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecorator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Decorator> | null,\n): node is t.Decorator {\n  if (!node) return false;\n\n  if (node.type !== \"Decorator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoExpression> | null,\n): node is t.DoExpression {\n  if (!node) return false;\n\n  if (node.type !== \"DoExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultSpecifier> | null,\n): node is t.ExportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRecordExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RecordExpression> | null,\n): node is t.RecordExpression {\n  if (!node) return false;\n\n  if (node.type !== \"RecordExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleExpression> | null,\n): node is t.TupleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TupleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecimalLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DecimalLiteral> | null,\n): node is t.DecimalLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DecimalLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleExpression> | null,\n): node is t.ModuleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ModuleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TopicReference> | null,\n): node is t.TopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"TopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineTopicExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineTopicExpression> | null,\n): node is t.PipelineTopicExpression {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineTopicExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineBareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineBareFunction> | null,\n): node is t.PipelineBareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineBareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelinePrimaryTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelinePrimaryTopicReference> | null,\n): node is t.PipelinePrimaryTopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"PipelinePrimaryTopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParameterProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParameterProperty> | null,\n): node is t.TSParameterProperty {\n  if (!node) return false;\n\n  if (node.type !== \"TSParameterProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareFunction> | null,\n): node is t.TSDeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareMethod> | null,\n): node is t.TSDeclareMethod {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSQualifiedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSQualifiedName> | null,\n): node is t.TSQualifiedName {\n  if (!node) return false;\n\n  if (node.type !== \"TSQualifiedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSCallSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSCallSignatureDeclaration> | null,\n): node is t.TSCallSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSCallSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructSignatureDeclaration> | null,\n): node is t.TSConstructSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSPropertySignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSPropertySignature> | null,\n): node is t.TSPropertySignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSPropertySignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMethodSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMethodSignature> | null,\n): node is t.TSMethodSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSMethodSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexSignature> | null,\n): node is t.TSIndexSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAnyKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAnyKeyword> | null,\n): node is t.TSAnyKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSAnyKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBooleanKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBooleanKeyword> | null,\n): node is t.TSBooleanKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBooleanKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBigIntKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBigIntKeyword> | null,\n): node is t.TSBigIntKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBigIntKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntrinsicKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntrinsicKeyword> | null,\n): node is t.TSIntrinsicKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntrinsicKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNeverKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNeverKeyword> | null,\n): node is t.TSNeverKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNeverKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNullKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNullKeyword> | null,\n): node is t.TSNullKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNullKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNumberKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNumberKeyword> | null,\n): node is t.TSNumberKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNumberKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSObjectKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSObjectKeyword> | null,\n): node is t.TSObjectKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSObjectKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSStringKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSStringKeyword> | null,\n): node is t.TSStringKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSStringKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSymbolKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSymbolKeyword> | null,\n): node is t.TSSymbolKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSSymbolKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUndefinedKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUndefinedKeyword> | null,\n): node is t.TSUndefinedKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUndefinedKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnknownKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnknownKeyword> | null,\n): node is t.TSUnknownKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnknownKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSVoidKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSVoidKeyword> | null,\n): node is t.TSVoidKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSVoidKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSThisType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSThisType> | null,\n): node is t.TSThisType {\n  if (!node) return false;\n\n  if (node.type !== \"TSThisType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSFunctionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSFunctionType> | null,\n): node is t.TSFunctionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSFunctionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructorType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructorType> | null,\n): node is t.TSConstructorType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructorType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeReference> | null,\n): node is t.TSTypeReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypePredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypePredicate> | null,\n): node is t.TSTypePredicate {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypePredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeQuery(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeQuery> | null,\n): node is t.TSTypeQuery {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeQuery\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeLiteral> | null,\n): node is t.TSTypeLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSArrayType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSArrayType> | null,\n): node is t.TSArrayType {\n  if (!node) return false;\n\n  if (node.type !== \"TSArrayType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTupleType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTupleType> | null,\n): node is t.TSTupleType {\n  if (!node) return false;\n\n  if (node.type !== \"TSTupleType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSOptionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSOptionalType> | null,\n): node is t.TSOptionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSOptionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSRestType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSRestType> | null,\n): node is t.TSRestType {\n  if (!node) return false;\n\n  if (node.type !== \"TSRestType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamedTupleMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamedTupleMember> | null,\n): node is t.TSNamedTupleMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamedTupleMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnionType> | null,\n): node is t.TSUnionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntersectionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntersectionType> | null,\n): node is t.TSIntersectionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntersectionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConditionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConditionalType> | null,\n): node is t.TSConditionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConditionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInferType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInferType> | null,\n): node is t.TSInferType {\n  if (!node) return false;\n\n  if (node.type !== \"TSInferType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParenthesizedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParenthesizedType> | null,\n): node is t.TSParenthesizedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSParenthesizedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeOperator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeOperator> | null,\n): node is t.TSTypeOperator {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeOperator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexedAccessType> | null,\n): node is t.TSIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMappedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMappedType> | null,\n): node is t.TSMappedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSMappedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSLiteralType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSLiteralType> | null,\n): node is t.TSLiteralType {\n  if (!node) return false;\n\n  if (node.type !== \"TSLiteralType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExpressionWithTypeArguments(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExpressionWithTypeArguments> | null,\n): node is t.TSExpressionWithTypeArguments {\n  if (!node) return false;\n\n  if (node.type !== \"TSExpressionWithTypeArguments\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceDeclaration> | null,\n): node is t.TSInterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceBody> | null,\n): node is t.TSInterfaceBody {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAliasDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAliasDeclaration> | null,\n): node is t.TSTypeAliasDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAliasDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInstantiationExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInstantiationExpression> | null,\n): node is t.TSInstantiationExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSInstantiationExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAsExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAsExpression> | null,\n): node is t.TSAsExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSAsExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSatisfiesExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSatisfiesExpression> | null,\n): node is t.TSSatisfiesExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSSatisfiesExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAssertion(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAssertion> | null,\n): node is t.TSTypeAssertion {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAssertion\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumDeclaration> | null,\n): node is t.TSEnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumMember> | null,\n): node is t.TSEnumMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleDeclaration> | null,\n): node is t.TSModuleDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleBlock> | null,\n): node is t.TSModuleBlock {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportType> | null,\n): node is t.TSImportType {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportEqualsDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportEqualsDeclaration> | null,\n): node is t.TSImportEqualsDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportEqualsDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExternalModuleReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExternalModuleReference> | null,\n): node is t.TSExternalModuleReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSExternalModuleReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNonNullExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNonNullExpression> | null,\n): node is t.TSNonNullExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSNonNullExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExportAssignment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExportAssignment> | null,\n): node is t.TSExportAssignment {\n  if (!node) return false;\n\n  if (node.type !== \"TSExportAssignment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamespaceExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamespaceExportDeclaration> | null,\n): node is t.TSNamespaceExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamespaceExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAnnotation> | null,\n): node is t.TSTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterInstantiation> | null,\n): node is t.TSTypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterDeclaration> | null,\n): node is t.TSTypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameter> | null,\n): node is t.TSTypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStandardized(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Standardized> | null,\n): node is t.Standardized {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"InterpreterDirective\":\n    case \"Directive\":\n    case \"DirectiveLiteral\":\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"CallExpression\":\n    case \"CatchClause\":\n    case \"ConditionalExpression\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"File\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"Program\":\n    case \"ObjectExpression\":\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"RestElement\":\n    case \"ReturnStatement\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"SwitchCase\":\n    case \"SwitchStatement\":\n    case \"ThisExpression\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"VariableDeclaration\":\n    case \"VariableDeclarator\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassBody\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ExportSpecifier\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"ClassMethod\":\n    case \"ObjectPattern\":\n    case \"SpreadElement\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateElement\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"ExportNamespaceSpecifier\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n    case \"StaticBlock\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Identifier\":\n        case \"StringLiteral\":\n        case \"BlockStatement\":\n        case \"ClassBody\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Expression> | null,\n): node is t.Expression {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"CallExpression\":\n    case \"ConditionalExpression\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"ObjectExpression\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"ThisExpression\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"TypeCastExpression\":\n    case \"JSXElement\":\n    case \"JSXFragment\":\n    case \"BindExpression\":\n    case \"DoExpression\":\n    case \"RecordExpression\":\n    case \"TupleExpression\":\n    case \"DecimalLiteral\":\n    case \"ModuleExpression\":\n    case \"TopicReference\":\n    case \"PipelineTopicExpression\":\n    case \"PipelineBareFunction\":\n    case \"PipelinePrimaryTopicReference\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Expression\":\n        case \"Identifier\":\n        case \"StringLiteral\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinary(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Binary> | null,\n): node is t.Binary {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isScopable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Scopable> | null,\n): node is t.Scopable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockParent> | null,\n): node is t.BlockParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Block> | null,\n): node is t.Block {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"Program\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Statement> | null,\n): node is t.Statement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"ReturnStatement\":\n    case \"SwitchStatement\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"VariableDeclaration\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Statement\":\n        case \"Declaration\":\n        case \"BlockStatement\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTerminatorless(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Terminatorless> | null,\n): node is t.Terminatorless {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCompletionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CompletionStatement> | null,\n): node is t.CompletionStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditional(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Conditional> | null,\n): node is t.Conditional {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Loop> | null,\n): node is t.Loop {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"WhileStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.While> | null,\n): node is t.While {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"WhileStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionWrapper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionWrapper> | null,\n): node is t.ExpressionWrapper {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExpressionStatement\":\n    case \"ParenthesizedExpression\":\n    case \"TypeCastExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.For> | null,\n): node is t.For {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForXStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForXStatement> | null,\n): node is t.ForXStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Function> | null,\n): node is t.Function {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionParent> | null,\n): node is t.FunctionParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPureish(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pureish> | null,\n): node is t.Pureish {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"ArrowFunctionExpression\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Declaration> | null,\n): node is t.Declaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"VariableDeclaration\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Declaration\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPatternLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PatternLike> | null,\n): node is t.PatternLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLVal(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LVal> | null,\n): node is t.LVal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSParameterProperty\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEntityName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEntityName> | null,\n): node is t.TSEntityName {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"TSQualifiedName\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Identifier\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Literal> | null,\n): node is t.Literal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"TemplateLiteral\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImmutable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Immutable> | null,\n): node is t.Immutable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"BigIntLiteral\":\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXOpeningElement\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUserWhitespacable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UserWhitespacable> | null,\n): node is t.UserWhitespacable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Method> | null,\n): node is t.Method {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMember> | null,\n): node is t.ObjectMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Property> | null,\n): node is t.Property {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectProperty\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryLike> | null,\n): node is t.UnaryLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"UnaryExpression\":\n    case \"SpreadElement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pattern> | null,\n): node is t.Pattern {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Pattern\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Class> | null,\n): node is t.Class {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportOrExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportOrExportDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDeclaration> | null,\n): node is t.ExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleSpecifier> | null,\n): node is t.ModuleSpecifier {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportSpecifier\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAccessor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Accessor> | null,\n): node is t.Accessor {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassAccessorProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Private> | null,\n): node is t.Private {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlow(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Flow> | null,\n): node is t.Flow {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ClassImplements\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"DeclaredPredicate\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"FunctionTypeParam\":\n    case \"GenericTypeAnnotation\":\n    case \"InferredPredicate\":\n    case \"InterfaceExtends\":\n    case \"InterfaceDeclaration\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n    case \"OpaqueType\":\n    case \"QualifiedTypeIdentifier\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"TypeAlias\":\n    case \"TypeAnnotation\":\n    case \"TypeCastExpression\":\n    case \"TypeParameter\":\n    case \"TypeParameterDeclaration\":\n    case \"TypeParameterInstantiation\":\n    case \"UnionTypeAnnotation\":\n    case \"Variance\":\n    case \"VoidTypeAnnotation\":\n    case \"EnumDeclaration\":\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowType> | null,\n): node is t.FlowType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"GenericTypeAnnotation\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"UnionTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowBaseAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowBaseAnnotation> | null,\n): node is t.FlowBaseAnnotation {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowDeclaration> | null,\n): node is t.FlowDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowPredicate> | null,\n): node is t.FlowPredicate {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclaredPredicate\":\n    case \"InferredPredicate\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBody> | null,\n): node is t.EnumBody {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumMember> | null,\n): node is t.EnumMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSX(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSX> | null,\n): node is t.JSX {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXEmptyExpression\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXIdentifier\":\n    case \"JSXMemberExpression\":\n    case \"JSXNamespacedName\":\n    case \"JSXOpeningElement\":\n    case \"JSXSpreadAttribute\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMiscellaneous(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Miscellaneous> | null,\n): node is t.Miscellaneous {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Noop\":\n    case \"Placeholder\":\n    case \"V8IntrinsicIdentifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeScript(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeScript> | null,\n): node is t.TypeScript {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSParameterProperty\":\n    case \"TSDeclareFunction\":\n    case \"TSDeclareMethod\":\n    case \"TSQualifiedName\":\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSNamedTupleMember\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSInterfaceBody\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSEnumDeclaration\":\n    case \"TSEnumMember\":\n    case \"TSModuleDeclaration\":\n    case \"TSModuleBlock\":\n    case \"TSImportType\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExternalModuleReference\":\n    case \"TSNonNullExpression\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n    case \"TSTypeAnnotation\":\n    case \"TSTypeParameterInstantiation\":\n    case \"TSTypeParameterDeclaration\":\n    case \"TSTypeParameter\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeElement> | null,\n): node is t.TSTypeElement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSType> | null,\n): node is t.TSType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSImportType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBaseType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBaseType> | null,\n): node is t.TSBaseType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSLiteralType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isNumericLiteral`\n */\nexport function isNumberLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteral> | null,\n): boolean {\n  deprecationWarning(\"isNumberLiteral\", \"isNumericLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRegExpLiteral`\n */\nexport function isRegexLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegexLiteral> | null,\n): boolean {\n  deprecationWarning(\"isRegexLiteral\", \"isRegExpLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"RegexLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRestElement`\n */\nexport function isRestProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestProperty> | null,\n): boolean {\n  deprecationWarning(\"isRestProperty\", \"isRestElement\");\n  if (!node) return false;\n\n  if (node.type !== \"RestProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isSpreadElement`\n */\nexport function isSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadProperty> | null,\n): boolean {\n  deprecationWarning(\"isSpreadProperty\", \"isSpreadElement\");\n  if (!node) return false;\n\n  if (node.type !== \"SpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isImportOrExportDeclaration`\n */\nexport function isModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  deprecationWarning(\"isModuleDeclaration\", \"isImportOrExportDeclaration\");\n  return isImportOrExportDeclaration(node, opts);\n}\n","import {\n  isIdentifier,\n  isMemberExpression,\n  isStringLiteral,\n  isThisExpression,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Determines whether or not the input node `member` matches the\n * input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function matchesPattern(\n  member: t.Node | null | undefined,\n  match: string | string[],\n  allowPartial?: boolean,\n): boolean {\n  // not a member expression\n  if (!isMemberExpression(member)) return false;\n\n  const parts = Array.isArray(match) ? match : match.split(\".\");\n  const nodes = [];\n\n  let node;\n  for (node = member; isMemberExpression(node); node = node.object) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if (isIdentifier(node)) {\n      value = node.name;\n    } else if (isStringLiteral(node)) {\n      value = node.value;\n    } else if (isThisExpression(node)) {\n      value = \"this\";\n    } else {\n      return false;\n    }\n\n    if (parts[i] !== value) return false;\n  }\n\n  return true;\n}\n","import matchesPattern from \"./matchesPattern.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Build a function that when called will return whether or not the\n * input `node` `MemberExpression` matches the input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function buildMatchMemberExpression(\n  match: string,\n  allowPartial?: boolean,\n) {\n  const parts = match.split(\".\");\n\n  return (member: t.Node) => matchesPattern(member, parts, allowPartial);\n}\n","import buildMatchMemberExpression from \"../buildMatchMemberExpression.ts\";\n\nconst isReactComponent = buildMatchMemberExpression(\"React.Component\");\n\nexport default isReactComponent;\n","export default function isCompatTag(tagName?: string): boolean {\n  // Must start with a lowercase ASCII letter\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n","'use strict';\n\nlet fastProto = null;\n\n// Creates an object with permanently fast properties in V8. See Toon Verwaest's\n// post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62\n// for more details. Use %HasFastProperties(object) and the Node.js flag\n// --allow-natives-syntax to check whether an object has fast properties.\nfunction FastObject(o) {\n\t// A prototype object will have \"fast properties\" enabled once it is checked\n\t// against the inline property cache of a function, e.g. fastProto.property:\n\t// https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63\n\tif (fastProto !== null && typeof fastProto.property) {\n\t\tconst result = fastProto;\n\t\tfastProto = FastObject.prototype = null;\n\t\treturn result;\n\t}\n\n\tfastProto = FastObject.prototype = o == null ? Object.create(null) : o;\n\n\treturn new FastObject;\n}\n\nconst inlineCacheCutoff = 10;\n\n// Initialize the inline property cache of FastObject.\nfor (let i = 0; i <= inlineCacheCutoff; i++) {\n\tFastObject();\n}\n\nmodule.exports = function toFastproperties(o) {\n\treturn FastObject(o);\n};\n","// env vars from the cli are always strings, so !!ENV_VAR returns true for \"false\"\nfunction bool(value) {\n  if (value == null) return false;\n  return value && value !== \"false\" && value !== \"0\";\n}\n\nmodule.exports = bool(process.env[\"BABEL_8_BREAKING\"])\n  ? require(\"to-fast-properties-BABEL_8_BREAKING-true\")\n  : require(\"to-fast-properties-BABEL_8_BREAKING-false\");\n","import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // If nodeType is nullish, it can't be an alias of targetType.\n  if (nodeType == null) return false;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n\n  return false;\n}\n","import { PLACEHOLDERS_ALIAS } from \"../definitions/index.ts\";\n\n/**\n * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.\n */\nexport default function isPlaceholderType(\n  placeholderType: string,\n  targetType: string,\n): boolean {\n  if (placeholderType === targetType) return true;\n\n  const aliases: Array<string> | undefined =\n    PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases) {\n    for (const alias of aliases) {\n      if (targetType === alias) return true;\n    }\n  }\n\n  return false;\n}\n","import shallowEqual from \"../utils/shallowEqual.ts\";\nimport isType from \"./isType.ts\";\nimport isPlaceholderType from \"./isPlaceholderType.ts\";\nimport { FLIPPED_ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function is<T extends t.Node[\"type\"]>(\n  type: T,\n  node: t.Node | null | undefined,\n  opts?: undefined,\n): node is Extract<t.Node, { type: T }>;\n\nexport default function is<\n  T extends t.Node[\"type\"],\n  P extends Extract<t.Node, { type: T }>,\n>(type: T, n: t.Node | null | undefined, required: Partial<P>): n is P;\n\nexport default function is<P extends t.Node>(\n  type: string,\n  node: t.Node | null | undefined,\n  opts: Partial<P>,\n): node is P;\n\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node;\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n */\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node {\n  if (!node) return false;\n\n  const matches = isType(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === \"Placeholder\" && type in FLIPPED_ALIAS_KEYS) {\n      // We can only return true if the placeholder doesn't replace a real node,\n      // but it replaces a category of nodes (an alias).\n      //\n      // t.is(\"Identifier\", node) gives some guarantees about node's shape, so we\n      // can't say that Placeholder(expectedNode: \"Identifier\") is an identifier\n      // because it doesn't have the same properties.\n      // On the other hand, t.is(\"Expression\", node) doesn't say anything about\n      // the shape of node because Expression can be many different nodes: we can,\n      // and should, safely report expression placeholders as Expressions.\n      return isPlaceholderType(node.expectedNode, type);\n    }\n    return false;\n  }\n\n  if (typeof opts === \"undefined\") {\n    return true;\n  } else {\n    return shallowEqual(node, opts);\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import {\n  isIdentifierName,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\nexport default function isValidIdentifier(\n  name: string,\n  reserved: boolean = true,\n): boolean {\n  if (typeof name !== \"string\") return false;\n\n  if (reserved) {\n    // \"await\" is invalid in module, valid in script; better be safe (see #4952)\n    if (isKeyword(name) || isStrictReservedWord(name, true)) {\n      return false;\n    }\n  }\n\n  return isIdentifierName(name);\n}\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","export const STATEMENT_OR_BLOCK_KEYS = [\"consequent\", \"body\", \"alternate\"];\nexport const FLATTENABLE_KEYS = [\"body\", \"expressions\"];\nexport const FOR_INIT_KEYS = [\"left\", \"init\"];\nexport const COMMENT_KEYS = [\n  \"leadingComments\",\n  \"trailingComments\",\n  \"innerComments\",\n] as const;\n\nexport const LOGICAL_OPERATORS = [\"||\", \"&&\", \"??\"];\nexport const UPDATE_OPERATORS = [\"++\", \"--\"];\n\nexport const BOOLEAN_NUMBER_BINARY_OPERATORS = [\">\", \"<\", \">=\", \"<=\"];\nexport const EQUALITY_BINARY_OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\nexport const COMPARISON_BINARY_OPERATORS = [\n  ...EQUALITY_BINARY_OPERATORS,\n  \"in\",\n  \"instanceof\",\n];\nexport const BOOLEAN_BINARY_OPERATORS = [\n  ...COMPARISON_BINARY_OPERATORS,\n  ...BOOLEAN_NUMBER_BINARY_OPERATORS,\n];\nexport const NUMBER_BINARY_OPERATORS = [\n  \"-\",\n  \"/\",\n  \"%\",\n  \"*\",\n  \"**\",\n  \"&\",\n  \"|\",\n  \">>\",\n  \">>>\",\n  \"<<\",\n  \"^\",\n];\nexport const BINARY_OPERATORS = [\n  \"+\",\n  ...NUMBER_BINARY_OPERATORS,\n  ...BOOLEAN_BINARY_OPERATORS,\n  \"|>\",\n];\n\nexport const ASSIGNMENT_OPERATORS = [\n  \"=\",\n  \"+=\",\n  ...NUMBER_BINARY_OPERATORS.map(op => op + \"=\"),\n  ...LOGICAL_OPERATORS.map(op => op + \"=\"),\n];\n\nexport const BOOLEAN_UNARY_OPERATORS = [\"delete\", \"!\"];\nexport const NUMBER_UNARY_OPERATORS = [\"+\", \"-\", \"~\"];\nexport const STRING_UNARY_OPERATORS = [\"typeof\"];\nexport const UNARY_OPERATORS = [\n  \"void\",\n  \"throw\",\n  ...BOOLEAN_UNARY_OPERATORS,\n  ...NUMBER_UNARY_OPERATORS,\n  ...STRING_UNARY_OPERATORS,\n];\n\nexport const INHERIT_KEYS = {\n  optional: [\"typeAnnotation\", \"typeParameters\", \"returnType\"],\n  force: [\"start\", \"loc\", \"end\"],\n} as const;\n\nexport const BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\nexport const NOT_LOCAL_BINDING = Symbol.for(\n  \"should not be considered a local binding\",\n);\n","import is from \"../validators/is.ts\";\nimport { validateField, validateChild } from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  deprecated?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"deprecated\", \"validate\"];\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          deprecated: field.deprecated,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n","import is from \"../validators/is.ts\";\nimport isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"../index.ts\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants/index.ts\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n        ),\n      ),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertValueType(\"string\");\n        }\n\n        const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n        const pattern = assertOneOf(\"=\");\n\n        return function (node: t.AssignmentExpression, key, val) {\n          const validator = is(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\", \"OptionalMemberExpression\")\n        : assertNodeType(\n            \"Identifier\",\n            \"MemberExpression\",\n            \"OptionalMemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? Object.assign(() => {}, {\n            each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n          })\n        : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n        : assertNodeType(\n            \"VariableDeclaration\",\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Identifier\", \"Pattern\", \"RestElement\")),\n    ),\n  },\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate: (function () {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};\n\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (!isValidIdentifier(val, false)) {\n              throw new TypeError(`\"${val}\" is not a valid identifier name`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n\n    const [, parentKey] = match;\n    const nonComp = { computed: false };\n\n    // We can't check if `parent.property === node`, because nodes are validated\n    // before replacing them in the AST.\n    if (parentKey === \"property\") {\n      if (is(\"MemberExpression\", parent, nonComp)) return;\n      if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if (is(\"Property\", parent, nonComp)) return;\n      if (is(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if (is(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n    } else if (parentKey === \"meta\") {\n      if (is(\"MetaProperty\", parent, { meta: node })) return;\n    }\n\n    if (\n      // Ideally we should call isStrictReservedWord if this node is a descendant\n      // of a block in strict mode. Also, we should pass the inModule option so\n      // we can disable \"await\" in module.\n      (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n      // Even if \"this\" is a keyword, we are using the Identifier\n      // node to represent it.\n      node.name !== \"this\"\n    ) {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  },\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: chain(\n        assertValueType(\"number\"),\n        Object.assign(\n          function (node, key, val) {\n            if (1 / val < 0 || !Number.isFinite(val)) {\n              const error = new Error(\n                \"NumericLiterals must be non-negative finite numbers. \" +\n                  `You can use t.valueToNode(${val}) instead.`,\n              );\n              if (process.env.BABEL_8_BREAKING) {\n                // TODO(@nicolo-ribaudo) Fix regenerator to not pass negative\n                // numbers here.\n                if (!IS_STANDALONE) {\n                  if (!new Error().stack.includes(\"regenerator\")) {\n                    throw error;\n                  }\n                }\n              } else {\n                // TODO: Enable this warning once regenerator is fixed.\n                // https://github.com/facebook/regenerator/pull/680\n                // console.warn(error);\n              }\n            }\n          } satisfies Validator,\n          { type: \"number\" },\n        ),\n      ),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            const invalid = /[^gimsuy]/.exec(val);\n            if (invalid) {\n              throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\"),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_TYPES_8_BREAKING ? { default: \"method\" } : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"DecimalLiteral\",\n          \"PrivateName\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: [\n              \"Expression\",\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && node.computed) {\n              throw new TypeError(\n                \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n        function (node: t.ObjectProperty, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          if (val && !is(\"Identifier\", node.key)) {\n            throw new TypeError(\n              \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n            );\n          }\n        } as Validator,\n      ),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: (function () {\n    const pattern = assertNodeType(\n      \"Identifier\",\n      \"Pattern\",\n      \"TSAsExpression\",\n      \"TSSatisfiesExpression\",\n      \"TSNonNullExpression\",\n      \"TSTypeAssertion\",\n    );\n    const expression = assertNodeType(\"Expression\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      const validator = is(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"MemberExpression\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n  },\n  validate(parent: t.ArrayPattern | t.ObjectPattern, key) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n    const [, listKey, index] = match as unknown as [\n      string,\n      keyof typeof parent,\n      string,\n    ];\n    if ((parent[listKey] as t.Node[]).length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  },\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"SwitchCase\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: chain(\n        assertNodeType(\"BlockStatement\"),\n        Object.assign(\n          function (node: t.TryStatement) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (!node.handler && !node.finalizer) {\n              throw new TypeError(\n                \"TryStatement expects either a handler or finalizer, or both\",\n              );\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\"BlockStatement\"],\n          },\n        ),\n      ),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"Expression\")\n        : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n        // https://github.com/tc39/proposal-async-explicit-resource-management\n        \"await using\",\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"VariableDeclarator\")),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    if (!is(\"ForXStatement\", parent, { left: node })) return;\n    if (node.declarations.length !== 1) {\n      throw new TypeError(\n        `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n      );\n    }\n  },\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"LVal\");\n        }\n\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n        );\n        const without = assertNodeType(\"Identifier\");\n\n        return function (node: t.VariableDeclarator, key, val) {\n          const validator = node.init ? normal : without;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"ClassAccessorProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n            \"StaticBlock\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // The id may be omitted if this is the child of an\n      // ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate: (function () {\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"TSDeclareFunction\",\n        \"FunctionDeclaration\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: chain(\n        assertNodeType(\"Declaration\"),\n        Object.assign(\n          function (node: t.ExportNamedDeclaration, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (val && node.specifiers.length) {\n              throw new TypeError(\n                \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n              );\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Declaration\"] },\n        ),\n        function (node: t.ExportNamedDeclaration, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          // This validator isn't put at the top level because we can run it\n          // even if this node doesn't have a parent.\n\n          if (val && node.source) {\n            throw new TypeError(\"Cannot export a declaration from a source\");\n          }\n        },\n      ),\n    },\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    specifiers: {\n      default: [],\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          (function () {\n            const sourced = assertNodeType(\n              \"ExportSpecifier\",\n              \"ExportDefaultSpecifier\",\n              \"ExportNamespaceSpecifier\",\n            );\n            const sourceless = assertNodeType(\"ExportSpecifier\");\n\n            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n\n            return function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator;\n          })(),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return function (node, key, val) {\n          if (is(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        };\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    source: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: chain(\n        assertNodeType(\"Identifier\"),\n        Object.assign(\n          function (node: t.MetaProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            let property;\n            switch (val.name) {\n              case \"function\":\n                property = \"sent\";\n                break;\n              case \"new\":\n                property = \"target\";\n                break;\n              case \"import\":\n                property = \"meta\";\n                break;\n            }\n            if (!is(\"Identifier\", node.property, { name: property })) {\n              throw new TypeError(\"Unrecognised MetaProperty\");\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Identifier\"] },\n        ),\n      ),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\n          \"Identifier\",\n          \"Pattern\",\n          \"RestElement\",\n          \"TSParameterProperty\",\n        ),\n      ),\n    ),\n  },\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\", \"typeParameters\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.YieldExpression, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && !node.argument) {\n              throw new TypeError(\n                \"Property delegate of YieldExpression cannot be true if there is no argument\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n      ),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\", \"typeAnnotation\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n","import {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  const isDeclareClass = name === \"DeclareClass\";\n\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      ...(isDeclareClass ? [\"mixins\", \"implements\"] : []),\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      ...(isDeclareClass\n        ? {\n            mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n            implements: validateOptional(arrayOfType(\"ClassImplements\")),\n          }\n        : {}),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType([\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ]),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n","import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n","import { ALIAS_KEYS } from \"./utils.ts\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwn(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n","import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils.ts\";\nimport { PLACEHOLDERS } from \"./placeholders.ts\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n","import defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils.ts\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING\n    ? {\n        object: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n        callee: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n      }\n    : {\n        object: {\n          validate: assertNodeType(\"Expression\"),\n        },\n        callee: {\n          validate: assertNodeType(\"Expression\"),\n        },\n      },\n});\n\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ObjectProperty\", \"SpreadElement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\", \"SpreadElement\")),\n      ),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n","import {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core.ts\";\nimport is from \"../validators/is.ts\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    [\"ArrayPattern\", \"Identifier\", \"ObjectPattern\", \"RestElement\"],\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\", \"typeParameters\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType([\"TSType\", \"TSNamedTupleMember\"]),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    const: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n","export const DEPRECATED_ALIASES = {\n  ModuleDeclaration: \"ImportOrExportDeclaration\",\n};\n","import toFastProperties from \"to-fast-properties\";\nimport \"./core.ts\";\nimport \"./flow.ts\";\nimport \"./jsx.ts\";\nimport \"./misc.ts\";\nimport \"./experimental.ts\";\nimport \"./typescript.ts\";\nimport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n} from \"./utils.ts\";\nimport {\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n} from \"./placeholders.ts\";\nimport { DEPRECATED_ALIASES } from \"./deprecated-aliases.ts\";\n\n(\n  Object.keys(DEPRECATED_ALIASES) as (keyof typeof DEPRECATED_ALIASES)[]\n).forEach(deprecatedAlias => {\n  FLIPPED_ALIAS_KEYS[deprecatedAlias] =\n    FLIPPED_ALIAS_KEYS[DEPRECATED_ALIASES[deprecatedAlias]];\n});\n\n// We do this here, because at this point the visitor keys should be ready and setup\ntoFastProperties(VISITOR_KEYS);\ntoFastProperties(ALIAS_KEYS);\ntoFastProperties(FLIPPED_ALIAS_KEYS);\ntoFastProperties(NODE_FIELDS);\ntoFastProperties(BUILDER_KEYS);\ntoFastProperties(DEPRECATED_KEYS);\n\ntoFastProperties(PLACEHOLDERS_ALIAS);\ntoFastProperties(PLACEHOLDERS_FLIPPED_ALIAS);\n\nconst TYPES: Array<string> = [].concat(\n  Object.keys(VISITOR_KEYS),\n  Object.keys(FLIPPED_ALIAS_KEYS),\n  Object.keys(DEPRECATED_KEYS),\n);\n\nexport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_ALIASES,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n  TYPES,\n};\n\nexport type { FieldOptions } from \"./utils.ts\";\n","import {\n  NODE_FIELDS,\n  NODE_PARENT_VALIDATIONS,\n  type FieldOptions,\n} from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function validate(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n): void {\n  if (!node) return;\n\n  const fields = NODE_FIELDS[node.type];\n  if (!fields) return;\n\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\n\nexport function validateField(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n  field: FieldOptions | undefined | null,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n}\n\nexport function validateChild(\n  node: t.Node | undefined | null,\n  key: string,\n  val?: t.Node | undefined | null,\n) {\n  if (val == null) return;\n  const validate = NODE_PARENT_VALIDATIONS[val.type];\n  if (!validate) return;\n  validate(node, key, val);\n}\n","import validate from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\nimport { BUILDER_KEYS } from \"../index.ts\";\n\nexport default function validateNode<N extends t.Node>(node: N) {\n  // todo: because keys not in BUILDER_KEYS are not validated - this actually allows invalid nodes in some cases\n  const keys = BUILDER_KEYS[node.type] as (keyof N & string)[];\n  for (const key of keys) {\n    validate(node, key, node[key]);\n  }\n  return node;\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport validateNode from \"../validateNode.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  return validateNode<t.ArrayExpression>({\n    type: \"ArrayExpression\",\n    elements,\n  });\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal | t.OptionalMemberExpression,\n  right: t.Expression,\n): t.AssignmentExpression {\n  return validateNode<t.AssignmentExpression>({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  return validateNode<t.BinaryExpression>({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  return validateNode<t.InterpreterDirective>({\n    type: \"InterpreterDirective\",\n    value,\n  });\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  return validateNode<t.Directive>({\n    type: \"Directive\",\n    value,\n  });\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  return validateNode<t.DirectiveLiteral>({\n    type: \"DirectiveLiteral\",\n    value,\n  });\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  return validateNode<t.BlockStatement>({\n    type: \"BlockStatement\",\n    body,\n    directives,\n  });\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  return validateNode<t.BreakStatement>({\n    type: \"BreakStatement\",\n    label,\n  });\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.CallExpression {\n  return validateNode<t.CallExpression>({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  return validateNode<t.CatchClause>({\n    type: \"CatchClause\",\n    param,\n    body,\n  });\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  return validateNode<t.ConditionalExpression>({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  return validateNode<t.ContinueStatement>({\n    type: \"ContinueStatement\",\n    label,\n  });\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  return validateNode<t.DoWhileStatement>({\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  });\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  return validateNode<t.ExpressionStatement>({\n    type: \"ExpressionStatement\",\n    expression,\n  });\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  return validateNode<t.File>({\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  });\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  return validateNode<t.ForInStatement>({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  });\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  return validateNode<t.ForStatement>({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  });\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  return validateNode<t.FunctionDeclaration>({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  return validateNode<t.FunctionExpression>({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function identifier(name: string): t.Identifier {\n  return validateNode<t.Identifier>({\n    type: \"Identifier\",\n    name,\n  });\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  return validateNode<t.IfStatement>({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  return validateNode<t.LabeledStatement>({\n    type: \"LabeledStatement\",\n    label,\n    body,\n  });\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  return validateNode<t.StringLiteral>({\n    type: \"StringLiteral\",\n    value,\n  });\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  return validateNode<t.NumericLiteral>({\n    type: \"NumericLiteral\",\n    value,\n  });\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  return validateNode<t.BooleanLiteral>({\n    type: \"BooleanLiteral\",\n    value,\n  });\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  return validateNode<t.RegExpLiteral>({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  });\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  return validateNode<t.LogicalExpression>({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: true | false | null = null,\n): t.MemberExpression {\n  return validateNode<t.MemberExpression>({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.NewExpression {\n  return validateNode<t.NewExpression>({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  return validateNode<t.Program>({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n  });\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  return validateNode<t.ObjectExpression>({\n    type: \"ObjectExpression\",\n    properties,\n  });\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  return validateNode<t.ObjectMethod>({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  });\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  return validateNode<t.ObjectProperty>({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  });\n}\nexport function restElement(argument: t.LVal): t.RestElement {\n  return validateNode<t.RestElement>({\n    type: \"RestElement\",\n    argument,\n  });\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  return validateNode<t.ReturnStatement>({\n    type: \"ReturnStatement\",\n    argument,\n  });\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  return validateNode<t.SequenceExpression>({\n    type: \"SequenceExpression\",\n    expressions,\n  });\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  return validateNode<t.ParenthesizedExpression>({\n    type: \"ParenthesizedExpression\",\n    expression,\n  });\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  return validateNode<t.SwitchCase>({\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  });\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  return validateNode<t.SwitchStatement>({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  });\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  return validateNode<t.ThrowStatement>({\n    type: \"ThrowStatement\",\n    argument,\n  });\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  return validateNode<t.TryStatement>({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  });\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  return validateNode<t.UnaryExpression>({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  return validateNode<t.UpdateExpression>({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  return validateNode<t.VariableDeclaration>({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  });\n}\nexport function variableDeclarator(\n  id: t.LVal,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  return validateNode<t.VariableDeclarator>({\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  });\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  return validateNode<t.WhileStatement>({\n    type: \"WhileStatement\",\n    test,\n    body,\n  });\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  return validateNode<t.WithStatement>({\n    type: \"WithStatement\",\n    object,\n    body,\n  });\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  return validateNode<t.AssignmentPattern>({\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  });\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike | t.LVal>,\n): t.ArrayPattern {\n  return validateNode<t.ArrayPattern>({\n    type: \"ArrayPattern\",\n    elements,\n  });\n}\nexport function arrowFunctionExpression(\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  return validateNode<t.ArrowFunctionExpression>({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  });\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  return validateNode<t.ClassBody>({\n    type: \"ClassBody\",\n    body,\n  });\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  return validateNode<t.ClassExpression>({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function classDeclaration(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  return validateNode<t.ClassDeclaration>({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  return validateNode<t.ExportAllDeclaration>({\n    type: \"ExportAllDeclaration\",\n    source,\n  });\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  return validateNode<t.ExportDefaultDeclaration>({\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  });\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  return validateNode<t.ExportNamedDeclaration>({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  return validateNode<t.ExportSpecifier>({\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  });\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  return validateNode<t.ForOfStatement>({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  });\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  return validateNode<t.ImportDeclaration>({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  });\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  return validateNode<t.ImportDefaultSpecifier>({\n    type: \"ImportDefaultSpecifier\",\n    local,\n  });\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  return validateNode<t.ImportNamespaceSpecifier>({\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  });\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  return validateNode<t.ImportSpecifier>({\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  });\n}\nexport function importExpression(\n  source: t.Expression,\n  options: t.Expression | null = null,\n): t.ImportExpression {\n  return validateNode<t.ImportExpression>({\n    type: \"ImportExpression\",\n    source,\n    options,\n  });\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  return validateNode<t.MetaProperty>({\n    type: \"MetaProperty\",\n    meta,\n    property,\n  });\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  return validateNode<t.ClassMethod>({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  });\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  return validateNode<t.ObjectPattern>({\n    type: \"ObjectPattern\",\n    properties,\n  });\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  return validateNode<t.SpreadElement>({\n    type: \"SpreadElement\",\n    argument,\n  });\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  return validateNode<t.TaggedTemplateExpression>({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  });\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  return validateNode<t.TemplateElement>({\n    type: \"TemplateElement\",\n    value,\n    tail,\n  });\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  return validateNode<t.TemplateLiteral>({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  });\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  return validateNode<t.YieldExpression>({\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  });\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  return validateNode<t.AwaitExpression>({\n    type: \"AwaitExpression\",\n    argument,\n  });\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function bigIntLiteral(value: string): t.BigIntLiteral {\n  return validateNode<t.BigIntLiteral>({\n    type: \"BigIntLiteral\",\n    value,\n  });\n}\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  return validateNode<t.ExportNamespaceSpecifier>({\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  });\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  return validateNode<t.OptionalMemberExpression>({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n  optional: boolean,\n): t.OptionalCallExpression {\n  return validateNode<t.OptionalCallExpression>({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  });\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  return validateNode<t.ClassProperty>({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  return validateNode<t.ClassAccessorProperty>({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  return validateNode<t.ClassPrivateProperty>({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  });\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  return validateNode<t.ClassPrivateMethod>({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  });\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  return validateNode<t.PrivateName>({\n    type: \"PrivateName\",\n    id,\n  });\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  return validateNode<t.StaticBlock>({\n    type: \"StaticBlock\",\n    body,\n  });\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  return validateNode<t.ArrayTypeAnnotation>({\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  });\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  return validateNode<t.BooleanLiteralTypeAnnotation>({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  return validateNode<t.ClassImplements>({\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  });\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  return validateNode<t.DeclareClass>({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  return validateNode<t.DeclareFunction>({\n    type: \"DeclareFunction\",\n    id,\n  });\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  return validateNode<t.DeclareInterface>({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  return validateNode<t.DeclareModule>({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  });\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  return validateNode<t.DeclareModuleExports>({\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  });\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  return validateNode<t.DeclareTypeAlias>({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  return validateNode<t.DeclareOpaqueType>({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  });\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  return validateNode<t.DeclareVariable>({\n    type: \"DeclareVariable\",\n    id,\n  });\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n): t.DeclareExportDeclaration {\n  return validateNode<t.DeclareExportDeclaration>({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n): t.DeclareExportAllDeclaration {\n  return validateNode<t.DeclareExportAllDeclaration>({\n    type: \"DeclareExportAllDeclaration\",\n    source,\n  });\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  return validateNode<t.DeclaredPredicate>({\n    type: \"DeclaredPredicate\",\n    value,\n  });\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  return validateNode<t.FunctionTypeAnnotation>({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  });\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  return validateNode<t.FunctionTypeParam>({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  });\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  return validateNode<t.GenericTypeAnnotation>({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  });\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  return validateNode<t.InterfaceExtends>({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  });\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  return validateNode<t.InterfaceDeclaration>({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  return validateNode<t.InterfaceTypeAnnotation>({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  });\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  return validateNode<t.IntersectionTypeAnnotation>({\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  });\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  return validateNode<t.NullableTypeAnnotation>({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  return validateNode<t.NumberLiteralTypeAnnotation>({\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  return validateNode<t.ObjectTypeAnnotation>({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  });\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  return validateNode<t.ObjectTypeInternalSlot>({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  });\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  return validateNode<t.ObjectTypeCallProperty>({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  });\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  return validateNode<t.ObjectTypeIndexer>({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  });\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  return validateNode<t.ObjectTypeProperty>({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  });\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  return validateNode<t.ObjectTypeSpreadProperty>({\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  });\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  return validateNode<t.OpaqueType>({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  });\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  return validateNode<t.QualifiedTypeIdentifier>({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  });\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  return validateNode<t.StringLiteralTypeAnnotation>({\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  return validateNode<t.TupleTypeAnnotation>({\n    type: \"TupleTypeAnnotation\",\n    types,\n  });\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  return validateNode<t.TypeofTypeAnnotation>({\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  });\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  return validateNode<t.TypeAlias>({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  return validateNode<t.TypeAnnotation>({\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  return validateNode<t.TypeCastExpression>({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  return validateNode<t.TypeParameter>({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  });\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  return validateNode<t.TypeParameterDeclaration>({\n    type: \"TypeParameterDeclaration\",\n    params,\n  });\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  return validateNode<t.TypeParameterInstantiation>({\n    type: \"TypeParameterInstantiation\",\n    params,\n  });\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  return validateNode<t.UnionTypeAnnotation>({\n    type: \"UnionTypeAnnotation\",\n    types,\n  });\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  return validateNode<t.Variance>({\n    type: \"Variance\",\n    kind,\n  });\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  return validateNode<t.EnumDeclaration>({\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  });\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  return validateNode<t.EnumBooleanBody>({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  return validateNode<t.EnumNumberBody>({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  return validateNode<t.EnumStringBody>({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  return validateNode<t.EnumSymbolBody>({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  return validateNode<t.EnumBooleanMember>({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  });\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  return validateNode<t.EnumNumberMember>({\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  });\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  return validateNode<t.EnumStringMember>({\n    type: \"EnumStringMember\",\n    id,\n    init,\n  });\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  return validateNode<t.EnumDefaultedMember>({\n    type: \"EnumDefaultedMember\",\n    id,\n  });\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  return validateNode<t.IndexedAccessType>({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  return validateNode<t.OptionalIndexedAccessType>({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  });\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  return validateNode<t.JSXAttribute>({\n    type: \"JSXAttribute\",\n    name,\n    value,\n  });\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  return validateNode<t.JSXClosingElement>({\n    type: \"JSXClosingElement\",\n    name,\n  });\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  return validateNode<t.JSXElement>({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  });\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  return validateNode<t.JSXExpressionContainer>({\n    type: \"JSXExpressionContainer\",\n    expression,\n  });\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  return validateNode<t.JSXSpreadChild>({\n    type: \"JSXSpreadChild\",\n    expression,\n  });\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  return validateNode<t.JSXIdentifier>({\n    type: \"JSXIdentifier\",\n    name,\n  });\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  return validateNode<t.JSXMemberExpression>({\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  });\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  return validateNode<t.JSXNamespacedName>({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  });\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  return validateNode<t.JSXOpeningElement>({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  });\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  return validateNode<t.JSXSpreadAttribute>({\n    type: \"JSXSpreadAttribute\",\n    argument,\n  });\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  return validateNode<t.JSXText>({\n    type: \"JSXText\",\n    value,\n  });\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  return validateNode<t.JSXFragment>({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  });\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  return validateNode<t.Placeholder>({\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  });\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  return validateNode<t.V8IntrinsicIdentifier>({\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  });\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  return validateNode<t.BindExpression>({\n    type: \"BindExpression\",\n    object,\n    callee,\n  });\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  return validateNode<t.ImportAttribute>({\n    type: \"ImportAttribute\",\n    key,\n    value,\n  });\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  return validateNode<t.Decorator>({\n    type: \"Decorator\",\n    expression,\n  });\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  return validateNode<t.DoExpression>({\n    type: \"DoExpression\",\n    body,\n    async,\n  });\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  return validateNode<t.ExportDefaultSpecifier>({\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  });\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  return validateNode<t.RecordExpression>({\n    type: \"RecordExpression\",\n    properties,\n  });\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  return validateNode<t.TupleExpression>({\n    type: \"TupleExpression\",\n    elements,\n  });\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  return validateNode<t.DecimalLiteral>({\n    type: \"DecimalLiteral\",\n    value,\n  });\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  return validateNode<t.ModuleExpression>({\n    type: \"ModuleExpression\",\n    body,\n  });\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  return validateNode<t.PipelineTopicExpression>({\n    type: \"PipelineTopicExpression\",\n    expression,\n  });\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  return validateNode<t.PipelineBareFunction>({\n    type: \"PipelineBareFunction\",\n    callee,\n  });\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  return validateNode<t.TSParameterProperty>({\n    type: \"TSParameterProperty\",\n    parameter,\n  });\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  return validateNode<t.TSDeclareFunction>({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  return validateNode<t.TSDeclareMethod>({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  return validateNode<t.TSQualifiedName>({\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  });\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  return validateNode<t.TSCallSignatureDeclaration>({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  return validateNode<t.TSConstructSignatureDeclaration>({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSPropertySignature {\n  return validateNode<t.TSPropertySignature>({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  return validateNode<t.TSMethodSignature>({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  return validateNode<t.TSIndexSignature>({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  return validateNode<t.TSFunctionType>({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  return validateNode<t.TSConstructorType>({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  return validateNode<t.TSTypeReference>({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  });\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  return validateNode<t.TSTypePredicate>({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  });\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  return validateNode<t.TSTypeQuery>({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  });\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  return validateNode<t.TSTypeLiteral>({\n    type: \"TSTypeLiteral\",\n    members,\n  });\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  return validateNode<t.TSArrayType>({\n    type: \"TSArrayType\",\n    elementType,\n  });\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  return validateNode<t.TSTupleType>({\n    type: \"TSTupleType\",\n    elementTypes,\n  });\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  return validateNode<t.TSOptionalType>({\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  });\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  return validateNode<t.TSRestType>({\n    type: \"TSRestType\",\n    typeAnnotation,\n  });\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  return validateNode<t.TSNamedTupleMember>({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  });\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  return validateNode<t.TSUnionType>({\n    type: \"TSUnionType\",\n    types,\n  });\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  return validateNode<t.TSIntersectionType>({\n    type: \"TSIntersectionType\",\n    types,\n  });\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  return validateNode<t.TSConditionalType>({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  });\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  return validateNode<t.TSInferType>({\n    type: \"TSInferType\",\n    typeParameter,\n  });\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  return validateNode<t.TSParenthesizedType>({\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  });\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(typeAnnotation: t.TSType): t.TSTypeOperator {\n  return validateNode<t.TSTypeOperator>({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null,\n  });\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  return validateNode<t.TSIndexedAccessType>({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  return validateNode<t.TSMappedType>({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  });\n}\nexport { tsMappedType as tSMappedType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  return validateNode<t.TSLiteralType>({\n    type: \"TSLiteralType\",\n    literal,\n  });\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  return validateNode<t.TSExpressionWithTypeArguments>({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  return validateNode<t.TSInterfaceDeclaration>({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  return validateNode<t.TSInterfaceBody>({\n    type: \"TSInterfaceBody\",\n    body,\n  });\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  return validateNode<t.TSTypeAliasDeclaration>({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  });\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  return validateNode<t.TSInstantiationExpression>({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  return validateNode<t.TSAsExpression>({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  return validateNode<t.TSSatisfiesExpression>({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  return validateNode<t.TSTypeAssertion>({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  });\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  return validateNode<t.TSEnumDeclaration>({\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  });\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  return validateNode<t.TSEnumMember>({\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  });\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  return validateNode<t.TSModuleDeclaration>({\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n  });\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  return validateNode<t.TSModuleBlock>({\n    type: \"TSModuleBlock\",\n    body,\n  });\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  return validateNode<t.TSImportType>({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  });\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  return validateNode<t.TSImportEqualsDeclaration>({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  });\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  return validateNode<t.TSExternalModuleReference>({\n    type: \"TSExternalModuleReference\",\n    expression,\n  });\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  return validateNode<t.TSNonNullExpression>({\n    type: \"TSNonNullExpression\",\n    expression,\n  });\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  return validateNode<t.TSExportAssignment>({\n    type: \"TSExportAssignment\",\n    expression,\n  });\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  return validateNode<t.TSNamespaceExportDeclaration>({\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  });\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  return validateNode<t.TSTypeAnnotation>({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  return validateNode<t.TSTypeParameterInstantiation>({\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  });\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  return validateNode<t.TSTypeParameterDeclaration>({\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  });\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  return validateNode<t.TSTypeParameter>({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  });\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  deprecationWarning(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  deprecationWarning(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(argument: t.LVal) {\n  deprecationWarning(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  deprecationWarning(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n","import { stringLiteral } from \"../../builders/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\nimport { inherits } from \"../../index.ts\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: t.JSXText,\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(inherits(stringLiteral(str), child));\n}\n","import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated/index.ts\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild.ts\";\nimport type * as t from \"../../index.ts\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n","import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isNode(node: any): node is t.Node {\n  return !!(node && VISITOR_KEYS[node.type]);\n}\n","import isNode from \"../validators/isNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function assertNode(node?: any): asserts node is t.Node {\n  if (!isNode(node)) {\n    const type = node?.type ?? JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertImportExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportExpression {\n  assert(\"ImportExpression\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertImportOrExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportOrExportDeclaration {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nexport function assertModuleDeclaration(node: any, opts: any): void {\n  deprecationWarning(\n    \"assertModuleDeclaration\",\n    \"assertImportOrExportDeclaration\",\n  );\n  assert(\"ModuleDeclaration\", node, opts);\n}\n","import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n","import {\n  isAnyTypeAnnotation,\n  isGenericTypeAnnotation,\n  isUnionTypeAnnotation,\n  isFlowBaseAnnotation,\n  isIdentifier,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.GenericTypeAnnotation[\"id\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.FlowType | false | null | undefined>,\n): t.FlowType[] {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.GenericTypeAnnotation>();\n  const bases = new Map<t.FlowBaseAnnotation[\"type\"], t.FlowBaseAnnotation>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.FlowType[]>();\n\n  const types: t.FlowType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (isFlowBaseAnnotation(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isUnionTypeAnnotation(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (isGenericTypeAnnotation(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics.has(name)) {\n        let existing: t.Flow = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n","import { unionTypeAnnotation } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/flow/removeTypeDuplicates.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createFlowUnionType<T extends t.FlowType>(\n  types: [T] | Array<T>,\n): T | t.UnionTypeAnnotation {\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0] as T;\n  } else {\n    return unionTypeAnnotation(flattened);\n  }\n}\n","import {\n  isIdentifier,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.TSType>,\n): Array<t.TSType> {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    if (isTSTypeReference(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n","import { tsUnionType } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates.ts\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n","import { numericLiteral, unaryExpression } from \"./generated/index.ts\";\n\nexport function buildUndefinedNode() {\n  return unaryExpression(\"void\", numericLiteral(0), true);\n}\n","import { NODE_FIELDS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\nimport { isFile, isIdentifier } from \"../validators/generated/index.ts\";\n\nconst { hasOwn } = process.env.BABEL_8_BREAKING\n  ? Object\n  : { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (hasOwn(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (hasOwn(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n  } else if (!hasOwn(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (hasOwn(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (hasOwn(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (hasOwn(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node`, including only\n * properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function clone<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false);\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function cloneDeep<T extends t.Node>(node: T): T {\n  return cloneNode(node);\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * excluding `_private` and location properties.\n */\nexport default function cloneDeepWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ true, /* withoutLoc */ true);\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node` excluding `_private` and location properties.\n */\nexport default function cloneWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false, /* withoutLoc */ true);\n}\n","import type * as t from \"../index.ts\";\n\n/**\n * Add comments of certain type to a node.\n */\nexport default function addComments<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  comments: Array<t.Comment>,\n): T {\n  if (!comments || !node) return node;\n\n  const key = `${type}Comments` as const;\n\n  if (node[key]) {\n    if (type === \"leading\") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n\n  return node;\n}\n","import addComments from \"./addComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Add comment of certain type to a node.\n */\nexport default function addComment<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n): T {\n  return addComments(node, type, [\n    {\n      type: line ? \"CommentLine\" : \"CommentBlock\",\n      value: content,\n    } as t.Comment,\n  ]);\n}\n","import type * as t from \"../index.ts\";\n\nexport default function inherit<\n  C extends t.Node | undefined,\n  P extends t.Node | undefined,\n>(key: keyof C & keyof P, child: C, parent: P): void {\n  if (child && parent) {\n    // @ts-expect-error Could further refine key definitions\n    child[key] = Array.from(\n      new Set([].concat(child[key], parent[key]).filter(Boolean)),\n    );\n  }\n}\n","import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritInnerComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"innerComments\", child, parent);\n}\n","import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritLeadingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"leadingComments\", child, parent);\n}\n","import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritTrailingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"trailingComments\", child, parent);\n}\n","import inheritTrailingComments from \"./inheritTrailingComments.ts\";\nimport inheritLeadingComments from \"./inheritLeadingComments.ts\";\nimport inheritInnerComments from \"./inheritInnerComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all unique comments from `parent` node to `child` node.\n */\nexport default function inheritsComments<T extends t.Node>(\n  child: T,\n  parent: t.Node,\n): T {\n  inheritTrailingComments(child, parent);\n  inheritLeadingComments(child, parent);\n  inheritInnerComments(child, parent);\n\n  return child;\n}\n","import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Remove comment properties from a node.\n */\nexport default function removeComments<T extends t.Node>(node: T): T {\n  COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n\n  return node;\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport { FLIPPED_ALIAS_KEYS } from \"../../definitions/index.ts\";\n\nexport const STANDARDIZED_TYPES = FLIPPED_ALIAS_KEYS[\"Standardized\"];\nexport const EXPRESSION_TYPES = FLIPPED_ALIAS_KEYS[\"Expression\"];\nexport const BINARY_TYPES = FLIPPED_ALIAS_KEYS[\"Binary\"];\nexport const SCOPABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Scopable\"];\nexport const BLOCKPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"BlockParent\"];\nexport const BLOCK_TYPES = FLIPPED_ALIAS_KEYS[\"Block\"];\nexport const STATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"Statement\"];\nexport const TERMINATORLESS_TYPES = FLIPPED_ALIAS_KEYS[\"Terminatorless\"];\nexport const COMPLETIONSTATEMENT_TYPES =\n  FLIPPED_ALIAS_KEYS[\"CompletionStatement\"];\nexport const CONDITIONAL_TYPES = FLIPPED_ALIAS_KEYS[\"Conditional\"];\nexport const LOOP_TYPES = FLIPPED_ALIAS_KEYS[\"Loop\"];\nexport const WHILE_TYPES = FLIPPED_ALIAS_KEYS[\"While\"];\nexport const EXPRESSIONWRAPPER_TYPES = FLIPPED_ALIAS_KEYS[\"ExpressionWrapper\"];\nexport const FOR_TYPES = FLIPPED_ALIAS_KEYS[\"For\"];\nexport const FORXSTATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"ForXStatement\"];\nexport const FUNCTION_TYPES = FLIPPED_ALIAS_KEYS[\"Function\"];\nexport const FUNCTIONPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParent\"];\nexport const PUREISH_TYPES = FLIPPED_ALIAS_KEYS[\"Pureish\"];\nexport const DECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"Declaration\"];\nexport const PATTERNLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"PatternLike\"];\nexport const LVAL_TYPES = FLIPPED_ALIAS_KEYS[\"LVal\"];\nexport const TSENTITYNAME_TYPES = FLIPPED_ALIAS_KEYS[\"TSEntityName\"];\nexport const LITERAL_TYPES = FLIPPED_ALIAS_KEYS[\"Literal\"];\nexport const IMMUTABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Immutable\"];\nexport const USERWHITESPACABLE_TYPES = FLIPPED_ALIAS_KEYS[\"UserWhitespacable\"];\nexport const METHOD_TYPES = FLIPPED_ALIAS_KEYS[\"Method\"];\nexport const OBJECTMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"ObjectMember\"];\nexport const PROPERTY_TYPES = FLIPPED_ALIAS_KEYS[\"Property\"];\nexport const UNARYLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"UnaryLike\"];\nexport const PATTERN_TYPES = FLIPPED_ALIAS_KEYS[\"Pattern\"];\nexport const CLASS_TYPES = FLIPPED_ALIAS_KEYS[\"Class\"];\nexport const IMPORTOREXPORTDECLARATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"ImportOrExportDeclaration\"];\nexport const EXPORTDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ExportDeclaration\"];\nexport const MODULESPECIFIER_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleSpecifier\"];\nexport const ACCESSOR_TYPES = FLIPPED_ALIAS_KEYS[\"Accessor\"];\nexport const PRIVATE_TYPES = FLIPPED_ALIAS_KEYS[\"Private\"];\nexport const FLOW_TYPES = FLIPPED_ALIAS_KEYS[\"Flow\"];\nexport const FLOWTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowType\"];\nexport const FLOWBASEANNOTATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"FlowBaseAnnotation\"];\nexport const FLOWDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"FlowDeclaration\"];\nexport const FLOWPREDICATE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowPredicate\"];\nexport const ENUMBODY_TYPES = FLIPPED_ALIAS_KEYS[\"EnumBody\"];\nexport const ENUMMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"EnumMember\"];\nexport const JSX_TYPES = FLIPPED_ALIAS_KEYS[\"JSX\"];\nexport const MISCELLANEOUS_TYPES = FLIPPED_ALIAS_KEYS[\"Miscellaneous\"];\nexport const TYPESCRIPT_TYPES = FLIPPED_ALIAS_KEYS[\"TypeScript\"];\nexport const TSTYPEELEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"TSTypeElement\"];\nexport const TSTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSType\"];\nexport const TSBASETYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSBaseType\"];\n/**\n * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.\n */\nexport const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;\n","import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n","import toBlock from \"./toBlock.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n","import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n","import toIdentifier from \"./toIdentifier.ts\";\n\nexport default function toBindingIdentifierName(name: string): string {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n\n  return name;\n}\n","import { isIdentifier } from \"../validators/generated/index.ts\";\nimport { stringLiteral } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n","import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n","import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * A prefix AST traversal implementation meant for simple searching\n * and processing.\n */\nexport default function traverseFast<Options = {}>(\n  node: t.Node | null | undefined,\n  enter: (node: t.Node, opts?: Options) => void,\n  opts?: Options,\n): void {\n  if (!node) return;\n\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  opts = opts || ({} as Options);\n  enter(node, opts);\n\n  for (const key of keys) {\n    const subNode: t.Node | undefined | null =\n      // @ts-expect-error key must present in node\n      node[key];\n\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        traverseFast(node, enter, opts);\n      }\n    } else {\n      traverseFast(subNode, enter, opts);\n    }\n  }\n}\n","import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n","import traverseFast from \"../traverse/traverseFast.ts\";\nimport removeProperties from \"./removeProperties.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function removePropertiesDeep<T extends t.Node>(\n  tree: T,\n  opts?: { preserveComments: boolean } | null,\n): T {\n  traverseFast(tree, removeProperties, opts);\n\n  return tree;\n}\n","import {\n  isIdentifier,\n  isStringLiteral,\n} from \"../validators/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n","import {\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated/index.ts\";\nimport { expressionStatement } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toStatement as {\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false {\n  if (isStatement(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n  } else if (isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n  } else if (isAssignmentExpression(node)) {\n    return expressionStatement(node);\n  }\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n","import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if (isValidIdentifier(key)) {\n        nodeKey = identifier(key);\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n","import { memberExpression } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Append a node to a member expression.\n */\nexport default function appendToMemberExpression(\n  member: t.MemberExpression,\n  append: t.MemberExpression[\"property\"],\n  computed: boolean = false,\n): t.MemberExpression {\n  member.object = memberExpression(\n    member.object,\n    member.property,\n    member.computed,\n  );\n  member.property = append;\n  member.computed = !!computed;\n\n  return member;\n}\n","import { INHERIT_KEYS } from \"../constants/index.ts\";\nimport inheritsComments from \"../comments/inheritsComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all contextual properties from `parent` node to `child` node.\n */\nexport default function inherits<T extends t.Node | null | undefined>(\n  child: T,\n  parent: t.Node | null | undefined,\n): T {\n  if (!child || !parent) return child;\n\n  // optionally inherit specific properties if not null\n  for (const key of INHERIT_KEYS.optional) {\n    // @ts-expect-error Fixme: refine parent types\n    if (child[key] == null) {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit \"private\" properties\n  for (const key of Object.keys(parent)) {\n    if (key[0] === \"_\" && key !== \"__clone\") {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit select properties\n  for (const key of INHERIT_KEYS.force) {\n    // @ts-expect-error Fixme: refine parent types\n    child[key] = parent[key];\n  }\n\n  inheritsComments(child, parent);\n\n  return child;\n}\n","import { memberExpression } from \"../builders/generated/index.ts\";\nimport { isSuper } from \"../index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Prepend a node to a member expression.\n */\nexport default function prependToMemberExpression<\n  T extends Pick<t.MemberExpression, \"object\" | \"property\">,\n>(member: T, prepend: t.MemberExpression[\"object\"]): T {\n  if (isSuper(member.object)) {\n    throw new Error(\n      \"Cannot prepend node to super property access (`super.foo`).\",\n    );\n  }\n  member.object = memberExpression(prepend, member.object);\n\n  return member;\n}\n","import {\n  isExportDeclaration,\n  isIdentifier,\n  isDeclaration,\n  isFunctionDeclaration,\n  isFunctionExpression,\n  isExportAllDeclaration,\n  isAssignmentExpression,\n  isUnaryExpression,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport { getBindingIdentifiers as default };\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates: true,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, Array<t.Identifier>>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: false,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n\n/**\n * Return a list of binding identifiers associated with the input `node`.\n */\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  const search: t.Node[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n\n    if (\n      newBindingsOnly &&\n      // These two nodes do not introduce _new_ bindings, but they are included\n      // in getBindingIdentifiers.keys for backwards compatibility.\n      // TODO(@nicolo-ribaudo): Check if we can remove them from .keys in a\n      // backward-compatible way, and if not what we need to do to remove them\n      // in Babel 8.\n      (isAssignmentExpression(id) || isUnaryExpression(id))\n    ) {\n      continue;\n    }\n\n    const keys =\n      // @ts-expect-error getBindingIdentifiers.keys do not cover all AST types\n      getBindingIdentifiers.keys[id.type];\n\n    if (isIdentifier(id)) {\n      if (duplicates) {\n        const _ids = (ids[id.name] = ids[id.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n\n    if (isExportDeclaration(id) && !isExportAllDeclaration(id)) {\n      if (isDeclaration(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (isFunctionDeclaration(id)) {\n        search.push(id.id);\n        continue;\n      }\n\n      if (isFunctionExpression(id)) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes =\n          // @ts-expect-error key must present in id\n          id[key] as t.Node[] | t.Node | undefined | null;\n        if (nodes) {\n          Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);\n        }\n      }\n    }\n  }\n\n  // $FlowIssue Object.create() seems broken\n  return ids;\n}\n\n/**\n * Mapping of types to their identifier keys.\n */\ngetBindingIdentifiers.keys = {\n  DeclareClass: [\"id\"],\n  DeclareFunction: [\"id\"],\n  DeclareModule: [\"id\"],\n  DeclareVariable: [\"id\"],\n  DeclareInterface: [\"id\"],\n  DeclareTypeAlias: [\"id\"],\n  DeclareOpaqueType: [\"id\"],\n  InterfaceDeclaration: [\"id\"],\n  TypeAlias: [\"id\"],\n  OpaqueType: [\"id\"],\n\n  CatchClause: [\"param\"],\n  LabeledStatement: [\"label\"],\n  UnaryExpression: [\"argument\"],\n  AssignmentExpression: [\"left\"],\n\n  ImportSpecifier: [\"local\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportDeclaration: [\"specifiers\"],\n\n  ExportSpecifier: [\"exported\"],\n  ExportNamespaceSpecifier: [\"exported\"],\n  ExportDefaultSpecifier: [\"exported\"],\n\n  FunctionDeclaration: [\"id\", \"params\"],\n  FunctionExpression: [\"id\", \"params\"],\n  ArrowFunctionExpression: [\"params\"],\n  ObjectMethod: [\"params\"],\n  ClassMethod: [\"params\"],\n  ClassPrivateMethod: [\"params\"],\n\n  ForInStatement: [\"left\"],\n  ForOfStatement: [\"left\"],\n\n  ClassDeclaration: [\"id\"],\n  ClassExpression: [\"id\"],\n\n  RestElement: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n\n  ObjectProperty: [\"value\"],\n\n  AssignmentPattern: [\"left\"],\n  ArrayPattern: [\"elements\"],\n  ObjectPattern: [\"properties\"],\n\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\"],\n};\n","import getBindingIdentifiers from \"./getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default getOuterBindingIdentifiers as {\n  (node: t.Node, duplicates: true): Record<string, Array<t.Identifier>>;\n  (node: t.Node, duplicates?: false): Record<string, t.Identifier>;\n  (\n    node: t.Node,\n    duplicates?: boolean,\n  ): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n};\n\nfunction getOuterBindingIdentifiers(\n  node: t.Node,\n  duplicates: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  return getBindingIdentifiers(node, duplicates, true);\n}\n","import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n","import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Check if the input `node` is a binding identifier.\n */\nexport default function isBinding(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  if (\n    grandparent &&\n    node.type === \"Identifier\" &&\n    parent.type === \"ObjectProperty\" &&\n    grandparent.type === \"ObjectExpression\"\n  ) {\n    // We need to special-case this, because getBindingIdentifiers\n    // has an ObjectProperty->value entry for destructuring patterns.\n    return false;\n  }\n\n  const keys =\n    // @ts-expect-error getBindingIdentifiers.keys does not cover all AST types\n    getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val =\n        // @ts-expect-error key must present in parent\n        parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n","import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\nexport default function isLet(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node) &&\n    (node.kind !== \"var\" ||\n      // @ts-expect-error Fixme: document private properties\n      node[BLOCK_SCOPED_SYMBOL])\n  );\n}\n","import {\n  isClassDeclaration,\n  isFunctionDeclaration,\n} from \"./generated/index.ts\";\nimport isLet from \"./isLet.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is block scoped.\n */\nexport default function isBlockScoped(node: t.Node): boolean {\n  return isFunctionDeclaration(node) || isClassDeclaration(node) || isLet(node);\n}\n","import isType from \"./isType.ts\";\nimport { isIdentifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n","import { NODE_FIELDS, VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if two nodes are equivalent\n */\nexport default function isNodesEquivalent<T extends Partial<t.Node>>(\n  a: T,\n  b: any,\n): b is T {\n  if (\n    typeof a !== \"object\" ||\n    typeof b !== \"object\" ||\n    a == null ||\n    b == null\n  ) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    const val_a =\n      // @ts-expect-error field must present in a\n      a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (typeof val_a === \"object\" && !visitorKeys?.includes(field)) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\nexport default function isReferenced(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      // parent.value === node\n      return !grandparent || grandparent.type !== \"ObjectPattern\";\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      // @ts-expect-error todo(flow->ts): Property 'source' does not exist on type 'AnyTypeAnnotation'.\n      if (grandparent?.source) {\n        return false;\n      }\n      return parent.local === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: type X = { someProperty: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n\n      return true;\n  }\n\n  return true;\n}\n","import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n","import { isIdentifier, isImportDefaultSpecifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\nexport default function isSpecifierDefault(\n  specifier: t.ModuleSpecifier,\n): boolean {\n  return (\n    isImportDefaultSpecifier(specifier) ||\n    // @ts-expect-error todo(flow->ts): stricter type for specifier\n    isIdentifier(specifier.imported || specifier.exported, {\n      name: \"default\",\n    })\n  );\n}\n","import isValidIdentifier from \"./isValidIdentifier.ts\";\n\nconst RESERVED_WORDS_ES3_ONLY: Set<string> = new Set([\n  \"abstract\",\n  \"boolean\",\n  \"byte\",\n  \"char\",\n  \"double\",\n  \"enum\",\n  \"final\",\n  \"float\",\n  \"goto\",\n  \"implements\",\n  \"int\",\n  \"interface\",\n  \"long\",\n  \"native\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"short\",\n  \"static\",\n  \"synchronized\",\n  \"throws\",\n  \"transient\",\n  \"volatile\",\n]);\n\n/**\n * Check if the input `name` is a valid identifier name according to the ES3 specification.\n *\n * Additional ES3 reserved words are\n */\nexport default function isValidES3Identifier(name: string): boolean {\n  return isValidIdentifier(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n","import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a variable declaration.\n */\nexport default function isVar(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node, { kind: \"var\" }) &&\n    !(\n      // @ts-expect-error document private properties\n      node[BLOCK_SCOPED_SYMBOL]\n    )\n  );\n}\n","import isReactComponent from \"./validators/react/isReactComponent.ts\";\nimport isCompatTag from \"./validators/react/isCompatTag.ts\";\nimport buildChildren from \"./builders/react/buildChildren.ts\";\n\n// asserts\nexport { default as assertNode } from \"./asserts/assertNode.ts\";\nexport * from \"./asserts/generated/index.ts\";\n\n// builders\nexport { default as createTypeAnnotationBasedOnTypeof } from \"./builders/flow/createTypeAnnotationBasedOnTypeof.ts\";\n/** @deprecated use createFlowUnionType instead */\nexport { default as createUnionTypeAnnotation } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createFlowUnionType } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createTSUnionType } from \"./builders/typescript/createTSUnionType.ts\";\nexport * from \"./builders/generated/index.ts\";\nexport * from \"./builders/generated/uppercase.js\";\nexport * from \"./builders/productions.ts\";\n\n// clone\nexport { default as cloneNode } from \"./clone/cloneNode.ts\";\nexport { default as clone } from \"./clone/clone.ts\";\nexport { default as cloneDeep } from \"./clone/cloneDeep.ts\";\nexport { default as cloneDeepWithoutLoc } from \"./clone/cloneDeepWithoutLoc.ts\";\nexport { default as cloneWithoutLoc } from \"./clone/cloneWithoutLoc.ts\";\n\n// comments\nexport { default as addComment } from \"./comments/addComment.ts\";\nexport { default as addComments } from \"./comments/addComments.ts\";\nexport { default as inheritInnerComments } from \"./comments/inheritInnerComments.ts\";\nexport { default as inheritLeadingComments } from \"./comments/inheritLeadingComments.ts\";\nexport { default as inheritsComments } from \"./comments/inheritsComments.ts\";\nexport { default as inheritTrailingComments } from \"./comments/inheritTrailingComments.ts\";\nexport { default as removeComments } from \"./comments/removeComments.ts\";\n\n// constants\nexport * from \"./constants/generated/index.ts\";\nexport * from \"./constants/index.ts\";\n\n// converters\nexport { default as ensureBlock } from \"./converters/ensureBlock.ts\";\nexport { default as toBindingIdentifierName } from \"./converters/toBindingIdentifierName.ts\";\nexport { default as toBlock } from \"./converters/toBlock.ts\";\nexport { default as toComputedKey } from \"./converters/toComputedKey.ts\";\nexport { default as toExpression } from \"./converters/toExpression.ts\";\nexport { default as toIdentifier } from \"./converters/toIdentifier.ts\";\nexport { default as toKeyAlias } from \"./converters/toKeyAlias.ts\";\nexport { default as toStatement } from \"./converters/toStatement.ts\";\nexport { default as valueToNode } from \"./converters/valueToNode.ts\";\n\n// definitions\nexport * from \"./definitions/index.ts\";\n\n// modifications\nexport { default as appendToMemberExpression } from \"./modifications/appendToMemberExpression.ts\";\nexport { default as inherits } from \"./modifications/inherits.ts\";\nexport { default as prependToMemberExpression } from \"./modifications/prependToMemberExpression.ts\";\nexport {\n  default as removeProperties,\n  type Options as RemovePropertiesOptions,\n} from \"./modifications/removeProperties.ts\";\nexport { default as removePropertiesDeep } from \"./modifications/removePropertiesDeep.ts\";\nexport { default as removeTypeDuplicates } from \"./modifications/flow/removeTypeDuplicates.ts\";\n\n// retrievers\nexport { default as getBindingIdentifiers } from \"./retrievers/getBindingIdentifiers.ts\";\nexport { default as getOuterBindingIdentifiers } from \"./retrievers/getOuterBindingIdentifiers.ts\";\n\n// traverse\nexport { default as traverse } from \"./traverse/traverse.ts\";\nexport * from \"./traverse/traverse.ts\";\nexport { default as traverseFast } from \"./traverse/traverseFast.ts\";\n\n// utils\nexport { default as shallowEqual } from \"./utils/shallowEqual.ts\";\n\n// validators\nexport { default as is } from \"./validators/is.ts\";\nexport { default as isBinding } from \"./validators/isBinding.ts\";\nexport { default as isBlockScoped } from \"./validators/isBlockScoped.ts\";\nexport { default as isImmutable } from \"./validators/isImmutable.ts\";\nexport { default as isLet } from \"./validators/isLet.ts\";\nexport { default as isNode } from \"./validators/isNode.ts\";\nexport { default as isNodesEquivalent } from \"./validators/isNodesEquivalent.ts\";\nexport { default as isPlaceholderType } from \"./validators/isPlaceholderType.ts\";\nexport { default as isReferenced } from \"./validators/isReferenced.ts\";\nexport { default as isScope } from \"./validators/isScope.ts\";\nexport { default as isSpecifierDefault } from \"./validators/isSpecifierDefault.ts\";\nexport { default as isType } from \"./validators/isType.ts\";\nexport { default as isValidES3Identifier } from \"./validators/isValidES3Identifier.ts\";\nexport { default as isValidIdentifier } from \"./validators/isValidIdentifier.ts\";\nexport { default as isVar } from \"./validators/isVar.ts\";\nexport { default as matchesPattern } from \"./validators/matchesPattern.ts\";\nexport { default as validate } from \"./validators/validate.ts\";\nexport { default as buildMatchMemberExpression } from \"./validators/buildMatchMemberExpression.ts\";\nexport * from \"./validators/generated/index.ts\";\n\n// react\nexport const react = {\n  isReactComponent,\n  isCompatTag,\n  buildChildren,\n};\n\nexport type * from \"./ast-types/generated/index.ts\";\n\n// this is used by @babel/traverse to warn about deprecated visitors\nexport { default as __internal__deprecationWarning } from \"./utils/deprecationWarning.ts\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.toSequenceExpression =\n    // eslint-disable-next-line no-restricted-globals\n    require(\"./converters/toSequenceExpression.js\").default;\n}\n","import assert from \"assert\";\nimport {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { Scope } from \"@babel/traverse\";\nimport type { File } from \"@babel/core\";\n\n/**\n * A class to track and accumulate mutations to the AST that will eventually\n * output a new require/import statement list.\n */\nexport default class ImportBuilder {\n  private _statements: t.Statement[] = [];\n  private _resultName: t.Identifier | t.MemberExpression = null;\n\n  declare _scope: Scope;\n  declare _hub: File[\"hub\"];\n  private _importedSource: string;\n\n  constructor(importedSource: string, scope: Scope, hub: File[\"hub\"]) {\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName,\n    };\n  }\n\n  import() {\n    this._statements.push(\n      importDeclaration([], stringLiteral(this._importedSource)),\n    );\n    return this;\n  }\n\n  require() {\n    this._statements.push(\n      expressionStatement(\n        callExpression(identifier(\"require\"), [\n          stringLiteral(this._importedSource),\n        ]),\n      ),\n    );\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n  default(name: string) {\n    const id = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importDefaultSpecifier(id)];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n  named(name: string, importName: string) {\n    if (importName === \"default\") return this.default(name);\n\n    const id = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n    assert(statement.type === \"ImportDeclaration\");\n    assert(statement.specifiers.length === 0);\n    statement.specifiers = [importSpecifier(id, identifier(importName))];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  var(name: string) {\n    const id = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n    if (statement.type !== \"ExpressionStatement\") {\n      assert(this._resultName);\n      statement = expressionStatement(this._resultName);\n      this._statements.push(statement);\n    }\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [\n      variableDeclarator(id, statement.expression),\n    ]);\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee: t.Expression) {\n    const statement = this._statements[this._statements.length - 1];\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      assert(statement.declarations.length === 1);\n      statement.declarations[0].init = callExpression(callee, [\n        statement.declarations[0].init,\n      ]);\n    } else {\n      assert.fail(\"Unexpected type.\");\n    }\n    return this;\n  }\n\n  prop(name: string) {\n    const statement = this._statements[this._statements.length - 1];\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(\n        statement.expression,\n        identifier(name),\n      );\n    } else if (statement.type === \"VariableDeclaration\") {\n      assert(statement.declarations.length === 1);\n      statement.declarations[0].init = memberExpression(\n        statement.declarations[0].init,\n        identifier(name),\n      );\n    } else {\n      assert.fail(\"Unexpected type:\" + statement.type);\n    }\n    return this;\n  }\n\n  read(name: string) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n}\n","import type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\n/**\n * A small utility to check if a file qualifies as a module.\n */\nexport default function isModule(path: NodePath<t.Program>) {\n  return path.node.sourceType === \"module\";\n}\n","import assert from \"assert\";\nimport { numericLiteral, sequenceExpression } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Scope } from \"@babel/traverse\";\nimport type { File } from \"@babel/core\";\n\nimport ImportBuilder from \"./import-builder.ts\";\nimport isModule from \"./is-module.ts\";\n\nexport type ImportOptions = {\n  /**\n   * The module being referenced.\n   */\n  importedSource: string | null;\n  /**\n   * The type of module being imported:\n   *\n   *  * 'es6'      - An ES6 module.\n   *  * 'commonjs' - A CommonJS module. (Default)\n   */\n  importedType: \"es6\" | \"commonjs\";\n  /**\n   * The type of interop behavior for namespace/default/named when loading\n   * CommonJS modules.\n   *\n   * ## 'babel' (Default)\n   *\n   * Load using Babel's interop.\n   *\n   * If '.__esModule' is true, treat as 'compiled', else:\n   *\n   * * Namespace: A copy of the module.exports with .default\n   *     populated by the module.exports object.\n   * * Default: The module.exports value.\n   * * Named: The .named property of module.exports.\n   *\n   * The 'ensureLiveReference' has no effect on the liveness of these.\n   *\n   * ## 'compiled'\n   *\n   * Assume the module is ES6 compiled to CommonJS. Useful to avoid injecting\n   * interop logic if you are confident that the module is a certain format.\n   *\n   * * Namespace: The root module.exports object.\n   * * Default: The .default property of the namespace.\n   * * Named: The .named property of the namespace.\n   *\n   * Will return erroneous results if the imported module is _not_ compiled\n   * from ES6 with Babel.\n   *\n   * ## 'uncompiled'\n   *\n   * Assume the module is _not_ ES6 compiled to CommonJS. Used a simplified\n   * access pattern that doesn't require additional function calls.\n   *\n   * Will return erroneous results if the imported module _is_ compiled\n   * from ES6 with Babel.\n   *\n   * * Namespace: The module.exports object.\n   * * Default: The module.exports object.\n   * * Named: The .named property of module.exports.\n   */\n  importedInterop: \"babel\" | \"node\" | \"compiled\" | \"uncompiled\";\n  /**\n   * The type of CommonJS interop included in the environment that will be\n   * loading the output code.\n   *\n   *  * 'babel' - CommonJS modules load with Babel's interop. (Default)\n   *  * 'node'  - CommonJS modules load with Node's interop.\n   *\n   * See descriptions in 'importedInterop' for more details.\n   */\n  importingInterop: \"babel\" | \"node\";\n  /**\n   * Define whether we explicitly care that the import be a live reference.\n   * Only applies when importing default and named imports, not the namespace.\n   *\n   *  * true  - Force imported values to be live references.\n   *  * false - No particular requirements. Keeps the code simplest. (Default)\n   */\n  ensureLiveReference: boolean;\n  /**\n   * Define if we explicitly care that the result not be a property reference.\n   *\n   *  * true  - Force calls to exclude context. Useful if the value is going to\n   *            be used as function callee.\n   *  * false - No particular requirements for context of the access. (Default)\n   */\n  ensureNoContext: boolean;\n  /**\n   * Define whether the import should be loaded before or after the existing imports.\n   * \"after\" is only allowed inside ECMAScript modules, since it's not possible to\n   * reliably pick the location _after_ require() calls but _before_ other code in CJS.\n   */\n  importPosition: \"before\" | \"after\";\n\n  nameHint?: string;\n  blockHoist?: number;\n};\n\n/**\n * A general helper classes add imports via transforms. See README for usage.\n */\nexport default class ImportInjector {\n  /**\n   * The path used for manipulation.\n   */\n  declare _programPath: NodePath<t.Program>;\n\n  /**\n   * The scope used to generate unique variable names.\n   */\n  declare _programScope: Scope;\n\n  /**\n   * The file used to inject helpers and resolve paths.\n   */\n  declare _hub: File[\"hub\"];\n\n  /**\n   * The default options to use with this instance when imports are added.\n   */\n  _defaultOpts: ImportOptions = {\n    importedSource: null,\n    importedType: \"commonjs\",\n    importedInterop: \"babel\",\n    importingInterop: \"babel\",\n    ensureLiveReference: false,\n    ensureNoContext: false,\n    importPosition: \"before\",\n  };\n\n  constructor(\n    path: NodePath,\n    importedSource?: string,\n    opts?: Partial<ImportOptions>,\n  ) {\n    const programPath = path.find(p => p.isProgram()) as NodePath<t.Program>;\n\n    this._programPath = programPath;\n    this._programScope = programPath.scope;\n    this._hub = programPath.hub as File[\"hub\"];\n\n    this._defaultOpts = this._applyDefaults(importedSource, opts, true);\n  }\n\n  addDefault(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this.addNamed(\"default\", importedSourceIn, opts);\n  }\n\n  addNamed(\n    importName: string,\n    importedSourceIn: string,\n    opts: Partial<ImportOptions>,\n  ) {\n    assert(typeof importName === \"string\");\n\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      importName,\n    );\n  }\n\n  addNamespace(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      null,\n    );\n  }\n\n  addSideEffect(importedSourceIn: string, opts: Partial<ImportOptions>) {\n    return this._generateImport(\n      this._applyDefaults(importedSourceIn, opts),\n      void 0,\n    );\n  }\n\n  _applyDefaults(\n    importedSource: string | Partial<ImportOptions>,\n    opts: Partial<ImportOptions> | undefined,\n    isInit = false,\n  ) {\n    let newOpts: ImportOptions;\n    if (typeof importedSource === \"string\") {\n      newOpts = { ...this._defaultOpts, importedSource, ...opts };\n    } else {\n      assert(!opts, \"Unexpected secondary arguments.\");\n      newOpts = { ...this._defaultOpts, ...importedSource };\n    }\n\n    if (!isInit && opts) {\n      if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;\n      if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;\n    }\n    return newOpts;\n  }\n\n  _generateImport(\n    opts: Partial<ImportOptions>,\n    importName: string | null | undefined,\n  ) {\n    const isDefault = importName === \"default\";\n    const isNamed = !!importName && !isDefault;\n    const isNamespace = importName === null;\n\n    const {\n      importedSource,\n      importedType,\n      importedInterop,\n      importingInterop,\n      ensureLiveReference,\n      ensureNoContext,\n      nameHint,\n      importPosition,\n\n      // Not meant for public usage. Allows code that absolutely must control\n      // ordering to set a specific hoist value on the import nodes.\n      // This is ignored when \"importPosition\" is \"after\".\n      blockHoist,\n    } = opts;\n\n    // Provide a hint for generateUidIdentifier for the local variable name\n    // to use for the import, if the code will generate a simple assignment\n    // to a variable.\n    let name = nameHint || importName;\n\n    const isMod = isModule(this._programPath);\n    const isModuleForNode = isMod && importingInterop === \"node\";\n    const isModuleForBabel = isMod && importingInterop === \"babel\";\n\n    if (importPosition === \"after\" && !isMod) {\n      throw new Error(`\"importPosition\": \"after\" is only supported in modules`);\n    }\n\n    const builder = new ImportBuilder(\n      importedSource,\n      this._programScope,\n      this._hub,\n    );\n\n    if (importedType === \"es6\") {\n      if (!isModuleForNode && !isModuleForBabel) {\n        throw new Error(\"Cannot import an ES6 module from CommonJS\");\n      }\n\n      // import * as namespace from ''; namespace\n      // import def from ''; def\n      // import { named } from ''; named\n      builder.import();\n      if (isNamespace) {\n        builder.namespace(nameHint || importedSource);\n      } else if (isDefault || isNamed) {\n        builder.named(name, importName);\n      }\n    } else if (importedType !== \"commonjs\") {\n      throw new Error(`Unexpected interopType \"${importedType}\"`);\n    } else if (importedInterop === \"babel\") {\n      if (isModuleForNode) {\n        // import _tmp from ''; var namespace = interopRequireWildcard(_tmp); namespace\n        // import _tmp from ''; var def = interopRequireDefault(_tmp).default; def\n        // import _tmp from ''; _tmp.named\n        name = name !== \"default\" ? name : importedSource;\n        const es6Default = `${importedSource}$es6Default`;\n\n        builder.import();\n        if (isNamespace) {\n          builder\n            .default(es6Default)\n            .var(name || importedSource)\n            .wildcardInterop();\n        } else if (isDefault) {\n          if (ensureLiveReference) {\n            builder\n              .default(es6Default)\n              .var(name || importedSource)\n              .defaultInterop()\n              .read(\"default\");\n          } else {\n            builder\n              .default(es6Default)\n              .var(name)\n              .defaultInterop()\n              .prop(importName);\n          }\n        } else if (isNamed) {\n          builder.default(es6Default).read(importName);\n        }\n      } else if (isModuleForBabel) {\n        // import * as namespace from ''; namespace\n        // import def from ''; def\n        // import { named } from ''; named\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = interopRequireWildcard(require(''));\n        // var def = interopRequireDefault(require('')).default; def\n        // var named = require('').named; named\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource).wildcardInterop();\n        } else if ((isDefault || isNamed) && ensureLiveReference) {\n          if (isDefault) {\n            name = name !== \"default\" ? name : importedSource;\n            builder.var(name).read(importName);\n            builder.defaultInterop();\n          } else {\n            builder.var(importedSource).read(importName);\n          }\n        } else if (isDefault) {\n          builder.var(name).defaultInterop().prop(importName);\n        } else if (isNamed) {\n          builder.var(name).prop(importName);\n        }\n      }\n    } else if (importedInterop === \"compiled\") {\n      if (isModuleForNode) {\n        // import namespace from ''; namespace\n        // import namespace from ''; namespace.default\n        // import namespace from ''; namespace.named\n\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        // import * as namespace from ''; namespace\n        // import def from ''; def\n        // import { named } from ''; named\n        // Note: These lookups will break if the module has no __esModule set,\n        // hence the warning that 'compiled' will not work on standard CommonJS.\n\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = require(''); namespace\n        // var namespace = require(''); namespace.default\n        // var namespace = require(''); namespace.named\n        // var named = require('').named;\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault || isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.prop(importName).var(name);\n          }\n        }\n      }\n    } else if (importedInterop === \"uncompiled\") {\n      if (isDefault && ensureLiveReference) {\n        throw new Error(\"No live reference for commonjs default\");\n      }\n\n      if (isModuleForNode) {\n        // import namespace from ''; namespace\n        // import def from ''; def;\n        // import namespace from ''; namespace.named\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        // import namespace from '';\n        // import def from '';\n        // import { named } from ''; named;\n        // Note: These lookups will break if the module has __esModule set,\n        // hence the warning that 'uncompiled' will not work on ES6 transpiled\n        // to CommonJS.\n\n        builder.import();\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        // var namespace = require(''); namespace\n        // var def = require(''); def\n        // var namespace = require(''); namespace.named\n        // var named = require('').named;\n        builder.require();\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault) {\n          builder.var(name);\n        } else if (isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.var(name).prop(importName);\n          }\n        }\n      }\n    } else {\n      throw new Error(`Unknown importedInterop \"${importedInterop}\".`);\n    }\n\n    const { statements, resultName } = builder.done();\n\n    this._insertStatements(statements, importPosition, blockHoist);\n\n    if (\n      (isDefault || isNamed) &&\n      ensureNoContext &&\n      resultName.type !== \"Identifier\"\n    ) {\n      return sequenceExpression([numericLiteral(0), resultName]);\n    }\n    return resultName;\n  }\n\n  _insertStatements(\n    statements: t.Statement[],\n    importPosition = \"before\",\n    blockHoist = 3,\n  ) {\n    const body = this._programPath.get(\"body\");\n\n    if (importPosition === \"after\") {\n      for (let i = body.length - 1; i >= 0; i--) {\n        if (body[i].isImportDeclaration()) {\n          body[i].insertAfter(statements);\n          return;\n        }\n      }\n    } else {\n      statements.forEach(node => {\n        // @ts-expect-error handle _blockHoist\n        node._blockHoist = blockHoist;\n      });\n\n      const targetPath = body.find(p => {\n        // @ts-expect-error todo(flow->ts): avoid mutations\n        const val = p.node._blockHoist;\n        return Number.isFinite(val) && val < 4;\n      });\n\n      if (targetPath) {\n        targetPath.insertBefore(statements);\n        return;\n      }\n    }\n\n    this._programPath.unshiftContainer(\"body\", statements);\n  }\n}\n","import ImportInjector, { type ImportOptions } from \"./import-injector.ts\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport { ImportInjector };\n\nexport { default as isModule } from \"./is-module.ts\";\n\nexport function addDefault(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addDefault(importedSource, opts);\n}\n\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<\n    Partial<ImportOptions>,\n    \"ensureLiveReference\" | \"ensureNoContext\"\n  >,\n): t.Identifier;\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<Partial<ImportOptions>, \"ensureLiveReference\"> & {\n    ensureLiveReference: true;\n  },\n): t.MemberExpression;\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Omit<Partial<ImportOptions>, \"ensureNoContext\"> & {\n    ensureNoContext: true;\n  },\n): t.SequenceExpression;\n/**\n * add a named import to the program path of given path\n *\n * @export\n * @param {NodePath} path The starting path to find a program path\n * @param {string} name The name of the generated binding. Babel will prefix it with `_`\n * @param {string} importedSource The source of the import\n * @param {Partial<ImportOptions>} [opts]\n * @returns {t.Identifier | t.MemberExpression | t.SequenceExpression} If opts.ensureNoContext is true, returns a SequenceExpression,\n *   else if opts.ensureLiveReference is true, returns a MemberExpression, else returns an Identifier\n */\nfunction addNamed(\n  path: NodePath,\n  name: string,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addNamed(name, importedSource, opts);\n}\nexport { addNamed };\n\nexport function addNamespace(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addNamespace(importedSource, opts);\n}\n\nexport function addSideEffect(\n  path: NodePath,\n  importedSource: string,\n  opts?: Partial<ImportOptions>,\n) {\n  return new ImportInjector(path).addSideEffect(importedSource, opts);\n}\n","import { addComment, type Node } from \"@babel/types\";\nimport type { NodePath } from \"@babel/traverse\";\n\nconst PURE_ANNOTATION = \"#__PURE__\";\n\nconst isPureAnnotated = ({ leadingComments }: Node): boolean =>\n  !!leadingComments &&\n  leadingComments.some(comment => /[@#]__PURE__/.test(comment.value));\n\nexport default function annotateAsPure(pathOrNode: Node | NodePath): void {\n  const node =\n    // @ts-expect-error Node will not have `node` property\n    (pathOrNode[\"node\"] || pathOrNode) as Node;\n  if (isPureAnnotated(node)) {\n    return;\n  }\n  addComment(node, \"leading\", PURE_ANNOTATION);\n}\n","import jsx from \"@babel/plugin-syntax-jsx\";\nimport { declare } from \"@babel/helper-plugin-utils\";\nimport { template, types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\nimport { addNamed, addNamespace, isModule } from \"@babel/helper-module-imports\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport type {\n  CallExpression,\n  Class,\n  Expression,\n  Identifier,\n  JSXAttribute,\n  JSXElement,\n  JSXFragment,\n  JSXOpeningElement,\n  JSXSpreadAttribute,\n  MemberExpression,\n  ObjectExpression,\n  Program,\n} from \"@babel/types\";\n\nconst DEFAULT = {\n  importSource: \"react\",\n  runtime: \"automatic\",\n  pragma: \"React.createElement\",\n  pragmaFrag: \"React.Fragment\",\n};\n\nconst JSX_SOURCE_ANNOTATION_REGEX =\n  /^\\s*\\*?\\s*@jsxImportSource\\s+([^\\s]+)\\s*$/m;\nconst JSX_RUNTIME_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxRuntime\\s+([^\\s]+)\\s*$/m;\n\nconst JSX_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsx\\s+([^\\s]+)\\s*$/m;\nconst JSX_FRAG_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxFrag\\s+([^\\s]+)\\s*$/m;\n\nconst get = (pass: PluginPass, name: string) =>\n  pass.get(`@babel/plugin-react-jsx/${name}`);\nconst set = (pass: PluginPass, name: string, v: any) =>\n  pass.set(`@babel/plugin-react-jsx/${name}`, v);\n\nfunction hasProto(node: t.ObjectExpression) {\n  return node.properties.some(\n    value =>\n      t.isObjectProperty(value, { computed: false, shorthand: false }) &&\n      (t.isIdentifier(value.key, { name: \"__proto__\" }) ||\n        t.isStringLiteral(value.key, { value: \"__proto__\" })),\n  );\n}\n\nexport interface Options {\n  filter?: (node: t.Node, pass: PluginPass) => boolean;\n  importSource?: string;\n  pragma?: string;\n  pragmaFrag?: string;\n  pure?: string;\n  runtime?: \"automatic\" | \"classic\";\n  throwIfNamespace?: boolean;\n  useBuiltIns: boolean;\n  useSpread?: boolean;\n}\nexport default function createPlugin({\n  name,\n  development,\n}: {\n  name: string;\n  development: boolean;\n}) {\n  return declare((_, options: Options) => {\n    const {\n      pure: PURE_ANNOTATION,\n\n      throwIfNamespace = true,\n\n      filter,\n\n      runtime: RUNTIME_DEFAULT = process.env.BABEL_8_BREAKING\n        ? \"automatic\"\n        : development\n          ? \"automatic\"\n          : \"classic\",\n\n      importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource,\n      pragma: PRAGMA_DEFAULT = DEFAULT.pragma,\n      pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag,\n    } = options;\n\n    if (process.env.BABEL_8_BREAKING) {\n      if (\"useSpread\" in options) {\n        throw new Error(\n          '@babel/plugin-transform-react-jsx: Since Babel 8, an inline object with spread elements is always used, and the \"useSpread\" option is no longer available. Please remove it from your config.',\n        );\n      }\n\n      if (\"useBuiltIns\" in options) {\n        const useBuiltInsFormatted = JSON.stringify(options.useBuiltIns);\n        throw new Error(\n          `@babel/plugin-transform-react-jsx: Since \"useBuiltIns\" is removed in Babel 8, you can remove it from the config.\n- Babel 8 now transforms JSX spread to object spread. If you need to transpile object spread with\n\\`useBuiltIns: ${useBuiltInsFormatted}\\`, you can use the following config\n{\n  \"plugins\": [\n    \"@babel/plugin-transform-react-jsx\"\n    [\"@babel/plugin-transform-object-rest-spread\", { \"loose\": true, \"useBuiltIns\": ${useBuiltInsFormatted} }]\n  ]\n}`,\n        );\n      }\n\n      if (filter != null && RUNTIME_DEFAULT === \"automatic\") {\n        throw new Error(\n          '@babel/plugin-transform-react-jsx: \"filter\" option can not be used with automatic runtime. If you are upgrading from Babel 7, please specify `runtime: \"classic\"`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-var\n      var { useSpread = false, useBuiltIns = false } = options;\n\n      if (RUNTIME_DEFAULT === \"classic\") {\n        if (typeof useSpread !== \"boolean\") {\n          throw new Error(\n            \"transform-react-jsx currently only accepts a boolean option for \" +\n              \"useSpread (defaults to false)\",\n          );\n        }\n\n        if (typeof useBuiltIns !== \"boolean\") {\n          throw new Error(\n            \"transform-react-jsx currently only accepts a boolean option for \" +\n              \"useBuiltIns (defaults to false)\",\n          );\n        }\n\n        if (useSpread && useBuiltIns) {\n          throw new Error(\n            \"transform-react-jsx currently only accepts useBuiltIns or useSpread \" +\n              \"but not both\",\n          );\n        }\n      }\n    }\n\n    const injectMetaPropertiesVisitor: Visitor<PluginPass> = {\n      JSXOpeningElement(path, state) {\n        const attributes = [];\n        if (isThisAllowed(path.scope)) {\n          attributes.push(\n            t.jsxAttribute(\n              t.jsxIdentifier(\"__self\"),\n              t.jsxExpressionContainer(t.thisExpression()),\n            ),\n          );\n        }\n        attributes.push(\n          t.jsxAttribute(\n            t.jsxIdentifier(\"__source\"),\n            t.jsxExpressionContainer(makeSource(path, state)),\n          ),\n        );\n        path.pushContainer(\"attributes\", attributes);\n      },\n    };\n\n    return {\n      name,\n      inherits: jsx,\n      visitor: {\n        JSXNamespacedName(path) {\n          if (throwIfNamespace) {\n            throw path.buildCodeFrameError(\n              `Namespace tags are not supported by default. React's JSX doesn't support namespace tags. \\\nYou can set \\`throwIfNamespace: false\\` to bypass this warning.`,\n            );\n          }\n        },\n\n        JSXSpreadChild(path) {\n          throw path.buildCodeFrameError(\n            \"Spread children are not supported in React.\",\n          );\n        },\n\n        Program: {\n          enter(path, state) {\n            const { file } = state;\n            let runtime: string = RUNTIME_DEFAULT;\n\n            let source: string = IMPORT_SOURCE_DEFAULT;\n            let pragma: string = PRAGMA_DEFAULT;\n            let pragmaFrag: string = PRAGMA_FRAG_DEFAULT;\n\n            let sourceSet = !!options.importSource;\n            let pragmaSet = !!options.pragma;\n            let pragmaFragSet = !!options.pragmaFrag;\n\n            if (file.ast.comments) {\n              for (const comment of file.ast.comments) {\n                const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (sourceMatches) {\n                  source = sourceMatches[1];\n                  sourceSet = true;\n                }\n\n                const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (runtimeMatches) {\n                  runtime = runtimeMatches[1];\n                }\n\n                const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);\n                if (jsxMatches) {\n                  pragma = jsxMatches[1];\n                  pragmaSet = true;\n                }\n                const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (jsxFragMatches) {\n                  pragmaFrag = jsxFragMatches[1];\n                  pragmaFragSet = true;\n                }\n              }\n            }\n\n            set(state, \"runtime\", runtime);\n            if (runtime === \"classic\") {\n              if (sourceSet) {\n                throw path.buildCodeFrameError(\n                  `importSource cannot be set when runtime is classic.`,\n                );\n              }\n\n              const createElement = toMemberExpression(pragma);\n              const fragment = toMemberExpression(pragmaFrag);\n\n              set(state, \"id/createElement\", () => t.cloneNode(createElement));\n              set(state, \"id/fragment\", () => t.cloneNode(fragment));\n\n              set(state, \"defaultPure\", pragma === DEFAULT.pragma);\n            } else if (runtime === \"automatic\") {\n              if (pragmaSet || pragmaFragSet) {\n                throw path.buildCodeFrameError(\n                  `pragma and pragmaFrag cannot be set when runtime is automatic.`,\n                );\n              }\n\n              const define = (name: string, id: string) =>\n                set(state, name, createImportLazily(state, path, id, source));\n\n              define(\"id/jsx\", development ? \"jsxDEV\" : \"jsx\");\n              define(\"id/jsxs\", development ? \"jsxDEV\" : \"jsxs\");\n              define(\"id/createElement\", \"createElement\");\n              define(\"id/fragment\", \"Fragment\");\n\n              set(state, \"defaultPure\", source === DEFAULT.importSource);\n            } else {\n              throw path.buildCodeFrameError(\n                `Runtime must be either \"classic\" or \"automatic\".`,\n              );\n            }\n\n            if (development) {\n              path.traverse(injectMetaPropertiesVisitor, state);\n            }\n          },\n\n          // TODO(Babel 8): Decide if this should be removed or brought back.\n          // see: https://github.com/babel/babel/pull/12253#discussion_r513086528\n          //\n          // exit(path, state) {\n          //   if (\n          //     get(state, \"runtime\") === \"classic\" &&\n          //     get(state, \"pragmaSet\") &&\n          //     get(state, \"usedFragment\") &&\n          //     !get(state, \"pragmaFragSet\")\n          //   ) {\n          //     throw new Error(\n          //       \"transform-react-jsx: pragma has been set but \" +\n          //         \"pragmaFrag has not been set\",\n          //     );\n          //   }\n          // },\n        },\n\n        JSXFragment: {\n          exit(path, file) {\n            let callExpr;\n            if (get(file, \"runtime\") === \"classic\") {\n              callExpr = buildCreateElementFragmentCall(path, file);\n            } else {\n              callExpr = buildJSXFragmentCall(path, file);\n            }\n\n            path.replaceWith(t.inherits(callExpr, path.node));\n          },\n        },\n\n        JSXElement: {\n          exit(path, file) {\n            let callExpr;\n            if (\n              get(file, \"runtime\") === \"classic\" ||\n              shouldUseCreateElement(path)\n            ) {\n              callExpr = buildCreateElementCall(path, file);\n            } else {\n              callExpr = buildJSXElementCall(path, file);\n            }\n\n            path.replaceWith(t.inherits(callExpr, path.node));\n          },\n        },\n\n        JSXAttribute(path) {\n          if (t.isJSXElement(path.node.value)) {\n            path.node.value = t.jsxExpressionContainer(path.node.value);\n          }\n        },\n      },\n    };\n\n    // Returns whether the class has specified a superclass.\n    function isDerivedClass(classPath: NodePath<Class>) {\n      return classPath.node.superClass !== null;\n    }\n\n    // Returns whether `this` is allowed at given scope.\n    function isThisAllowed(scope: Scope) {\n      // This specifically skips arrow functions as they do not rewrite `this`.\n      do {\n        const { path } = scope;\n        if (path.isFunctionParent() && !path.isArrowFunctionExpression()) {\n          if (!path.isMethod()) {\n            // If the closest parent is a regular function, `this` will be rebound, therefore it is fine to use `this`.\n            return true;\n          }\n          // Current node is within a method, so we need to check if the method is a constructor.\n          if (path.node.kind !== \"constructor\") {\n            // We are not in a constructor, therefore it is always fine to use `this`.\n            return true;\n          }\n          // Now we are in a constructor. If it is a derived class, we do not reference `this`.\n          return !isDerivedClass(path.parentPath.parentPath as NodePath<Class>);\n        }\n        if (path.isTSModuleBlock()) {\n          // If the closest parent is a TS Module block, `this` will not be allowed.\n          return false;\n        }\n      } while ((scope = scope.parent));\n      // We are not in a method or function. It is fine to use `this`.\n      return true;\n    }\n\n    function call(\n      pass: PluginPass,\n      name: string,\n      args: CallExpression[\"arguments\"],\n    ) {\n      const node = t.callExpression(get(pass, `id/${name}`)(), args);\n      if (PURE_ANNOTATION ?? get(pass, \"defaultPure\")) annotateAsPure(node);\n      return node;\n    }\n\n    // We want to use React.createElement, even in the case of\n    // jsx, for <div {...props} key={key} /> to distinguish it\n    // from <div key={key} {...props} />. This is an intermediary\n    // step while we deprecate key spread from props. Afterwards,\n    // we will stop using createElement in the transform.\n    function shouldUseCreateElement(path: NodePath<JSXElement>) {\n      const openingPath = path.get(\"openingElement\");\n      const attributes = openingPath.node.attributes;\n\n      let seenPropsSpread = false;\n      for (let i = 0; i < attributes.length; i++) {\n        const attr = attributes[i];\n        if (\n          seenPropsSpread &&\n          t.isJSXAttribute(attr) &&\n          attr.name.name === \"key\"\n        ) {\n          return true;\n        } else if (t.isJSXSpreadAttribute(attr)) {\n          seenPropsSpread = true;\n        }\n      }\n      return false;\n    }\n\n    function convertJSXIdentifier(\n      node: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n      parent: t.JSXOpeningElement | t.JSXMemberExpression,\n    ): t.ThisExpression | t.StringLiteral | t.MemberExpression | t.Identifier {\n      if (t.isJSXIdentifier(node)) {\n        if (node.name === \"this\" && t.isReferenced(node, parent)) {\n          return t.thisExpression();\n        } else if (t.isValidIdentifier(node.name, false)) {\n          // @ts-expect-error cast AST type to Identifier\n          node.type = \"Identifier\";\n          return node as unknown as t.Identifier;\n        } else {\n          return t.stringLiteral(node.name);\n        }\n      } else if (t.isJSXMemberExpression(node)) {\n        return t.memberExpression(\n          convertJSXIdentifier(node.object, node),\n          convertJSXIdentifier(node.property, node),\n        );\n      } else if (t.isJSXNamespacedName(node)) {\n        /**\n         * If the flag \"throwIfNamespace\" is false\n         * print XMLNamespace like string literal\n         */\n        return t.stringLiteral(`${node.namespace.name}:${node.name.name}`);\n      }\n\n      // todo: this branch should be unreachable\n      return node;\n    }\n\n    function convertAttributeValue(\n      node: t.JSXAttribute[\"value\"] | t.BooleanLiteral,\n    ) {\n      if (t.isJSXExpressionContainer(node)) {\n        return node.expression;\n      } else {\n        return node;\n      }\n    }\n\n    function accumulateAttribute(\n      array: ObjectExpression[\"properties\"],\n      attribute: NodePath<JSXAttribute | JSXSpreadAttribute>,\n    ) {\n      if (t.isJSXSpreadAttribute(attribute.node)) {\n        const arg = attribute.node.argument;\n        // Collect properties into props array if spreading object expression\n        if (t.isObjectExpression(arg) && !hasProto(arg)) {\n          array.push(...arg.properties);\n        } else {\n          array.push(t.spreadElement(arg));\n        }\n        return array;\n      }\n\n      const value = convertAttributeValue(\n        attribute.node.name.name !== \"key\"\n          ? attribute.node.value || t.booleanLiteral(true)\n          : attribute.node.value,\n      );\n\n      if (attribute.node.name.name === \"key\" && value === null) {\n        throw attribute.buildCodeFrameError(\n          'Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.',\n        );\n      }\n\n      if (\n        t.isStringLiteral(value) &&\n        !t.isJSXExpressionContainer(attribute.node.value)\n      ) {\n        value.value = value.value.replace(/\\n\\s+/g, \" \");\n\n        // \"raw\" JSXText should not be used from a StringLiteral because it needs to be escaped.\n        delete value.extra?.raw;\n      }\n\n      if (t.isJSXNamespacedName(attribute.node.name)) {\n        // @ts-expect-error mutating AST\n        attribute.node.name = t.stringLiteral(\n          attribute.node.name.namespace.name +\n            \":\" +\n            attribute.node.name.name.name,\n        );\n      } else if (t.isValidIdentifier(attribute.node.name.name, false)) {\n        // @ts-expect-error mutating AST\n        attribute.node.name.type = \"Identifier\";\n      } else {\n        // @ts-expect-error mutating AST\n        attribute.node.name = t.stringLiteral(attribute.node.name.name);\n      }\n\n      array.push(\n        t.inherits(\n          t.objectProperty(\n            // @ts-expect-error The attribute.node.name is an Identifier now\n            attribute.node.name,\n            value,\n          ),\n          attribute.node,\n        ),\n      );\n      return array;\n    }\n\n    function buildChildrenProperty(children: Expression[]) {\n      let childrenNode;\n      if (children.length === 1) {\n        childrenNode = children[0];\n      } else if (children.length > 1) {\n        childrenNode = t.arrayExpression(children);\n      } else {\n        return undefined;\n      }\n\n      return t.objectProperty(t.identifier(\"children\"), childrenNode);\n    }\n\n    // Builds JSX into:\n    // Production: React.jsx(type, arguments, key)\n    // Development: React.jsxDEV(type, arguments, key, isStaticChildren, source, self)\n    function buildJSXElementCall(path: NodePath<JSXElement>, file: PluginPass) {\n      const openingPath = path.get(\"openingElement\");\n      const args: t.Expression[] = [getTag(openingPath)];\n\n      const attribsArray = [];\n      const extracted = Object.create(null);\n\n      // for React.jsx, key, __source (dev), and __self (dev) is passed in as\n      // a separate argument rather than in the args object. We go through the\n      // props and filter out these three keywords so we can pass them in\n      // as separate arguments later\n      for (const attr of openingPath.get(\"attributes\")) {\n        if (attr.isJSXAttribute() && t.isJSXIdentifier(attr.node.name)) {\n          const { name } = attr.node.name;\n          switch (name) {\n            case \"__source\":\n            case \"__self\":\n              if (extracted[name]) throw sourceSelfError(path, name);\n            /* falls through */\n            case \"key\": {\n              const keyValue = convertAttributeValue(attr.node.value);\n              if (keyValue === null) {\n                throw attr.buildCodeFrameError(\n                  'Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.',\n                );\n              }\n\n              extracted[name] = keyValue;\n              break;\n            }\n            default:\n              attribsArray.push(attr);\n          }\n        } else {\n          attribsArray.push(attr);\n        }\n      }\n\n      const children = t.react.buildChildren(path.node);\n\n      let attribs: t.ObjectExpression;\n\n      if (attribsArray.length || children.length) {\n        attribs = buildJSXOpeningElementAttributes(\n          attribsArray,\n          //@ts-expect-error The children here contains JSXSpreadChild,\n          // which will be thrown later\n          children,\n        );\n      } else {\n        // attributes should never be null\n        attribs = t.objectExpression([]);\n      }\n\n      args.push(attribs);\n\n      if (development) {\n        // isStaticChildren, __source, and __self are only used in development\n        // automatically include __source and __self in this plugin\n        // so we can eliminate the need for separate Babel plugins in Babel 8\n        args.push(\n          extracted.key ?? path.scope.buildUndefinedNode(),\n          t.booleanLiteral(children.length > 1),\n        );\n        if (extracted.__source) {\n          args.push(extracted.__source);\n          if (extracted.__self) args.push(extracted.__self);\n        } else if (extracted.__self) {\n          args.push(path.scope.buildUndefinedNode(), extracted.__self);\n        }\n      } else if (extracted.key !== undefined) {\n        args.push(extracted.key);\n      }\n\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n\n    // Builds props for React.jsx. This function adds children into the props\n    // and ensures that props is always an object\n    function buildJSXOpeningElementAttributes(\n      attribs: NodePath<JSXAttribute | JSXSpreadAttribute>[],\n      children: Expression[],\n    ) {\n      const props = attribs.reduce(accumulateAttribute, []);\n\n      // In React.jsx, children is no longer a separate argument, but passed in\n      // through the argument object\n      if (children?.length > 0) {\n        props.push(buildChildrenProperty(children));\n      }\n\n      return t.objectExpression(props);\n    }\n\n    // Builds JSX Fragment <></> into\n    // Production: React.jsx(type, arguments)\n    // Development: React.jsxDEV(type, { children })\n    function buildJSXFragmentCall(\n      path: NodePath<JSXFragment>,\n      file: PluginPass,\n    ) {\n      const args = [get(file, \"id/fragment\")()];\n\n      const children = t.react.buildChildren(path.node);\n\n      args.push(\n        t.objectExpression(\n          children.length > 0\n            ? [\n                buildChildrenProperty(\n                  //@ts-expect-error The children here contains JSXSpreadChild,\n                  // which will be thrown later\n                  children,\n                ),\n              ]\n            : [],\n        ),\n      );\n\n      if (development) {\n        args.push(\n          path.scope.buildUndefinedNode(),\n          t.booleanLiteral(children.length > 1),\n        );\n      }\n\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n\n    // Builds JSX Fragment <></> into\n    // React.createElement(React.Fragment, null, ...children)\n    function buildCreateElementFragmentCall(\n      path: NodePath<JSXFragment>,\n      file: PluginPass,\n    ) {\n      if (filter && !filter(path.node, file)) return;\n\n      return call(file, \"createElement\", [\n        get(file, \"id/fragment\")(),\n        t.nullLiteral(),\n        ...t.react.buildChildren(path.node),\n      ]);\n    }\n\n    // Builds JSX into:\n    // Production: React.createElement(type, arguments, children)\n    // Development: React.createElement(type, arguments, children, source, self)\n    function buildCreateElementCall(\n      path: NodePath<JSXElement>,\n      file: PluginPass,\n    ) {\n      const openingPath = path.get(\"openingElement\");\n\n      return call(file, \"createElement\", [\n        getTag(openingPath),\n        buildCreateElementOpeningElementAttributes(\n          file,\n          path,\n          openingPath.get(\"attributes\"),\n        ),\n        // @ts-expect-error JSXSpreadChild has been transformed in convertAttributeValue\n        ...t.react.buildChildren(path.node),\n      ]);\n    }\n\n    function getTag(openingPath: NodePath<JSXOpeningElement>) {\n      const tagExpr = convertJSXIdentifier(\n        openingPath.node.name,\n        openingPath.node,\n      );\n\n      let tagName: string;\n      if (t.isIdentifier(tagExpr)) {\n        tagName = tagExpr.name;\n      } else if (t.isStringLiteral(tagExpr)) {\n        tagName = tagExpr.value;\n      }\n\n      if (t.react.isCompatTag(tagName)) {\n        return t.stringLiteral(tagName);\n      } else {\n        return tagExpr;\n      }\n    }\n\n    /**\n     * The logic for this is quite terse. It's because we need to\n     * support spread elements. We loop over all attributes,\n     * breaking on spreads, we then push a new object containing\n     * all prior attributes to an array for later processing.\n     */\n    function buildCreateElementOpeningElementAttributes(\n      file: PluginPass,\n      path: NodePath<JSXElement>,\n      attribs: NodePath<JSXAttribute | JSXSpreadAttribute>[],\n    ) {\n      const runtime = get(file, \"runtime\");\n      if (!process.env.BABEL_8_BREAKING) {\n        if (runtime !== \"automatic\") {\n          const objs = [];\n          const props = attribs.reduce(accumulateAttribute, []);\n\n          if (!useSpread) {\n            // Convert syntax to use multiple objects instead of spread\n            let start = 0;\n            props.forEach((prop, i) => {\n              if (t.isSpreadElement(prop)) {\n                if (i > start) {\n                  objs.push(t.objectExpression(props.slice(start, i)));\n                }\n                objs.push(prop.argument);\n                start = i + 1;\n              }\n            });\n            if (props.length > start) {\n              objs.push(t.objectExpression(props.slice(start)));\n            }\n          } else if (props.length) {\n            objs.push(t.objectExpression(props));\n          }\n\n          if (!objs.length) {\n            return t.nullLiteral();\n          }\n\n          if (objs.length === 1) {\n            if (\n              !(\n                t.isSpreadElement(props[0]) &&\n                // If an object expression is spread element's argument\n                // it is very likely to contain __proto__ and we should stop\n                // optimizing spread element\n                t.isObjectExpression(props[0].argument)\n              )\n            ) {\n              return objs[0];\n            }\n          }\n\n          // looks like we have multiple objects\n          if (!t.isObjectExpression(objs[0])) {\n            objs.unshift(t.objectExpression([]));\n          }\n\n          const helper = useBuiltIns\n            ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n            : file.addHelper(\"extends\");\n\n          // spread it\n          return t.callExpression(helper, objs);\n        }\n      }\n\n      const props: ObjectExpression[\"properties\"] = [];\n      const found = Object.create(null);\n\n      for (const attr of attribs) {\n        const { node } = attr;\n        const name =\n          t.isJSXAttribute(node) &&\n          t.isJSXIdentifier(node.name) &&\n          node.name.name;\n\n        if (\n          runtime === \"automatic\" &&\n          (name === \"__source\" || name === \"__self\")\n        ) {\n          if (found[name]) throw sourceSelfError(path, name);\n          found[name] = true;\n        }\n\n        accumulateAttribute(props, attr);\n      }\n\n      return props.length === 1 &&\n        t.isSpreadElement(props[0]) &&\n        // If an object expression is spread element's argument\n        // it is very likely to contain __proto__ and we should stop\n        // optimizing spread element\n        !t.isObjectExpression(props[0].argument)\n        ? props[0].argument\n        : props.length > 0\n          ? t.objectExpression(props)\n          : t.nullLiteral();\n    }\n  });\n\n  function getSource(source: string, importName: string) {\n    switch (importName) {\n      case \"Fragment\":\n        return `${source}/${development ? \"jsx-dev-runtime\" : \"jsx-runtime\"}`;\n      case \"jsxDEV\":\n        return `${source}/jsx-dev-runtime`;\n      case \"jsx\":\n      case \"jsxs\":\n        return `${source}/jsx-runtime`;\n      case \"createElement\":\n        return source;\n    }\n  }\n\n  function createImportLazily(\n    pass: PluginPass,\n    path: NodePath<Program>,\n    importName: string,\n    source: string,\n  ): () => Identifier | MemberExpression {\n    return () => {\n      const actualSource = getSource(source, importName);\n      if (isModule(path)) {\n        let reference = get(pass, `imports/${importName}`);\n        if (reference) return t.cloneNode(reference);\n\n        reference = addNamed(path, importName, actualSource, {\n          importedInterop: \"uncompiled\",\n          importPosition: \"after\",\n        });\n        set(pass, `imports/${importName}`, reference);\n\n        return reference;\n      } else {\n        let reference = get(pass, `requires/${actualSource}`);\n        if (reference) {\n          reference = t.cloneNode(reference);\n        } else {\n          reference = addNamespace(path, actualSource, {\n            importedInterop: \"uncompiled\",\n          });\n          set(pass, `requires/${actualSource}`, reference);\n        }\n\n        return t.memberExpression(reference, t.identifier(importName));\n      }\n    };\n  }\n}\n\nfunction toMemberExpression(id: string): Identifier | MemberExpression {\n  return (\n    id\n      .split(\".\")\n      .map(name => t.identifier(name))\n      // @ts-expect-error - The Array#reduce does not have a signature\n      // where the type of initial value differs from callback return type\n      .reduce((object, property) => t.memberExpression(object, property))\n  );\n}\n\nfunction makeSource(path: NodePath, state: PluginPass) {\n  const location = path.node.loc;\n  if (!location) {\n    // the element was generated and doesn't have location information\n    return path.scope.buildUndefinedNode();\n  }\n\n  // @ts-expect-error todo: avoid mutating PluginPass\n  if (!state.fileNameIdentifier) {\n    const { filename = \"\" } = state;\n\n    const fileNameIdentifier = path.scope.generateUidIdentifier(\"_jsxFileName\");\n    path.scope.getProgramParent().push({\n      id: fileNameIdentifier,\n      init: t.stringLiteral(filename),\n    });\n    // @ts-expect-error todo: avoid mutating PluginPass\n    state.fileNameIdentifier = fileNameIdentifier;\n  }\n\n  return makeTrace(\n    t.cloneNode(\n      // @ts-expect-error todo: avoid mutating PluginPass\n      state.fileNameIdentifier,\n    ),\n    location.start.line,\n    location.start.column,\n  );\n}\n\nfunction makeTrace(\n  fileNameIdentifier: Identifier,\n  lineNumber?: number,\n  column0Based?: number,\n) {\n  const fileLineLiteral =\n    lineNumber != null ? t.numericLiteral(lineNumber) : t.nullLiteral();\n\n  const fileColumnLiteral =\n    column0Based != null ? t.numericLiteral(column0Based + 1) : t.nullLiteral();\n\n  return template.expression.ast`{\n    fileName: ${fileNameIdentifier},\n    lineNumber: ${fileLineLiteral},\n    columnNumber: ${fileColumnLiteral},\n  }`;\n}\n\nfunction sourceSelfError(path: NodePath, name: string) {\n  const pluginName = `transform-react-jsx-${name.slice(2)}`;\n\n  return path.buildCodeFrameError(\n    `Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`,\n  );\n}\n","import createPlugin from \"./create-plugin.ts\";\n\nexport default createPlugin({\n  name: \"transform-react-jsx/development\",\n  development: true,\n});\n"],"names":["apiPolyfills","assertVersion","api","range","throwVersionError","version","declare","builder","options","dirname","clonedApi","name","Object","keys","copyApiObject","proto","test","getPrototypeOf","hasOwn","assign","Number","isInteger","Error","limit","stackTraceLimit","err","slice","code","manipulateOptions","opts","parserOpts","plugins","push","shallowEqual","actual","expected","key","warnings","Set","deprecationWarning","oldName","newName","prefix","has","add","internal","trace","captureShortStackTrace","console","warn","skip","length","prepareStackTrace","stackTrace","stack","shortStackTrace","getFileName","map","frame","join","isArrayExpression","node","type","isAssignmentExpression","isBinaryExpression","isInterpreterDirective","isDirective","isDirectiveLiteral","isBlockStatement","isBreakStatement","isCallExpression","isCatchClause","isConditionalExpression","isContinueStatement","isDebuggerStatement","isDoWhileStatement","isEmptyStatement","isExpressionStatement","isFile","isForInStatement","isForStatement","isFunctionDeclaration","isFunctionExpression","isIdentifier","isIfStatement","isLabeledStatement","isStringLiteral","isNumericLiteral","isNullLiteral","isBooleanLiteral","isRegExpLiteral","isLogicalExpression","isMemberExpression","isNewExpression","isProgram","isObjectExpression","isObjectMethod","isObjectProperty","isRestElement","isReturnStatement","isSequenceExpression","isParenthesizedExpression","isSwitchCase","isSwitchStatement","isThisExpression","isThrowStatement","isTryStatement","isUnaryExpression","isUpdateExpression","isVariableDeclaration","isVariableDeclarator","isWhileStatement","isWithStatement","isAssignmentPattern","isArrayPattern","isArrowFunctionExpression","isClassBody","isClassExpression","isClassDeclaration","isExportAllDeclaration","isExportDefaultDeclaration","isExportNamedDeclaration","isExportSpecifier","isForOfStatement","isImportDeclaration","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","isImportExpression","isMetaProperty","isClassMethod","isObjectPattern","isSpreadElement","isSuper","isTaggedTemplateExpression","isTemplateElement","isTemplateLiteral","isYieldExpression","isAwaitExpression","isImport","isBigIntLiteral","isExportNamespaceSpecifier","isOptionalMemberExpression","isOptionalCallExpression","isClassProperty","isClassAccessorProperty","isClassPrivateProperty","isClassPrivateMethod","isPrivateName","isStaticBlock","isAnyTypeAnnotation","isArrayTypeAnnotation","isBooleanTypeAnnotation","isBooleanLiteralTypeAnnotation","isNullLiteralTypeAnnotation","isClassImplements","isDeclareClass","isDeclareFunction","isDeclareInterface","isDeclareModule","isDeclareModuleExports","isDeclareTypeAlias","isDeclareOpaqueType","isDeclareVariable","isDeclareExportDeclaration","isDeclareExportAllDeclaration","isDeclaredPredicate","isExistsTypeAnnotation","isFunctionTypeAnnotation","isFunctionTypeParam","isGenericTypeAnnotation","isInferredPredicate","isInterfaceExtends","isInterfaceDeclaration","isInterfaceTypeAnnotation","isIntersectionTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isNullableTypeAnnotation","isNumberLiteralTypeAnnotation","isNumberTypeAnnotation","isObjectTypeAnnotation","isObjectTypeInternalSlot","isObjectTypeCallProperty","isObjectTypeIndexer","isObjectTypeProperty","isObjectTypeSpreadProperty","isOpaqueType","isQualifiedTypeIdentifier","isStringLiteralTypeAnnotation","isStringTypeAnnotation","isSymbolTypeAnnotation","isThisTypeAnnotation","isTupleTypeAnnotation","isTypeofTypeAnnotation","isTypeAlias","isTypeAnnotation","isTypeCastExpression","isTypeParameter","isTypeParameterDeclaration","isTypeParameterInstantiation","isUnionTypeAnnotation","isVariance","isVoidTypeAnnotation","isEnumDeclaration","isEnumBooleanBody","isEnumNumberBody","isEnumStringBody","isEnumSymbolBody","isEnumBooleanMember","isEnumNumberMember","isEnumStringMember","isEnumDefaultedMember","isIndexedAccessType","isOptionalIndexedAccessType","isJSXAttribute","isJSXClosingElement","isJSXElement","isJSXEmptyExpression","isJSXExpressionContainer","isJSXSpreadChild","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXOpeningElement","isJSXSpreadAttribute","isJSXText","isJSXFragment","isJSXOpeningFragment","isJSXClosingFragment","isNoop","isPlaceholder","isV8IntrinsicIdentifier","isArgumentPlaceholder","isBindExpression","isImportAttribute","isDecorator","isDoExpression","isExportDefaultSpecifier","isRecordExpression","isTupleExpression","isDecimalLiteral","isModuleExpression","isTopicReference","isPipelineTopicExpression","isPipelineBareFunction","isPipelinePrimaryTopicReference","isTSParameterProperty","isTSDeclareFunction","isTSDeclareMethod","isTSQualifiedName","isTSCallSignatureDeclaration","isTSConstructSignatureDeclaration","isTSPropertySignature","isTSMethodSignature","isTSIndexSignature","isTSAnyKeyword","isTSBooleanKeyword","isTSBigIntKeyword","isTSIntrinsicKeyword","isTSNeverKeyword","isTSNullKeyword","isTSNumberKeyword","isTSObjectKeyword","isTSStringKeyword","isTSSymbolKeyword","isTSUndefinedKeyword","isTSUnknownKeyword","isTSVoidKeyword","isTSThisType","isTSFunctionType","isTSConstructorType","isTSTypeReference","isTSTypePredicate","isTSTypeQuery","isTSTypeLiteral","isTSArrayType","isTSTupleType","isTSOptionalType","isTSRestType","isTSNamedTupleMember","isTSUnionType","isTSIntersectionType","isTSConditionalType","isTSInferType","isTSParenthesizedType","isTSTypeOperator","isTSIndexedAccessType","isTSMappedType","isTSLiteralType","isTSExpressionWithTypeArguments","isTSInterfaceDeclaration","isTSInterfaceBody","isTSTypeAliasDeclaration","isTSInstantiationExpression","isTSAsExpression","isTSSatisfiesExpression","isTSTypeAssertion","isTSEnumDeclaration","isTSEnumMember","isTSModuleDeclaration","isTSModuleBlock","isTSImportType","isTSImportEqualsDeclaration","isTSExternalModuleReference","isTSNonNullExpression","isTSExportAssignment","isTSNamespaceExportDeclaration","isTSTypeAnnotation","isTSTypeParameterInstantiation","isTSTypeParameterDeclaration","isTSTypeParameter","isStandardized","expectedNode","isExpression","isBinary","isScopable","isBlockParent","isBlock","isStatement","isTerminatorless","isCompletionStatement","isConditional","isLoop","isWhile","isExpressionWrapper","isFor","isForXStatement","isFunction","isFunctionParent","isPureish","isDeclaration","isPatternLike","isLVal","isTSEntityName","isLiteral","isUserWhitespacable","isMethod","isObjectMember","isProperty","isUnaryLike","isPattern","isClass","isImportOrExportDeclaration","isExportDeclaration","isModuleSpecifier","isAccessor","isPrivate","isFlow","isFlowType","isFlowBaseAnnotation","isFlowDeclaration","isFlowPredicate","isEnumBody","isEnumMember","isJSX","isMiscellaneous","isTypeScript","isTSTypeElement","isTSType","isTSBaseType","isNumberLiteral","isRegexLiteral","isRestProperty","isSpreadProperty","isModuleDeclaration","matchesPattern","member","match","allowPartial","parts","Array","isArray","split","nodes","object","property","i","j","value","buildMatchMemberExpression","isReactComponent","isCompatTag","tagName","fastProto","FastObject","o","result","prototype","create","inlineCacheCutoff","toFastPropertiesBABEL_8_BREAKINGTrue","toFastproperties","bool","toFastProperties","process","env","require$$1","require$$0","isType","nodeType","targetType","ALIAS_KEYS","aliases","FLIPPED_ALIAS_KEYS","alias","isPlaceholderType","placeholderType","PLACEHOLDERS_ALIAS","is","matches","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","set","pos","isIdentifierStart","String","fromCharCode","isIdentifierChar","isIdentifierName","isFirst","cp","charCodeAt","trail","reservedWords","keyword","strict","strictBind","keywords","reservedWordsStrictSet","isReservedWord","word","inModule","isStrictReservedWord","isKeyword","isValidIdentifier","reserved","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","input","lineStart","curLine","errors","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","octalStr","octal","parseInt","next","len","forceLen","n","readInt","invalidEscapeSequence","radix","allowNumSeparator","bailOnError","start","forbiddenSiblings","isAllowedSibling","invalid","total","e","Infinity","val","prev","numericSeparatorInEscapeSequence","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","STATEMENT_OR_BLOCK_KEYS","FLATTENABLE_KEYS","FOR_INIT_KEYS","COMMENT_KEYS","LOGICAL_OPERATORS","UPDATE_OPERATORS","BOOLEAN_NUMBER_BINARY_OPERATORS","EQUALITY_BINARY_OPERATORS","COMPARISON_BINARY_OPERATORS","BOOLEAN_BINARY_OPERATORS","NUMBER_BINARY_OPERATORS","BINARY_OPERATORS","ASSIGNMENT_OPERATORS","op","BOOLEAN_UNARY_OPERATORS","NUMBER_UNARY_OPERATORS","STRING_UNARY_OPERATORS","UNARY_OPERATORS","INHERIT_KEYS","optional","force","BLOCK_SCOPED_SYMBOL","Symbol","for","NOT_LOCAL_BINDING","VISITOR_KEYS","NODE_FIELDS","BUILDER_KEYS","DEPRECATED_KEYS","NODE_PARENT_VALIDATIONS","getType","validate","typeIs","typeName","assertNodeType","validateType","validateOptional","validateOptionalType","arrayOf","elementType","chain","assertValueType","assertEach","arrayOfType","validateArrayOfType","callback","validator","subkey","v","BABEL_TYPES_8_BREAKING","validateChild","each","assertOneOf","values","TypeError","JSON","stringify","oneOf","types","oneOfNodeTypes","assertNodeOrValueType","oneOfNodeOrValueTypes","valid","assertShape","shape","validateField","error","message","shapeOf","assertOptionalChainStart","current","callee","fns","args","fn","chainOf","validTypeOpts","validFieldKeys","store","defineAliasedType","defined","inherits","additional","filter","a","includes","unshift","defineType","fields","getOwnPropertyNames","field","def","default","deprecated","visitor","k","deprecatedAlias","concat","undefined","forEach","elements","operator","identifier","pattern","left","right","expression","inOp","directives","body","label","arguments","typeArguments","typeParameters","param","consequent","alternate","program","comments","tokens","init","update","functionCommon","params","generator","async","functionTypeAnnotationCommon","returnType","functionDeclarationCommon","id","predicate","parent","patternLikeCommon","typeAnnotation","decorators","exec","parentKey","nonComp","computed","imported","meta","isFinite","flags","normal","sourceType","interpreter","properties","kind","shorthand","argument","listKey","index","expressions","discriminant","cases","block","handler","finalizer","declarations","without","definite","superClass","superTypeParameters","implements","mixins","abstract","source","exportKind","attributes","assertions","declaration","specifiers","sourced","sourceless","local","exported","lval","await","module","phase","importKind","classMethodOrPropertyCommon","accessibility","static","override","classMethodOrDeclareMethodCommon","access","tag","quasi","raw","cooked","templateElementCookedValidator","unterminatedCalled","tail","quasis","delegate","readonly","variance","defineInterfaceishType","extends","supertype","impltype","rest","this","indexers","callProperties","internalSlots","exact","inexact","method","qualification","bound","explicitType","members","hasUnknownMembers","objectType","indexType","openingElement","closingElement","children","namespace","selfClosing","openingFragment","closingFragment","PLACEHOLDERS","Declaration","Pattern","PLACEHOLDERS_FLIPPED_ALIAS","tSFunctionTypeAnnotationCommon","parameter","signatureDeclarationCommon","callConstructSignatureDeclaration","namedTypeElementCommon","parameters","tsKeywordTypes","fnOrCtrBase","parameterName","asserts","exprName","elementTypes","unionOrIntersection","checkType","extendsType","trueType","falseType","typeParameter","nameType","literal","unaryExpression","unaryOperator","TSTypeExpression","const","initializer","global","qualifier","isExport","moduleReference","in","constraint","DEPRECATED_ALIASES","ModuleDeclaration","TYPES","validateNode","arrayExpression","assignmentExpression","binaryExpression","interpreterDirective","directive","directiveLiteral","blockStatement","breakStatement","callExpression","_arguments","catchClause","conditionalExpression","continueStatement","debuggerStatement","doWhileStatement","emptyStatement","expressionStatement","file","forInStatement","forStatement","functionDeclaration","functionExpression","ifStatement","labeledStatement","stringLiteral","numericLiteral","nullLiteral","booleanLiteral","regExpLiteral","logicalExpression","memberExpression","newExpression","objectExpression","objectMethod","objectProperty","restElement","returnStatement","sequenceExpression","parenthesizedExpression","switchCase","switchStatement","thisExpression","throwStatement","tryStatement","updateExpression","variableDeclaration","variableDeclarator","whileStatement","withStatement","assignmentPattern","arrayPattern","arrowFunctionExpression","classBody","classExpression","classDeclaration","exportAllDeclaration","exportDefaultDeclaration","exportNamedDeclaration","exportSpecifier","forOfStatement","_await","importDeclaration","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","importExpression","metaProperty","classMethod","_static","objectPattern","spreadElement","_super","taggedTemplateExpression","templateElement","templateLiteral","yieldExpression","awaitExpression","_import","bigIntLiteral","exportNamespaceSpecifier","optionalMemberExpression","optionalCallExpression","classProperty","classAccessorProperty","classPrivateProperty","classPrivateMethod","privateName","staticBlock","anyTypeAnnotation","arrayTypeAnnotation","booleanTypeAnnotation","booleanLiteralTypeAnnotation","nullLiteralTypeAnnotation","classImplements","declareClass","_extends","declareFunction","declareInterface","declareModule","declareModuleExports","declareTypeAlias","declareOpaqueType","declareVariable","declareExportDeclaration","declareExportAllDeclaration","declaredPredicate","existsTypeAnnotation","functionTypeAnnotation","functionTypeParam","genericTypeAnnotation","inferredPredicate","interfaceExtends","interfaceDeclaration","interfaceTypeAnnotation","intersectionTypeAnnotation","mixedTypeAnnotation","emptyTypeAnnotation","nullableTypeAnnotation","numberLiteralTypeAnnotation","numberTypeAnnotation","objectTypeAnnotation","objectTypeInternalSlot","objectTypeCallProperty","objectTypeIndexer","objectTypeProperty","objectTypeSpreadProperty","opaqueType","qualifiedTypeIdentifier","stringLiteralTypeAnnotation","stringTypeAnnotation","symbolTypeAnnotation","thisTypeAnnotation","tupleTypeAnnotation","typeofTypeAnnotation","typeAlias","typeCastExpression","_default","typeParameterDeclaration","typeParameterInstantiation","unionTypeAnnotation","voidTypeAnnotation","enumDeclaration","enumBooleanBody","enumNumberBody","enumStringBody","enumSymbolBody","enumBooleanMember","enumNumberMember","enumStringMember","enumDefaultedMember","indexedAccessType","optionalIndexedAccessType","jsxAttribute","jsxClosingElement","jsxElement","jsxEmptyExpression","jsxExpressionContainer","jsxSpreadChild","jsxIdentifier","jsxMemberExpression","jsxNamespacedName","jsxOpeningElement","jsxSpreadAttribute","jsxText","jsxFragment","jsxOpeningFragment","jsxClosingFragment","noop","placeholder","v8IntrinsicIdentifier","argumentPlaceholder","bindExpression","importAttribute","decorator","doExpression","exportDefaultSpecifier","recordExpression","tupleExpression","decimalLiteral","moduleExpression","topicReference","pipelineTopicExpression","pipelineBareFunction","pipelinePrimaryTopicReference","tsParameterProperty","tsDeclareFunction","tsDeclareMethod","tsQualifiedName","tsCallSignatureDeclaration","tsConstructSignatureDeclaration","tsPropertySignature","tsMethodSignature","tsIndexSignature","tsAnyKeyword","tsBooleanKeyword","tsBigIntKeyword","tsIntrinsicKeyword","tsNeverKeyword","tsNullKeyword","tsNumberKeyword","tsObjectKeyword","tsStringKeyword","tsSymbolKeyword","tsUndefinedKeyword","tsUnknownKeyword","tsVoidKeyword","tsThisType","tsFunctionType","tsConstructorType","tsTypeReference","tsTypePredicate","tsTypeQuery","tsTypeLiteral","tsArrayType","tsTupleType","tsOptionalType","tsRestType","tsNamedTupleMember","tsUnionType","tsIntersectionType","tsConditionalType","tsInferType","tsParenthesizedType","tsTypeOperator","tsIndexedAccessType","tsMappedType","tsLiteralType","tsExpressionWithTypeArguments","tsInterfaceDeclaration","tsInterfaceBody","tsTypeAliasDeclaration","tsInstantiationExpression","tsAsExpression","tsSatisfiesExpression","tsTypeAssertion","tsEnumDeclaration","tsEnumMember","tsModuleDeclaration","tsModuleBlock","tsImportType","tsImportEqualsDeclaration","tsExternalModuleReference","tsNonNullExpression","tsExportAssignment","tsNamespaceExportDeclaration","tsTypeAnnotation","tsTypeParameterInstantiation","tsTypeParameterDeclaration","tsTypeParameter","NumberLiteral","RegexLiteral","RestProperty","SpreadProperty","cleanJSXElementLiteralChild","child","lines","lastNonEmptyLine","line","isFirstLine","isLastLine","isLastNonEmptyLine","trimmedLine","replace","buildChildren","isNode","assertNode","assert","assertArrayExpression","assertAssignmentExpression","assertBinaryExpression","assertInterpreterDirective","assertDirective","assertDirectiveLiteral","assertBlockStatement","assertBreakStatement","assertCallExpression","assertCatchClause","assertConditionalExpression","assertContinueStatement","assertDebuggerStatement","assertDoWhileStatement","assertEmptyStatement","assertExpressionStatement","assertFile","assertForInStatement","assertForStatement","assertFunctionDeclaration","assertFunctionExpression","assertIdentifier","assertIfStatement","assertLabeledStatement","assertStringLiteral","assertNumericLiteral","assertNullLiteral","assertBooleanLiteral","assertRegExpLiteral","assertLogicalExpression","assertMemberExpression","assertNewExpression","assertProgram","assertObjectExpression","assertObjectMethod","assertObjectProperty","assertRestElement","assertReturnStatement","assertSequenceExpression","assertParenthesizedExpression","assertSwitchCase","assertSwitchStatement","assertThisExpression","assertThrowStatement","assertTryStatement","assertUnaryExpression","assertUpdateExpression","assertVariableDeclaration","assertVariableDeclarator","assertWhileStatement","assertWithStatement","assertAssignmentPattern","assertArrayPattern","assertArrowFunctionExpression","assertClassBody","assertClassExpression","assertClassDeclaration","assertExportAllDeclaration","assertExportDefaultDeclaration","assertExportNamedDeclaration","assertExportSpecifier","assertForOfStatement","assertImportDeclaration","assertImportDefaultSpecifier","assertImportNamespaceSpecifier","assertImportSpecifier","assertImportExpression","assertMetaProperty","assertClassMethod","assertObjectPattern","assertSpreadElement","assertSuper","assertTaggedTemplateExpression","assertTemplateElement","assertTemplateLiteral","assertYieldExpression","assertAwaitExpression","assertImport","assertBigIntLiteral","assertExportNamespaceSpecifier","assertOptionalMemberExpression","assertOptionalCallExpression","assertClassProperty","assertClassAccessorProperty","assertClassPrivateProperty","assertClassPrivateMethod","assertPrivateName","assertStaticBlock","assertAnyTypeAnnotation","assertArrayTypeAnnotation","assertBooleanTypeAnnotation","assertBooleanLiteralTypeAnnotation","assertNullLiteralTypeAnnotation","assertClassImplements","assertDeclareClass","assertDeclareFunction","assertDeclareInterface","assertDeclareModule","assertDeclareModuleExports","assertDeclareTypeAlias","assertDeclareOpaqueType","assertDeclareVariable","assertDeclareExportDeclaration","assertDeclareExportAllDeclaration","assertDeclaredPredicate","assertExistsTypeAnnotation","assertFunctionTypeAnnotation","assertFunctionTypeParam","assertGenericTypeAnnotation","assertInferredPredicate","assertInterfaceExtends","assertInterfaceDeclaration","assertInterfaceTypeAnnotation","assertIntersectionTypeAnnotation","assertMixedTypeAnnotation","assertEmptyTypeAnnotation","assertNullableTypeAnnotation","assertNumberLiteralTypeAnnotation","assertNumberTypeAnnotation","assertObjectTypeAnnotation","assertObjectTypeInternalSlot","assertObjectTypeCallProperty","assertObjectTypeIndexer","assertObjectTypeProperty","assertObjectTypeSpreadProperty","assertOpaqueType","assertQualifiedTypeIdentifier","assertStringLiteralTypeAnnotation","assertStringTypeAnnotation","assertSymbolTypeAnnotation","assertThisTypeAnnotation","assertTupleTypeAnnotation","assertTypeofTypeAnnotation","assertTypeAlias","assertTypeAnnotation","assertTypeCastExpression","assertTypeParameter","assertTypeParameterDeclaration","assertTypeParameterInstantiation","assertUnionTypeAnnotation","assertVariance","assertVoidTypeAnnotation","assertEnumDeclaration","assertEnumBooleanBody","assertEnumNumberBody","assertEnumStringBody","assertEnumSymbolBody","assertEnumBooleanMember","assertEnumNumberMember","assertEnumStringMember","assertEnumDefaultedMember","assertIndexedAccessType","assertOptionalIndexedAccessType","assertJSXAttribute","assertJSXClosingElement","assertJSXElement","assertJSXEmptyExpression","assertJSXExpressionContainer","assertJSXSpreadChild","assertJSXIdentifier","assertJSXMemberExpression","assertJSXNamespacedName","assertJSXOpeningElement","assertJSXSpreadAttribute","assertJSXText","assertJSXFragment","assertJSXOpeningFragment","assertJSXClosingFragment","assertNoop","assertPlaceholder","assertV8IntrinsicIdentifier","assertArgumentPlaceholder","assertBindExpression","assertImportAttribute","assertDecorator","assertDoExpression","assertExportDefaultSpecifier","assertRecordExpression","assertTupleExpression","assertDecimalLiteral","assertModuleExpression","assertTopicReference","assertPipelineTopicExpression","assertPipelineBareFunction","assertPipelinePrimaryTopicReference","assertTSParameterProperty","assertTSDeclareFunction","assertTSDeclareMethod","assertTSQualifiedName","assertTSCallSignatureDeclaration","assertTSConstructSignatureDeclaration","assertTSPropertySignature","assertTSMethodSignature","assertTSIndexSignature","assertTSAnyKeyword","assertTSBooleanKeyword","assertTSBigIntKeyword","assertTSIntrinsicKeyword","assertTSNeverKeyword","assertTSNullKeyword","assertTSNumberKeyword","assertTSObjectKeyword","assertTSStringKeyword","assertTSSymbolKeyword","assertTSUndefinedKeyword","assertTSUnknownKeyword","assertTSVoidKeyword","assertTSThisType","assertTSFunctionType","assertTSConstructorType","assertTSTypeReference","assertTSTypePredicate","assertTSTypeQuery","assertTSTypeLiteral","assertTSArrayType","assertTSTupleType","assertTSOptionalType","assertTSRestType","assertTSNamedTupleMember","assertTSUnionType","assertTSIntersectionType","assertTSConditionalType","assertTSInferType","assertTSParenthesizedType","assertTSTypeOperator","assertTSIndexedAccessType","assertTSMappedType","assertTSLiteralType","assertTSExpressionWithTypeArguments","assertTSInterfaceDeclaration","assertTSInterfaceBody","assertTSTypeAliasDeclaration","assertTSInstantiationExpression","assertTSAsExpression","assertTSSatisfiesExpression","assertTSTypeAssertion","assertTSEnumDeclaration","assertTSEnumMember","assertTSModuleDeclaration","assertTSModuleBlock","assertTSImportType","assertTSImportEqualsDeclaration","assertTSExternalModuleReference","assertTSNonNullExpression","assertTSExportAssignment","assertTSNamespaceExportDeclaration","assertTSTypeAnnotation","assertTSTypeParameterInstantiation","assertTSTypeParameterDeclaration","assertTSTypeParameter","assertStandardized","assertExpression","assertBinary","assertScopable","assertBlockParent","assertBlock","assertStatement","assertTerminatorless","assertCompletionStatement","assertConditional","assertLoop","assertWhile","assertExpressionWrapper","assertFor","assertForXStatement","assertFunction","assertFunctionParent","assertPureish","assertDeclaration","assertPatternLike","assertLVal","assertTSEntityName","assertLiteral","assertImmutable","assertUserWhitespacable","assertMethod","assertObjectMember","assertProperty","assertUnaryLike","assertPattern","assertClass","assertImportOrExportDeclaration","assertExportDeclaration","assertModuleSpecifier","assertAccessor","assertPrivate","assertFlow","assertFlowType","assertFlowBaseAnnotation","assertFlowDeclaration","assertFlowPredicate","assertEnumBody","assertEnumMember","assertJSX","assertMiscellaneous","assertTypeScript","assertTSTypeElement","assertTSType","assertTSBaseType","assertNumberLiteral","assertRegexLiteral","assertRestProperty","assertSpreadProperty","assertModuleDeclaration","createTypeAnnotationBasedOnTypeof","getQualifiedName","removeTypeDuplicates","nodesIn","from","generics","Map","bases","typeGroups","existing","get","baseType","genericName","createFlowUnionType","flattened","createTSUnionType","typeAnnotations","buildUndefinedNode","cloneIfNode","obj","deep","withoutLoc","commentsCache","cloneNodeInternal","cloneIfNodeOrArray","cloneNode","newNode","maybeCloneComments","loc","leadingComments","innerComments","trailingComments","extra","comment","cache","ret","clone","cloneDeep","cloneDeepWithoutLoc","cloneWithoutLoc","addComments","addComment","content","inherit","Boolean","inheritInnerComments","inheritLeadingComments","inheritTrailingComments","inheritsComments","removeComments","STANDARDIZED_TYPES","EXPRESSION_TYPES","BINARY_TYPES","SCOPABLE_TYPES","BLOCKPARENT_TYPES","BLOCK_TYPES","STATEMENT_TYPES","TERMINATORLESS_TYPES","COMPLETIONSTATEMENT_TYPES","CONDITIONAL_TYPES","LOOP_TYPES","WHILE_TYPES","EXPRESSIONWRAPPER_TYPES","FOR_TYPES","FORXSTATEMENT_TYPES","FUNCTION_TYPES","FUNCTIONPARENT_TYPES","PUREISH_TYPES","DECLARATION_TYPES","PATTERNLIKE_TYPES","LVAL_TYPES","TSENTITYNAME_TYPES","LITERAL_TYPES","IMMUTABLE_TYPES","USERWHITESPACABLE_TYPES","METHOD_TYPES","OBJECTMEMBER_TYPES","PROPERTY_TYPES","UNARYLIKE_TYPES","PATTERN_TYPES","CLASS_TYPES","IMPORTOREXPORTDECLARATION_TYPES","EXPORTDECLARATION_TYPES","MODULESPECIFIER_TYPES","ACCESSOR_TYPES","PRIVATE_TYPES","FLOW_TYPES","FLOWTYPE_TYPES","FLOWBASEANNOTATION_TYPES","FLOWDECLARATION_TYPES","FLOWPREDICATE_TYPES","ENUMBODY_TYPES","ENUMMEMBER_TYPES","JSX_TYPES","MISCELLANEOUS_TYPES","TYPESCRIPT_TYPES","TSTYPEELEMENT_TYPES","TSTYPE_TYPES","TSBASETYPE_TYPES","MODULEDECLARATION_TYPES","toBlock","blockNodes","ensureBlock","toIdentifier","c","codePointAt","toUpperCase","toBindingIdentifierName","toComputedKey","toExpression","traverseFast","enter","subNode","CLEAR_KEYS","CLEAR_KEYS_PLUS_COMMENTS","removeProperties","preserveComments","symbols","getOwnPropertySymbols","sym","removePropertiesDeep","tree","toKeyAlias","increment","uid","MAX_SAFE_INTEGER","toStatement","ignore","mustHaveId","newType","objectToString","Function","call","bind","toString","isRegExp","isPlainObject","valueToNode","Math","abs","numerator","props","nodeKey","appendToMemberExpression","append","prependToMemberExpression","prepend","getBindingIdentifiers","duplicates","outerOnly","newBindingsOnly","search","ids","shift","_ids","DeclareClass","DeclareFunction","DeclareModule","DeclareVariable","DeclareInterface","DeclareTypeAlias","DeclareOpaqueType","InterfaceDeclaration","TypeAlias","OpaqueType","CatchClause","LabeledStatement","UnaryExpression","AssignmentExpression","ImportSpecifier","ImportNamespaceSpecifier","ImportDefaultSpecifier","ImportDeclaration","ExportSpecifier","ExportNamespaceSpecifier","ExportDefaultSpecifier","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ObjectMethod","ClassMethod","ClassPrivateMethod","ForInStatement","ForOfStatement","ClassDeclaration","ClassExpression","RestElement","UpdateExpression","ObjectProperty","AssignmentPattern","ArrayPattern","ObjectPattern","VariableDeclaration","VariableDeclarator","getOuterBindingIdentifiers","traverse","handlers","state","exit","traverseSimpleImpl","ancestors","pop","isBinding","grandparent","isLet","isBlockScoped","isImmutable","isNodesEquivalent","b","visitorKeys","val_a","val_b","isReferenced","isScope","isSpecifierDefault","specifier","RESERVED_WORDS_ES3_ONLY","isValidES3Identifier","isVar","react","_t","ImportBuilder","_statements","_resultName","_importedSource","constructor","importedSource","scope","hub","_scope","_hub","done","statements","resultName","import","require","generateUidIdentifier","statement","named","importName","var","defaultInterop","_interop","addHelper","wildcardInterop","fail","prop","read","isModule","path","ImportInjector","_defaultOpts","importedType","importedInterop","importingInterop","ensureLiveReference","ensureNoContext","importPosition","programPath","find","p","_programPath","_programScope","_applyDefaults","addDefault","importedSourceIn","addNamed","_generateImport","addNamespace","addSideEffect","isInit","newOpts","nameHint","blockHoist","isDefault","isNamed","isNamespace","isMod","isModuleForNode","isModuleForBabel","es6Default","_insertStatements","insertAfter","_blockHoist","targetPath","insertBefore","unshiftContainer","PURE_ANNOTATION","isPureAnnotated","some","annotateAsPure","pathOrNode","DEFAULT","importSource","runtime","pragma","pragmaFrag","JSX_SOURCE_ANNOTATION_REGEX","JSX_RUNTIME_ANNOTATION_REGEX","JSX_ANNOTATION_REGEX","JSX_FRAG_ANNOTATION_REGEX","pass","hasProto","t","createPlugin","development","_","pure","throwIfNamespace","RUNTIME_DEFAULT","IMPORT_SOURCE_DEFAULT","PRAGMA_DEFAULT","PRAGMA_FRAG_DEFAULT","useBuiltInsFormatted","useBuiltIns","injectMetaPropertiesVisitor","JSXOpeningElement","isThisAllowed","makeSource","pushContainer","jsx","JSXNamespacedName","buildCodeFrameError","JSXSpreadChild","Program","sourceSet","pragmaSet","pragmaFragSet","ast","sourceMatches","runtimeMatches","jsxMatches","jsxFragMatches","createElement","toMemberExpression","fragment","define","createImportLazily","JSXFragment","callExpr","buildCreateElementFragmentCall","buildJSXFragmentCall","replaceWith","JSXElement","shouldUseCreateElement","buildCreateElementCall","buildJSXElementCall","JSXAttribute","isDerivedClass","classPath","parentPath","openingPath","seenPropsSpread","attr","convertJSXIdentifier","convertAttributeValue","accumulateAttribute","array","attribute","arg","buildChildrenProperty","childrenNode","getTag","attribsArray","extracted","sourceSelfError","keyValue","attribs","buildJSXOpeningElementAttributes","__source","__self","reduce","buildCreateElementOpeningElementAttributes","tagExpr","found","getSource","actualSource","reference","location","fileNameIdentifier","filename","getProgramParent","makeTrace","column","lineNumber","column0Based","fileLineLiteral","fileColumnLiteral","template","pluginName"],"mappings":"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AAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC,CAAA;AAEx+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,MAAM,EAAC,GAAG,CAAC,CAAA;A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","x_google_ignoreList":[9,10]}