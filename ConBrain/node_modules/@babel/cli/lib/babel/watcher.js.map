{"version":3,"names":["createRequire","path","fileToDeps","Map","depToFiles","isWatchMode","watcher","watchQueue","Set","hasStarted","enable","enableGlobbing","FSWatcher","requireChokidar","options","disableGlobbing","persistent","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval","on","unwatchFile","startWatcher","dep","add","clear","console","log","watch","filename","Error","resolve","onFilesChange","callback","event","absoluteFile","get","updateExternalDependencies","dependencies","absFilename","absDependencies","Array","from","deps","has","removeFileDependency","set","delete","size","unwatch","require","import","meta","url","err","error"],"sources":["../../src/babel/watcher.ts"],"sourcesContent":["import { createRequire } from \"module\";\nimport path from \"path\";\nimport type { WatchOptions, FSWatcher } from \"chokidar\";\n\nconst fileToDeps = new Map<string, Set<string>>();\nconst depToFiles = new Map<string, Set<string>>();\n\nlet isWatchMode = false;\nlet watcher: FSWatcher;\nconst watchQueue = new Set<string>();\nlet hasStarted = false;\n\nexport function enable({ enableGlobbing }: { enableGlobbing: boolean }) {\n  isWatchMode = true;\n\n  const { FSWatcher } = requireChokidar();\n\n  const options: WatchOptions = {\n    disableGlobbing: !enableGlobbing,\n    persistent: true,\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 50,\n      pollInterval: 10,\n    },\n  };\n  watcher = new FSWatcher(options);\n\n  watcher.on(\"unlink\", unwatchFile);\n}\n\nexport function startWatcher() {\n  hasStarted = true;\n\n  for (const dep of watchQueue) {\n    watcher.add(dep);\n  }\n  watchQueue.clear();\n\n  watcher.on(\"ready\", () => {\n    console.log(\"The watcher is ready.\");\n  });\n}\n\nexport function watch(filename: string): void {\n  if (!isWatchMode) {\n    throw new Error(\n      \"Internal Babel error: .watch called when not in watch mode.\",\n    );\n  }\n\n  if (!hasStarted) {\n    watchQueue.add(path.resolve(filename));\n  } else {\n    watcher.add(path.resolve(filename));\n  }\n}\n\n/**\n * Call @param callback whenever a dependency (source file)/\n * external dependency (non-source file) changes.\n *\n * Handles mapping external dependencies to their corresponding\n * dependencies.\n */\nexport function onFilesChange(\n  callback: (filenames: string[], event: string, cause: string) => void,\n): void {\n  if (!isWatchMode) {\n    throw new Error(\n      \"Internal Babel error: .onFilesChange called when not in watch mode.\",\n    );\n  }\n\n  watcher.on(\"all\", (event, filename) => {\n    if (event !== \"change\" && event !== \"add\") return;\n\n    const absoluteFile = path.resolve(filename);\n    callback(\n      [absoluteFile, ...(depToFiles.get(absoluteFile) ?? [])],\n      event,\n      absoluteFile,\n    );\n  });\n}\n\nexport function updateExternalDependencies(\n  filename: string,\n  dependencies: Set<string>,\n) {\n  if (!isWatchMode) return;\n\n  // Use absolute paths\n  const absFilename = path.resolve(filename);\n  const absDependencies = new Set(\n    Array.from(dependencies, dep => path.resolve(dep)),\n  );\n\n  const deps = fileToDeps.get(absFilename);\n  if (deps) {\n    for (const dep of deps) {\n      if (!absDependencies.has(dep)) {\n        removeFileDependency(absFilename, dep);\n      }\n    }\n  }\n  for (const dep of absDependencies) {\n    let deps = depToFiles.get(dep);\n    if (!deps) {\n      depToFiles.set(dep, (deps = new Set()));\n\n      if (!hasStarted) {\n        watchQueue.add(dep);\n      } else {\n        watcher.add(dep);\n      }\n    }\n\n    deps.add(absFilename);\n  }\n\n  fileToDeps.set(absFilename, absDependencies);\n}\n\nfunction removeFileDependency(filename: string, dep: string) {\n  const deps = depToFiles.get(dep);\n  deps.delete(filename);\n\n  if (deps.size === 0) {\n    depToFiles.delete(dep);\n\n    if (!hasStarted) {\n      watchQueue.delete(dep);\n    } else {\n      watcher.unwatch(dep);\n    }\n  }\n}\n\nfunction unwatchFile(filename: string) {\n  const deps = fileToDeps.get(filename);\n  if (!deps) return;\n\n  for (const dep of deps) {\n    removeFileDependency(filename, dep);\n  }\n  fileToDeps.delete(filename);\n}\n\nfunction requireChokidar(): any {\n  const require = createRequire(import.meta.url);\n\n  try {\n    return process.env.BABEL_8_BREAKING\n      ? require(\"chokidar\")\n      : parseInt(process.versions.node) >= 8\n        ? require(\"chokidar\")\n        : require(\"@nicolo-ribaudo/chokidar-2\");\n  } catch (err) {\n    console.error(\n      \"The optional dependency chokidar failed to install and is required for \" +\n        \"--watch. Chokidar is likely not supported on your platform.\",\n    );\n    throw err;\n  }\n}\n"],"mappings":"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"}