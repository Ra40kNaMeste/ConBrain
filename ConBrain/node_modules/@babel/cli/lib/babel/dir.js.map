{"version":3,"names":["slash","path","fs","util","watcher","FILE_TYPE","Object","freeze","NON_COMPILABLE","COMPILED","IGNORED","ERR_COMPILATION","outputFileSync","filePath","data","mkdirSync","dirname","recursive","writeFileSync","cliOptions","babelOptions","write","src","base","relative","isCompilableExtension","extensions","withExtension","keepFileExtension","extname","outFileExtension","dest","getDest","res","compile","assign","sourceFileName","map","outputMap","sourceMaps","undefined","hasDataSourcemap","code","mapLoc","addSourceMappingUrl","file","basename","JSON","stringify","chmod","verbose","console","log","process","cwd","err","watch","error","filename","join","outDir","handleFile","written","copyFiles","copyIgnored","readFileSync","handle","filenameOrDir","existsSync","stat","statSync","isDirectory","count","files","readdir","includeDotfiles","compiledFiles","startTime","logSuccess","debounce","diff","hrtime","Math","round","enable","enableGlobbing","skipInitialBuild","deleteDirOnStart","deleteDir","filenames","quiet","flush","processing","getBase","length","absoluteBase","resolve","filenameToBaseMap","Map","absoluteFilename","absoluteFilenames","sep","get","absoluteFilenameOrDir","startsWith","set","forEach","startWatcher","onFilesChange","Promise","all","filter","Boolean"],"sources":["../../src/babel/dir.ts"],"sourcesContent":["import slash from \"slash\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nimport * as util from \"./util.ts\";\nimport * as watcher from \"./watcher.ts\";\nimport type { CmdOptions } from \"./options.ts\";\n\nconst FILE_TYPE = Object.freeze({\n  NON_COMPILABLE: \"NON_COMPILABLE\",\n  COMPILED: \"COMPILED\",\n  IGNORED: \"IGNORED\",\n  ERR_COMPILATION: \"ERR_COMPILATION\",\n} as const);\n\nfunction outputFileSync(filePath: string, data: string | Buffer): void {\n  fs.mkdirSync(path.dirname(filePath), { recursive: true });\n  fs.writeFileSync(filePath, data);\n}\n\nexport default async function ({\n  cliOptions,\n  babelOptions,\n}: CmdOptions): Promise<void> {\n  async function write(\n    src: string,\n    base: string,\n  ): Promise<keyof typeof FILE_TYPE> {\n    let relative = path.relative(base, src);\n\n    if (!util.isCompilableExtension(relative, cliOptions.extensions)) {\n      return FILE_TYPE.NON_COMPILABLE;\n    }\n\n    relative = util.withExtension(\n      relative,\n      cliOptions.keepFileExtension\n        ? path.extname(relative)\n        : cliOptions.outFileExtension,\n    );\n\n    const dest = getDest(relative, base);\n\n    try {\n      const res = await util.compile(src, {\n        ...babelOptions,\n        sourceFileName: slash(path.relative(dest + \"/..\", src)),\n      });\n\n      if (!res) return FILE_TYPE.IGNORED;\n\n      if (res.map) {\n        let outputMap: \"both\" | \"external\" | false = false;\n        if (babelOptions.sourceMaps && babelOptions.sourceMaps !== \"inline\") {\n          outputMap = \"external\";\n        } else if (babelOptions.sourceMaps == undefined) {\n          outputMap = util.hasDataSourcemap(res.code) ? \"external\" : \"both\";\n        }\n\n        if (outputMap) {\n          const mapLoc = dest + \".map\";\n          if (outputMap === \"external\") {\n            res.code = util.addSourceMappingUrl(res.code, mapLoc);\n          }\n          res.map.file = path.basename(relative);\n          outputFileSync(mapLoc, JSON.stringify(res.map));\n        }\n      }\n\n      outputFileSync(dest, res.code);\n      util.chmod(src, dest);\n\n      if (cliOptions.verbose) {\n        console.log(path.relative(process.cwd(), src) + \" -> \" + dest);\n      }\n\n      return FILE_TYPE.COMPILED;\n    } catch (err) {\n      if (cliOptions.watch) {\n        console.error(err);\n        return FILE_TYPE.ERR_COMPILATION;\n      }\n\n      throw err;\n    }\n  }\n\n  function getDest(filename: string, base: string): string {\n    if (cliOptions.relative) {\n      return path.join(base, cliOptions.outDir, filename);\n    }\n    return path.join(cliOptions.outDir, filename);\n  }\n\n  async function handleFile(src: string, base: string): Promise<boolean> {\n    const written = await write(src, base);\n\n    if (\n      (cliOptions.copyFiles && written === FILE_TYPE.NON_COMPILABLE) ||\n      (cliOptions.copyIgnored && written === FILE_TYPE.IGNORED)\n    ) {\n      const filename = path.relative(base, src);\n      const dest = getDest(filename, base);\n      outputFileSync(dest, fs.readFileSync(src));\n      util.chmod(src, dest);\n    }\n    return written === FILE_TYPE.COMPILED;\n  }\n\n  async function handle(filenameOrDir: string): Promise<number> {\n    if (!fs.existsSync(filenameOrDir)) return 0;\n\n    const stat = fs.statSync(filenameOrDir);\n\n    if (stat.isDirectory()) {\n      const dirname = filenameOrDir;\n\n      let count = 0;\n\n      const files = util.readdir(dirname, cliOptions.includeDotfiles);\n      for (const filename of files) {\n        const src = path.join(dirname, filename);\n\n        const written = await handleFile(src, dirname);\n        if (written) count += 1;\n      }\n\n      return count;\n    } else {\n      const filename = filenameOrDir;\n      const written = await handleFile(filename, path.dirname(filename));\n\n      return written ? 1 : 0;\n    }\n  }\n\n  let compiledFiles = 0;\n  let startTime: [number, number] | null = null;\n\n  const logSuccess = util.debounce(function () {\n    if (startTime === null) {\n      // This should never happen, but just in case it's better\n      // to ignore the log message rather than making @babel/cli crash.\n      return;\n    }\n\n    const diff = process.hrtime(startTime);\n\n    console.log(\n      `Successfully compiled ${compiledFiles} ${\n        compiledFiles !== 1 ? \"files\" : \"file\"\n      } with Babel (${diff[0] * 1e3 + Math.round(diff[1] / 1e6)}ms).`,\n    );\n    compiledFiles = 0;\n    startTime = null;\n  }, 100);\n\n  if (cliOptions.watch) watcher.enable({ enableGlobbing: true });\n\n  if (!cliOptions.skipInitialBuild) {\n    if (cliOptions.deleteDirOnStart) {\n      util.deleteDir(cliOptions.outDir);\n    }\n\n    fs.mkdirSync(cliOptions.outDir, { recursive: true });\n\n    startTime = process.hrtime();\n\n    for (const filename of cliOptions.filenames) {\n      // compiledFiles is just incremented without reading its value, so we\n      // don't risk race conditions.\n      // eslint-disable-next-line require-atomic-updates\n      compiledFiles += await handle(filename);\n    }\n\n    if (!cliOptions.quiet) {\n      logSuccess();\n      logSuccess.flush();\n    }\n  }\n\n  if (cliOptions.watch) {\n    // This, alongside with debounce, allows us to only log\n    // when we are sure that all the files have been compiled.\n    let processing = 0;\n    const { filenames } = cliOptions;\n    let getBase: (filename: string) => string | null;\n    if (filenames.length === 1) {\n      // fast path: If there is only one filenames, we know it must be the base\n      const base = filenames[0];\n      const absoluteBase = path.resolve(base);\n      getBase = filename => {\n        return filename === absoluteBase ? path.dirname(base) : base;\n      };\n    } else {\n      // A map from absolute compiled file path to its base, from which\n      // the output destination will be determined\n      const filenameToBaseMap: Map<string, string> = new Map(\n        filenames.map(filename => {\n          const absoluteFilename = path.resolve(filename);\n          return [absoluteFilename, path.dirname(filename)];\n        }),\n      );\n\n      const absoluteFilenames: Map<string, string> = new Map(\n        filenames.map(filename => {\n          const absoluteFilename = path.resolve(filename);\n          return [absoluteFilename, filename];\n        }),\n      );\n\n      const { sep } = path;\n      // determine base from the absolute file path\n      getBase = filename => {\n        const base = filenameToBaseMap.get(filename);\n        if (base !== undefined) {\n          return base;\n        }\n        for (const [absoluteFilenameOrDir, relative] of absoluteFilenames) {\n          if (filename.startsWith(absoluteFilenameOrDir + sep)) {\n            filenameToBaseMap.set(filename, relative);\n            return relative;\n          }\n        }\n        // Can't determine the base, probably external deps\n        return \"\";\n      };\n    }\n\n    filenames.forEach(filenameOrDir => {\n      watcher.watch(filenameOrDir);\n    });\n\n    watcher.startWatcher();\n\n    watcher.onFilesChange(async filenames => {\n      processing++;\n      if (startTime === null) startTime = process.hrtime();\n\n      try {\n        const written = await Promise.all(\n          filenames.map(filename => handleFile(filename, getBase(filename))),\n        );\n\n        compiledFiles += written.filter(Boolean).length;\n      } catch (err) {\n        console.error(err);\n      }\n\n      processing--;\n      if (processing === 0 && !cliOptions.quiet) logSuccess();\n    });\n  }\n}\n"],"mappings":"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"}