import slash from "slash";
import path from "path";
import fs from "fs";
import * as util from "./util.js";
import * as watcher from "./watcher.js";
const FILE_TYPE = Object.freeze({
  NON_COMPILABLE: "NON_COMPILABLE",
  COMPILED: "COMPILED",
  IGNORED: "IGNORED",
  ERR_COMPILATION: "ERR_COMPILATION"
});
function outputFileSync(filePath, data) {
  fs.mkdirSync(path.dirname(filePath), {
    recursive: true
  });
  fs.writeFileSync(filePath, data);
}
export default async function ({
  cliOptions,
  babelOptions
}) {
  async function write(src, base) {
    let relative = path.relative(base, src);
    if (!util.isCompilableExtension(relative, cliOptions.extensions)) {
      return FILE_TYPE.NON_COMPILABLE;
    }
    relative = util.withExtension(relative, cliOptions.keepFileExtension ? path.extname(relative) : cliOptions.outFileExtension);
    const dest = getDest(relative, base);
    try {
      const res = await util.compile(src, Object.assign({}, babelOptions, {
        sourceFileName: slash(path.relative(dest + "/..", src))
      }));
      if (!res) return FILE_TYPE.IGNORED;
      if (res.map) {
        let outputMap = false;
        if (babelOptions.sourceMaps && babelOptions.sourceMaps !== "inline") {
          outputMap = "external";
        } else if (babelOptions.sourceMaps == undefined) {
          outputMap = util.hasDataSourcemap(res.code) ? "external" : "both";
        }
        if (outputMap) {
          const mapLoc = dest + ".map";
          if (outputMap === "external") {
            res.code = util.addSourceMappingUrl(res.code, mapLoc);
          }
          res.map.file = path.basename(relative);
          outputFileSync(mapLoc, JSON.stringify(res.map));
        }
      }
      outputFileSync(dest, res.code);
      util.chmod(src, dest);
      if (cliOptions.verbose) {
        console.log(path.relative(process.cwd(), src) + " -> " + dest);
      }
      return FILE_TYPE.COMPILED;
    } catch (err) {
      if (cliOptions.watch) {
        console.error(err);
        return FILE_TYPE.ERR_COMPILATION;
      }
      throw err;
    }
  }
  function getDest(filename, base) {
    if (cliOptions.relative) {
      return path.join(base, cliOptions.outDir, filename);
    }
    return path.join(cliOptions.outDir, filename);
  }
  async function handleFile(src, base) {
    const written = await write(src, base);
    if (cliOptions.copyFiles && written === FILE_TYPE.NON_COMPILABLE || cliOptions.copyIgnored && written === FILE_TYPE.IGNORED) {
      const filename = path.relative(base, src);
      const dest = getDest(filename, base);
      outputFileSync(dest, fs.readFileSync(src));
      util.chmod(src, dest);
    }
    return written === FILE_TYPE.COMPILED;
  }
  async function handle(filenameOrDir) {
    if (!fs.existsSync(filenameOrDir)) return 0;
    const stat = fs.statSync(filenameOrDir);
    if (stat.isDirectory()) {
      const dirname = filenameOrDir;
      let count = 0;
      const files = util.readdir(dirname, cliOptions.includeDotfiles);
      for (const filename of files) {
        const src = path.join(dirname, filename);
        const written = await handleFile(src, dirname);
        if (written) count += 1;
      }
      return count;
    } else {
      const filename = filenameOrDir;
      const written = await handleFile(filename, path.dirname(filename));
      return written ? 1 : 0;
    }
  }
  let compiledFiles = 0;
  let startTime = null;
  const logSuccess = util.debounce(function () {
    if (startTime === null) {
      return;
    }
    const diff = process.hrtime(startTime);
    console.log(`Successfully compiled ${compiledFiles} ${compiledFiles !== 1 ? "files" : "file"} with Babel (${diff[0] * 1e3 + Math.round(diff[1] / 1e6)}ms).`);
    compiledFiles = 0;
    startTime = null;
  }, 100);
  if (cliOptions.watch) watcher.enable({
    enableGlobbing: true
  });
  if (!cliOptions.skipInitialBuild) {
    if (cliOptions.deleteDirOnStart) {
      util.deleteDir(cliOptions.outDir);
    }
    fs.mkdirSync(cliOptions.outDir, {
      recursive: true
    });
    startTime = process.hrtime();
    for (const filename of cliOptions.filenames) {
      compiledFiles += await handle(filename);
    }
    if (!cliOptions.quiet) {
      logSuccess();
      logSuccess.flush();
    }
  }
  if (cliOptions.watch) {
    let processing = 0;
    const {
      filenames
    } = cliOptions;
    let getBase;
    if (filenames.length === 1) {
      const base = filenames[0];
      const absoluteBase = path.resolve(base);
      getBase = filename => {
        return filename === absoluteBase ? path.dirname(base) : base;
      };
    } else {
      const filenameToBaseMap = new Map(filenames.map(filename => {
        const absoluteFilename = path.resolve(filename);
        return [absoluteFilename, path.dirname(filename)];
      }));
      const absoluteFilenames = new Map(filenames.map(filename => {
        const absoluteFilename = path.resolve(filename);
        return [absoluteFilename, filename];
      }));
      const {
        sep
      } = path;
      getBase = filename => {
        const base = filenameToBaseMap.get(filename);
        if (base !== undefined) {
          return base;
        }
        for (const [absoluteFilenameOrDir, relative] of absoluteFilenames) {
          if (filename.startsWith(absoluteFilenameOrDir + sep)) {
            filenameToBaseMap.set(filename, relative);
            return relative;
          }
        }
        return "";
      };
    }
    filenames.forEach(filenameOrDir => {
      watcher.watch(filenameOrDir);
    });
    watcher.startWatcher();
    watcher.onFilesChange(async filenames => {
      processing++;
      if (startTime === null) startTime = process.hrtime();
      try {
        const written = await Promise.all(filenames.map(filename => handleFile(filename, getBase(filename))));
        compiledFiles += written.filter(Boolean).length;
      } catch (err) {
        console.error(err);
      }
      processing--;
      if (processing === 0 && !cliOptions.quiet) logSuccess();
    });
  }
}

//# sourceMappingURL=dir.js.map
