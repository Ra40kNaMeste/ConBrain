{"version":3,"file":"index.js","sources":["../src/utils/shallowEqual.ts","../src/utils/deprecationWarning.ts","../src/validators/generated/index.ts","../src/validators/matchesPattern.ts","../src/validators/buildMatchMemberExpression.ts","../src/validators/react/isReactComponent.ts","../src/validators/react/isCompatTag.ts","../src/validators/isType.ts","../src/validators/isPlaceholderType.ts","../src/validators/is.ts","../src/validators/isValidIdentifier.ts","../src/constants/index.ts","../src/definitions/utils.ts","../src/definitions/core.ts","../src/definitions/flow.ts","../src/definitions/jsx.ts","../src/definitions/placeholders.ts","../src/definitions/misc.ts","../src/definitions/experimental.ts","../src/definitions/typescript.ts","../src/definitions/deprecated-aliases.ts","../src/definitions/index.ts","../src/validators/validate.ts","../src/builders/validateNode.ts","../src/builders/generated/index.ts","../src/utils/react/cleanJSXElementLiteralChild.ts","../src/builders/react/buildChildren.ts","../src/validators/isNode.ts","../src/asserts/assertNode.ts","../src/asserts/generated/index.ts","../src/builders/flow/createTypeAnnotationBasedOnTypeof.ts","../src/modifications/flow/removeTypeDuplicates.ts","../src/builders/flow/createFlowUnionType.ts","../src/modifications/typescript/removeTypeDuplicates.ts","../src/builders/typescript/createTSUnionType.ts","../src/builders/productions.ts","../src/clone/cloneNode.ts","../src/clone/clone.ts","../src/clone/cloneDeep.ts","../src/clone/cloneDeepWithoutLoc.ts","../src/clone/cloneWithoutLoc.ts","../src/comments/addComments.ts","../src/comments/addComment.ts","../src/utils/inherit.ts","../src/comments/inheritInnerComments.ts","../src/comments/inheritLeadingComments.ts","../src/comments/inheritTrailingComments.ts","../src/comments/inheritsComments.ts","../src/comments/removeComments.ts","../src/constants/generated/index.ts","../src/converters/toBlock.ts","../src/converters/ensureBlock.ts","../src/converters/toIdentifier.ts","../src/converters/toBindingIdentifierName.ts","../src/converters/toComputedKey.ts","../src/converters/toExpression.ts","../src/traverse/traverseFast.ts","../src/modifications/removeProperties.ts","../src/modifications/removePropertiesDeep.ts","../src/converters/toKeyAlias.ts","../src/converters/toStatement.ts","../src/converters/valueToNode.ts","../src/modifications/appendToMemberExpression.ts","../src/modifications/inherits.ts","../src/modifications/prependToMemberExpression.ts","../src/retrievers/getBindingIdentifiers.ts","../src/retrievers/getOuterBindingIdentifiers.ts","../src/traverse/traverse.ts","../src/validators/isBinding.ts","../src/validators/isLet.ts","../src/validators/isBlockScoped.ts","../src/validators/isImmutable.ts","../src/validators/isNodesEquivalent.ts","../src/validators/isReferenced.ts","../src/validators/isScope.ts","../src/validators/isSpecifierDefault.ts","../src/validators/isValidES3Identifier.ts","../src/validators/isVar.ts","../src/index.ts"],"sourcesContent":["export default function shallowEqual<T extends object>(\n  actual: object,\n  expected: T,\n): actual is T {\n  const keys = Object.keys(expected) as (keyof T)[];\n\n  for (const key of keys) {\n    if (\n      // @ts-expect-error maybe we should check whether key exists first\n      actual[key] !== expected[key]\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","const warnings = new Set();\n\nexport default function deprecationWarning(\n  oldName: string,\n  newName: string,\n  prefix: string = \"\",\n) {\n  if (warnings.has(oldName)) return;\n  warnings.add(oldName);\n\n  const { internal, trace } = captureShortStackTrace(1, 2);\n  if (internal) {\n    // If usage comes from an internal package, there is no point in warning because\n    // 1. The new version of the package will already use the new API\n    // 2. When the deprecation will become an error (in a future major version), users\n    //    will have to update every package anyway.\n    return;\n  }\n  console.warn(\n    `${prefix}\\`${oldName}\\` has been deprecated, please migrate to \\`${newName}\\`\\n${trace}`,\n  );\n}\n\nfunction captureShortStackTrace(skip: number, length: number) {\n  const { stackTraceLimit, prepareStackTrace } = Error;\n  let stackTrace: NodeJS.CallSite[];\n  // We add 1 to also take into account this function.\n  Error.stackTraceLimit = 1 + skip + length;\n  Error.prepareStackTrace = function (err, stack) {\n    stackTrace = stack;\n  };\n  new Error().stack;\n  Error.stackTraceLimit = stackTraceLimit;\n  Error.prepareStackTrace = prepareStackTrace;\n\n  if (!stackTrace) return { internal: false, trace: \"\" };\n\n  const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);\n  return {\n    internal: /[\\\\/]@babel[\\\\/]/.test(shortStackTrace[1].getFileName()),\n    trace: shortStackTrace.map(frame => `    at ${frame}`).join(\"\\n\"),\n  };\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/* eslint-disable no-fallthrough */\n\nimport shallowEqual from \"../../utils/shallowEqual.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\ntype Opts<Obj> = Partial<{\n  [Prop in keyof Obj]: Obj[Prop] extends t.Node\n    ? t.Node\n    : Obj[Prop] extends t.Node[]\n      ? t.Node[]\n      : Obj[Prop];\n}>;\n\nexport function isArrayExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayExpression> | null,\n): node is t.ArrayExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentExpression> | null,\n): node is t.AssignmentExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BinaryExpression> | null,\n): node is t.BinaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BinaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterpreterDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterpreterDirective> | null,\n): node is t.InterpreterDirective {\n  if (!node) return false;\n\n  if (node.type !== \"InterpreterDirective\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirective(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Directive> | null,\n): node is t.Directive {\n  if (!node) return false;\n\n  if (node.type !== \"Directive\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDirectiveLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DirectiveLiteral> | null,\n): node is t.DirectiveLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DirectiveLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockStatement> | null,\n): node is t.BlockStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BlockStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBreakStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BreakStatement> | null,\n): node is t.BreakStatement {\n  if (!node) return false;\n\n  if (node.type !== \"BreakStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CallExpression> | null,\n): node is t.CallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"CallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCatchClause(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CatchClause> | null,\n): node is t.CatchClause {\n  if (!node) return false;\n\n  if (node.type !== \"CatchClause\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditionalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ConditionalExpression> | null,\n): node is t.ConditionalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ConditionalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isContinueStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ContinueStatement> | null,\n): node is t.ContinueStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ContinueStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDebuggerStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DebuggerStatement> | null,\n): node is t.DebuggerStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DebuggerStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoWhileStatement> | null,\n): node is t.DoWhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"DoWhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyStatement> | null,\n): node is t.EmptyStatement {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionStatement> | null,\n): node is t.ExpressionStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ExpressionStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.File> | null,\n): node is t.File {\n  if (!node) return false;\n\n  if (node.type !== \"File\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForInStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForInStatement> | null,\n): node is t.ForInStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForInStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForStatement> | null,\n): node is t.ForStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionDeclaration> | null,\n): node is t.FunctionDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionExpression> | null,\n): node is t.FunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Identifier> | null,\n): node is t.Identifier {\n  if (!node) return false;\n\n  if (node.type !== \"Identifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IfStatement> | null,\n): node is t.IfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"IfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLabeledStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LabeledStatement> | null,\n): node is t.LabeledStatement {\n  if (!node) return false;\n\n  if (node.type !== \"LabeledStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteral> | null,\n): node is t.StringLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumericLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumericLiteral> | null,\n): node is t.NumericLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NumericLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteral> | null,\n): node is t.NullLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteral> | null,\n): node is t.BooleanLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRegExpLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegExpLiteral> | null,\n): node is t.RegExpLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"RegExpLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLogicalExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LogicalExpression> | null,\n): node is t.LogicalExpression {\n  if (!node) return false;\n\n  if (node.type !== \"LogicalExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MemberExpression> | null,\n): node is t.MemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"MemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNewExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NewExpression> | null,\n): node is t.NewExpression {\n  if (!node) return false;\n\n  if (node.type !== \"NewExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProgram(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Program> | null,\n): node is t.Program {\n  if (!node) return false;\n\n  if (node.type !== \"Program\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectExpression> | null,\n): node is t.ObjectExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMethod> | null,\n): node is t.ObjectMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectProperty> | null,\n): node is t.ObjectProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRestElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestElement> | null,\n): node is t.RestElement {\n  if (!node) return false;\n\n  if (node.type !== \"RestElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isReturnStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ReturnStatement> | null,\n): node is t.ReturnStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ReturnStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSequenceExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SequenceExpression> | null,\n): node is t.SequenceExpression {\n  if (!node) return false;\n\n  if (node.type !== \"SequenceExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isParenthesizedExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ParenthesizedExpression> | null,\n): node is t.ParenthesizedExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ParenthesizedExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchCase(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchCase> | null,\n): node is t.SwitchCase {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchCase\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSwitchStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SwitchStatement> | null,\n): node is t.SwitchStatement {\n  if (!node) return false;\n\n  if (node.type !== \"SwitchStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisExpression> | null,\n): node is t.ThisExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ThisExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThrowStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThrowStatement> | null,\n): node is t.ThrowStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ThrowStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTryStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TryStatement> | null,\n): node is t.TryStatement {\n  if (!node) return false;\n\n  if (node.type !== \"TryStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryExpression> | null,\n): node is t.UnaryExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UnaryExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUpdateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UpdateExpression> | null,\n): node is t.UpdateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"UpdateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclaration> | null,\n): node is t.VariableDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariableDeclarator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VariableDeclarator> | null,\n): node is t.VariableDeclarator {\n  if (!node) return false;\n\n  if (node.type !== \"VariableDeclarator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhileStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WhileStatement> | null,\n): node is t.WhileStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WhileStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWithStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.WithStatement> | null,\n): node is t.WithStatement {\n  if (!node) return false;\n\n  if (node.type !== \"WithStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAssignmentPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AssignmentPattern> | null,\n): node is t.AssignmentPattern {\n  if (!node) return false;\n\n  if (node.type !== \"AssignmentPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayPattern> | null,\n): node is t.ArrayPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrowFunctionExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrowFunctionExpression> | null,\n): node is t.ArrowFunctionExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ArrowFunctionExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassBody> | null,\n): node is t.ClassBody {\n  if (!node) return false;\n\n  if (node.type !== \"ClassBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassExpression> | null,\n): node is t.ClassExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ClassExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassDeclaration> | null,\n): node is t.ClassDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ClassDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportAllDeclaration> | null,\n): node is t.ExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultDeclaration> | null,\n): node is t.ExportDefaultDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamedDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamedDeclaration> | null,\n): node is t.ExportNamedDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamedDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportSpecifier> | null,\n): node is t.ExportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForOfStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForOfStatement> | null,\n): node is t.ForOfStatement {\n  if (!node) return false;\n\n  if (node.type !== \"ForOfStatement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDeclaration> | null,\n): node is t.ImportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportDefaultSpecifier> | null,\n): node is t.ImportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportNamespaceSpecifier> | null,\n): node is t.ImportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportSpecifier> | null,\n): node is t.ImportSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ImportSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportExpression> | null,\n): node is t.ImportExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ImportExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMetaProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MetaProperty> | null,\n): node is t.MetaProperty {\n  if (!node) return false;\n\n  if (node.type !== \"MetaProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassMethod> | null,\n): node is t.ClassMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectPattern> | null,\n): node is t.ObjectPattern {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectPattern\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSpreadElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadElement> | null,\n): node is t.SpreadElement {\n  if (!node) return false;\n\n  if (node.type !== \"SpreadElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSuper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Super> | null,\n): node is t.Super {\n  if (!node) return false;\n\n  if (node.type !== \"Super\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTaggedTemplateExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TaggedTemplateExpression> | null,\n): node is t.TaggedTemplateExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TaggedTemplateExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateElement> | null,\n): node is t.TemplateElement {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTemplateLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TemplateLiteral> | null,\n): node is t.TemplateLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TemplateLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isYieldExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.YieldExpression> | null,\n): node is t.YieldExpression {\n  if (!node) return false;\n\n  if (node.type !== \"YieldExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAwaitExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AwaitExpression> | null,\n): node is t.AwaitExpression {\n  if (!node) return false;\n\n  if (node.type !== \"AwaitExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImport(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Import> | null,\n): node is t.Import {\n  if (!node) return false;\n\n  if (node.type !== \"Import\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBigIntLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BigIntLiteral> | null,\n): node is t.BigIntLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"BigIntLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportNamespaceSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportNamespaceSpecifier> | null,\n): node is t.ExportNamespaceSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportNamespaceSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalMemberExpression> | null,\n): node is t.OptionalMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalCallExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalCallExpression> | null,\n): node is t.OptionalCallExpression {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalCallExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassProperty> | null,\n): node is t.ClassProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassAccessorProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassAccessorProperty> | null,\n): node is t.ClassAccessorProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassAccessorProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateProperty> | null,\n): node is t.ClassPrivateProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassPrivateMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassPrivateMethod> | null,\n): node is t.ClassPrivateMethod {\n  if (!node) return false;\n\n  if (node.type !== \"ClassPrivateMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivateName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PrivateName> | null,\n): node is t.PrivateName {\n  if (!node) return false;\n\n  if (node.type !== \"PrivateName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStaticBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StaticBlock> | null,\n): node is t.StaticBlock {\n  if (!node) return false;\n\n  if (node.type !== \"StaticBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAnyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.AnyTypeAnnotation> | null,\n): node is t.AnyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"AnyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArrayTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArrayTypeAnnotation> | null,\n): node is t.ArrayTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ArrayTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanTypeAnnotation> | null,\n): node is t.BooleanTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBooleanLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BooleanLiteralTypeAnnotation> | null,\n): node is t.BooleanLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"BooleanLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullLiteralTypeAnnotation> | null,\n): node is t.NullLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClassImplements(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ClassImplements> | null,\n): node is t.ClassImplements {\n  if (!node) return false;\n\n  if (node.type !== \"ClassImplements\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareClass> | null,\n): node is t.DeclareClass {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareClass\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareFunction> | null,\n): node is t.DeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareInterface(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareInterface> | null,\n): node is t.DeclareInterface {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareInterface\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModule(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModule> | null,\n): node is t.DeclareModule {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModule\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareModuleExports(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareModuleExports> | null,\n): node is t.DeclareModuleExports {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareModuleExports\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareTypeAlias> | null,\n): node is t.DeclareTypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareTypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareOpaqueType> | null,\n): node is t.DeclareOpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareOpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareVariable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareVariable> | null,\n): node is t.DeclareVariable {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareVariable\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportDeclaration> | null,\n): node is t.DeclareExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclareExportAllDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclareExportAllDeclaration> | null,\n): node is t.DeclareExportAllDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"DeclareExportAllDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DeclaredPredicate> | null,\n): node is t.DeclaredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"DeclaredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExistsTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExistsTypeAnnotation> | null,\n): node is t.ExistsTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ExistsTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeAnnotation> | null,\n): node is t.FunctionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionTypeParam(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionTypeParam> | null,\n): node is t.FunctionTypeParam {\n  if (!node) return false;\n\n  if (node.type !== \"FunctionTypeParam\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isGenericTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.GenericTypeAnnotation> | null,\n): node is t.GenericTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"GenericTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInferredPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InferredPredicate> | null,\n): node is t.InferredPredicate {\n  if (!node) return false;\n\n  if (node.type !== \"InferredPredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceExtends(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceExtends> | null,\n): node is t.InterfaceExtends {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceExtends\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceDeclaration> | null,\n): node is t.InterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isInterfaceTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.InterfaceTypeAnnotation> | null,\n): node is t.InterfaceTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"InterfaceTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIntersectionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IntersectionTypeAnnotation> | null,\n): node is t.IntersectionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"IntersectionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMixedTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.MixedTypeAnnotation> | null,\n): node is t.MixedTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"MixedTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEmptyTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EmptyTypeAnnotation> | null,\n): node is t.EmptyTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"EmptyTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNullableTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NullableTypeAnnotation> | null,\n): node is t.NullableTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NullableTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteralTypeAnnotation> | null,\n): node is t.NumberLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNumberTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberTypeAnnotation> | null,\n): node is t.NumberTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"NumberTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeAnnotation> | null,\n): node is t.ObjectTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeInternalSlot(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeInternalSlot> | null,\n): node is t.ObjectTypeInternalSlot {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeInternalSlot\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeCallProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeCallProperty> | null,\n): node is t.ObjectTypeCallProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeCallProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeIndexer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeIndexer> | null,\n): node is t.ObjectTypeIndexer {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeIndexer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeProperty> | null,\n): node is t.ObjectTypeProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectTypeSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectTypeSpreadProperty> | null,\n): node is t.ObjectTypeSpreadProperty {\n  if (!node) return false;\n\n  if (node.type !== \"ObjectTypeSpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOpaqueType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OpaqueType> | null,\n): node is t.OpaqueType {\n  if (!node) return false;\n\n  if (node.type !== \"OpaqueType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isQualifiedTypeIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.QualifiedTypeIdentifier> | null,\n): node is t.QualifiedTypeIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"QualifiedTypeIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringLiteralTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringLiteralTypeAnnotation> | null,\n): node is t.StringLiteralTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringLiteralTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStringTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.StringTypeAnnotation> | null,\n): node is t.StringTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"StringTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isSymbolTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SymbolTypeAnnotation> | null,\n): node is t.SymbolTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"SymbolTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isThisTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ThisTypeAnnotation> | null,\n): node is t.ThisTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"ThisTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleTypeAnnotation> | null,\n): node is t.TupleTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TupleTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeofTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeofTypeAnnotation> | null,\n): node is t.TypeofTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeofTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAlias(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAlias> | null,\n): node is t.TypeAlias {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAlias\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeAnnotation> | null,\n): node is t.TypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeCastExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeCastExpression> | null,\n): node is t.TypeCastExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TypeCastExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameter> | null,\n): node is t.TypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterDeclaration> | null,\n): node is t.TypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeParameterInstantiation> | null,\n): node is t.TypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnionTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnionTypeAnnotation> | null,\n): node is t.UnionTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"UnionTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVariance(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Variance> | null,\n): node is t.Variance {\n  if (!node) return false;\n\n  if (node.type !== \"Variance\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isVoidTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.VoidTypeAnnotation> | null,\n): node is t.VoidTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"VoidTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDeclaration> | null,\n): node is t.EnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanBody> | null,\n): node is t.EnumBooleanBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberBody> | null,\n): node is t.EnumNumberBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringBody> | null,\n): node is t.EnumStringBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumSymbolBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumSymbolBody> | null,\n): node is t.EnumSymbolBody {\n  if (!node) return false;\n\n  if (node.type !== \"EnumSymbolBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBooleanMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBooleanMember> | null,\n): node is t.EnumBooleanMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumBooleanMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumNumberMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumNumberMember> | null,\n): node is t.EnumNumberMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumNumberMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumStringMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumStringMember> | null,\n): node is t.EnumStringMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumStringMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumDefaultedMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumDefaultedMember> | null,\n): node is t.EnumDefaultedMember {\n  if (!node) return false;\n\n  if (node.type !== \"EnumDefaultedMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.IndexedAccessType> | null,\n): node is t.IndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"IndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isOptionalIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.OptionalIndexedAccessType> | null,\n): node is t.OptionalIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"OptionalIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXAttribute> | null,\n): node is t.JSXAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingElement> | null,\n): node is t.JSXClosingElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXElement> | null,\n): node is t.JSXElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXEmptyExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXEmptyExpression> | null,\n): node is t.JSXEmptyExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXEmptyExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXExpressionContainer(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXExpressionContainer> | null,\n): node is t.JSXExpressionContainer {\n  if (!node) return false;\n\n  if (node.type !== \"JSXExpressionContainer\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadChild(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadChild> | null,\n): node is t.JSXSpreadChild {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadChild\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXIdentifier> | null,\n): node is t.JSXIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"JSXIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXMemberExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXMemberExpression> | null,\n): node is t.JSXMemberExpression {\n  if (!node) return false;\n\n  if (node.type !== \"JSXMemberExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXNamespacedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXNamespacedName> | null,\n): node is t.JSXNamespacedName {\n  if (!node) return false;\n\n  if (node.type !== \"JSXNamespacedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningElement> | null,\n): node is t.JSXOpeningElement {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningElement\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXSpreadAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXSpreadAttribute> | null,\n): node is t.JSXSpreadAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"JSXSpreadAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXText(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXText> | null,\n): node is t.JSXText {\n  if (!node) return false;\n\n  if (node.type !== \"JSXText\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXFragment> | null,\n): node is t.JSXFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXOpeningFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXOpeningFragment> | null,\n): node is t.JSXOpeningFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXOpeningFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSXClosingFragment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSXClosingFragment> | null,\n): node is t.JSXClosingFragment {\n  if (!node) return false;\n\n  if (node.type !== \"JSXClosingFragment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isNoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Noop> | null,\n): node is t.Noop {\n  if (!node) return false;\n\n  if (node.type !== \"Noop\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Placeholder> | null,\n): node is t.Placeholder {\n  if (!node) return false;\n\n  if (node.type !== \"Placeholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isV8IntrinsicIdentifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.V8IntrinsicIdentifier> | null,\n): node is t.V8IntrinsicIdentifier {\n  if (!node) return false;\n\n  if (node.type !== \"V8IntrinsicIdentifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isArgumentPlaceholder(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ArgumentPlaceholder> | null,\n): node is t.ArgumentPlaceholder {\n  if (!node) return false;\n\n  if (node.type !== \"ArgumentPlaceholder\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBindExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BindExpression> | null,\n): node is t.BindExpression {\n  if (!node) return false;\n\n  if (node.type !== \"BindExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportAttribute(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportAttribute> | null,\n): node is t.ImportAttribute {\n  if (!node) return false;\n\n  if (node.type !== \"ImportAttribute\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecorator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Decorator> | null,\n): node is t.Decorator {\n  if (!node) return false;\n\n  if (node.type !== \"Decorator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDoExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DoExpression> | null,\n): node is t.DoExpression {\n  if (!node) return false;\n\n  if (node.type !== \"DoExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDefaultSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDefaultSpecifier> | null,\n): node is t.ExportDefaultSpecifier {\n  if (!node) return false;\n\n  if (node.type !== \"ExportDefaultSpecifier\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isRecordExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RecordExpression> | null,\n): node is t.RecordExpression {\n  if (!node) return false;\n\n  if (node.type !== \"RecordExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTupleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TupleExpression> | null,\n): node is t.TupleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TupleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDecimalLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.DecimalLiteral> | null,\n): node is t.DecimalLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"DecimalLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleExpression> | null,\n): node is t.ModuleExpression {\n  if (!node) return false;\n\n  if (node.type !== \"ModuleExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TopicReference> | null,\n): node is t.TopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"TopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineTopicExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineTopicExpression> | null,\n): node is t.PipelineTopicExpression {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineTopicExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelineBareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelineBareFunction> | null,\n): node is t.PipelineBareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"PipelineBareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPipelinePrimaryTopicReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PipelinePrimaryTopicReference> | null,\n): node is t.PipelinePrimaryTopicReference {\n  if (!node) return false;\n\n  if (node.type !== \"PipelinePrimaryTopicReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParameterProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParameterProperty> | null,\n): node is t.TSParameterProperty {\n  if (!node) return false;\n\n  if (node.type !== \"TSParameterProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareFunction> | null,\n): node is t.TSDeclareFunction {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareFunction\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSDeclareMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSDeclareMethod> | null,\n): node is t.TSDeclareMethod {\n  if (!node) return false;\n\n  if (node.type !== \"TSDeclareMethod\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSQualifiedName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSQualifiedName> | null,\n): node is t.TSQualifiedName {\n  if (!node) return false;\n\n  if (node.type !== \"TSQualifiedName\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSCallSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSCallSignatureDeclaration> | null,\n): node is t.TSCallSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSCallSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructSignatureDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructSignatureDeclaration> | null,\n): node is t.TSConstructSignatureDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructSignatureDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSPropertySignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSPropertySignature> | null,\n): node is t.TSPropertySignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSPropertySignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMethodSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMethodSignature> | null,\n): node is t.TSMethodSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSMethodSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexSignature(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexSignature> | null,\n): node is t.TSIndexSignature {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexSignature\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAnyKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAnyKeyword> | null,\n): node is t.TSAnyKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSAnyKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBooleanKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBooleanKeyword> | null,\n): node is t.TSBooleanKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBooleanKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBigIntKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBigIntKeyword> | null,\n): node is t.TSBigIntKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSBigIntKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntrinsicKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntrinsicKeyword> | null,\n): node is t.TSIntrinsicKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntrinsicKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNeverKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNeverKeyword> | null,\n): node is t.TSNeverKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNeverKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNullKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNullKeyword> | null,\n): node is t.TSNullKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNullKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNumberKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNumberKeyword> | null,\n): node is t.TSNumberKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSNumberKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSObjectKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSObjectKeyword> | null,\n): node is t.TSObjectKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSObjectKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSStringKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSStringKeyword> | null,\n): node is t.TSStringKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSStringKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSymbolKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSymbolKeyword> | null,\n): node is t.TSSymbolKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSSymbolKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUndefinedKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUndefinedKeyword> | null,\n): node is t.TSUndefinedKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUndefinedKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnknownKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnknownKeyword> | null,\n): node is t.TSUnknownKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnknownKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSVoidKeyword(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSVoidKeyword> | null,\n): node is t.TSVoidKeyword {\n  if (!node) return false;\n\n  if (node.type !== \"TSVoidKeyword\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSThisType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSThisType> | null,\n): node is t.TSThisType {\n  if (!node) return false;\n\n  if (node.type !== \"TSThisType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSFunctionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSFunctionType> | null,\n): node is t.TSFunctionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSFunctionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConstructorType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConstructorType> | null,\n): node is t.TSConstructorType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConstructorType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeReference> | null,\n): node is t.TSTypeReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypePredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypePredicate> | null,\n): node is t.TSTypePredicate {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypePredicate\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeQuery(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeQuery> | null,\n): node is t.TSTypeQuery {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeQuery\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeLiteral> | null,\n): node is t.TSTypeLiteral {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSArrayType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSArrayType> | null,\n): node is t.TSArrayType {\n  if (!node) return false;\n\n  if (node.type !== \"TSArrayType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTupleType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTupleType> | null,\n): node is t.TSTupleType {\n  if (!node) return false;\n\n  if (node.type !== \"TSTupleType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSOptionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSOptionalType> | null,\n): node is t.TSOptionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSOptionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSRestType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSRestType> | null,\n): node is t.TSRestType {\n  if (!node) return false;\n\n  if (node.type !== \"TSRestType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamedTupleMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamedTupleMember> | null,\n): node is t.TSNamedTupleMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamedTupleMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSUnionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSUnionType> | null,\n): node is t.TSUnionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSUnionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIntersectionType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIntersectionType> | null,\n): node is t.TSIntersectionType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIntersectionType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSConditionalType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSConditionalType> | null,\n): node is t.TSConditionalType {\n  if (!node) return false;\n\n  if (node.type !== \"TSConditionalType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInferType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInferType> | null,\n): node is t.TSInferType {\n  if (!node) return false;\n\n  if (node.type !== \"TSInferType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSParenthesizedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSParenthesizedType> | null,\n): node is t.TSParenthesizedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSParenthesizedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeOperator(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeOperator> | null,\n): node is t.TSTypeOperator {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeOperator\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSIndexedAccessType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSIndexedAccessType> | null,\n): node is t.TSIndexedAccessType {\n  if (!node) return false;\n\n  if (node.type !== \"TSIndexedAccessType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSMappedType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSMappedType> | null,\n): node is t.TSMappedType {\n  if (!node) return false;\n\n  if (node.type !== \"TSMappedType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSLiteralType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSLiteralType> | null,\n): node is t.TSLiteralType {\n  if (!node) return false;\n\n  if (node.type !== \"TSLiteralType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExpressionWithTypeArguments(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExpressionWithTypeArguments> | null,\n): node is t.TSExpressionWithTypeArguments {\n  if (!node) return false;\n\n  if (node.type !== \"TSExpressionWithTypeArguments\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceDeclaration> | null,\n): node is t.TSInterfaceDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInterfaceBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInterfaceBody> | null,\n): node is t.TSInterfaceBody {\n  if (!node) return false;\n\n  if (node.type !== \"TSInterfaceBody\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAliasDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAliasDeclaration> | null,\n): node is t.TSTypeAliasDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAliasDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSInstantiationExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSInstantiationExpression> | null,\n): node is t.TSInstantiationExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSInstantiationExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSAsExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSAsExpression> | null,\n): node is t.TSAsExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSAsExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSSatisfiesExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSSatisfiesExpression> | null,\n): node is t.TSSatisfiesExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSSatisfiesExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAssertion(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAssertion> | null,\n): node is t.TSTypeAssertion {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAssertion\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumDeclaration> | null,\n): node is t.TSEnumDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEnumMember> | null,\n): node is t.TSEnumMember {\n  if (!node) return false;\n\n  if (node.type !== \"TSEnumMember\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleDeclaration> | null,\n): node is t.TSModuleDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSModuleBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSModuleBlock> | null,\n): node is t.TSModuleBlock {\n  if (!node) return false;\n\n  if (node.type !== \"TSModuleBlock\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportType> | null,\n): node is t.TSImportType {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportType\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSImportEqualsDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSImportEqualsDeclaration> | null,\n): node is t.TSImportEqualsDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSImportEqualsDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExternalModuleReference(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExternalModuleReference> | null,\n): node is t.TSExternalModuleReference {\n  if (!node) return false;\n\n  if (node.type !== \"TSExternalModuleReference\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNonNullExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNonNullExpression> | null,\n): node is t.TSNonNullExpression {\n  if (!node) return false;\n\n  if (node.type !== \"TSNonNullExpression\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSExportAssignment(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSExportAssignment> | null,\n): node is t.TSExportAssignment {\n  if (!node) return false;\n\n  if (node.type !== \"TSExportAssignment\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSNamespaceExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSNamespaceExportDeclaration> | null,\n): node is t.TSNamespaceExportDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSNamespaceExportDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeAnnotation> | null,\n): node is t.TSTypeAnnotation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeAnnotation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterInstantiation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterInstantiation> | null,\n): node is t.TSTypeParameterInstantiation {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterInstantiation\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameterDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameterDeclaration> | null,\n): node is t.TSTypeParameterDeclaration {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameterDeclaration\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeParameter(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeParameter> | null,\n): node is t.TSTypeParameter {\n  if (!node) return false;\n\n  if (node.type !== \"TSTypeParameter\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStandardized(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Standardized> | null,\n): node is t.Standardized {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"InterpreterDirective\":\n    case \"Directive\":\n    case \"DirectiveLiteral\":\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"CallExpression\":\n    case \"CatchClause\":\n    case \"ConditionalExpression\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"File\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"Program\":\n    case \"ObjectExpression\":\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"RestElement\":\n    case \"ReturnStatement\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"SwitchCase\":\n    case \"SwitchStatement\":\n    case \"ThisExpression\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"VariableDeclaration\":\n    case \"VariableDeclarator\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassBody\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ExportSpecifier\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"ClassMethod\":\n    case \"ObjectPattern\":\n    case \"SpreadElement\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateElement\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"ExportNamespaceSpecifier\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n    case \"StaticBlock\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Identifier\":\n        case \"StringLiteral\":\n        case \"BlockStatement\":\n        case \"ClassBody\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpression(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Expression> | null,\n): node is t.Expression {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ArrayExpression\":\n    case \"AssignmentExpression\":\n    case \"BinaryExpression\":\n    case \"CallExpression\":\n    case \"ConditionalExpression\":\n    case \"FunctionExpression\":\n    case \"Identifier\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"LogicalExpression\":\n    case \"MemberExpression\":\n    case \"NewExpression\":\n    case \"ObjectExpression\":\n    case \"SequenceExpression\":\n    case \"ParenthesizedExpression\":\n    case \"ThisExpression\":\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ImportExpression\":\n    case \"MetaProperty\":\n    case \"Super\":\n    case \"TaggedTemplateExpression\":\n    case \"TemplateLiteral\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n    case \"Import\":\n    case \"BigIntLiteral\":\n    case \"OptionalMemberExpression\":\n    case \"OptionalCallExpression\":\n    case \"TypeCastExpression\":\n    case \"JSXElement\":\n    case \"JSXFragment\":\n    case \"BindExpression\":\n    case \"DoExpression\":\n    case \"RecordExpression\":\n    case \"TupleExpression\":\n    case \"DecimalLiteral\":\n    case \"ModuleExpression\":\n    case \"TopicReference\":\n    case \"PipelineTopicExpression\":\n    case \"PipelineBareFunction\":\n    case \"PipelinePrimaryTopicReference\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Expression\":\n        case \"Identifier\":\n        case \"StringLiteral\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBinary(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Binary> | null,\n): node is t.Binary {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BinaryExpression\":\n    case \"LogicalExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isScopable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Scopable> | null,\n): node is t.Scopable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlockParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.BlockParent> | null,\n): node is t.BlockParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"CatchClause\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"Program\":\n    case \"ObjectMethod\":\n    case \"SwitchStatement\":\n    case \"WhileStatement\":\n    case \"ArrowFunctionExpression\":\n    case \"ForOfStatement\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isBlock(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Block> | null,\n): node is t.Block {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"Program\":\n    case \"TSModuleBlock\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"BlockStatement\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Statement> | null,\n): node is t.Statement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BlockStatement\":\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"DebuggerStatement\":\n    case \"DoWhileStatement\":\n    case \"EmptyStatement\":\n    case \"ExpressionStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"FunctionDeclaration\":\n    case \"IfStatement\":\n    case \"LabeledStatement\":\n    case \"ReturnStatement\":\n    case \"SwitchStatement\":\n    case \"ThrowStatement\":\n    case \"TryStatement\":\n    case \"VariableDeclaration\":\n    case \"WhileStatement\":\n    case \"WithStatement\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ForOfStatement\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Statement\":\n        case \"Declaration\":\n        case \"BlockStatement\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTerminatorless(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Terminatorless> | null,\n): node is t.Terminatorless {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n    case \"YieldExpression\":\n    case \"AwaitExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isCompletionStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.CompletionStatement> | null,\n): node is t.CompletionStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n    case \"ReturnStatement\":\n    case \"ThrowStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isConditional(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Conditional> | null,\n): node is t.Conditional {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLoop(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Loop> | null,\n): node is t.Loop {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"WhileStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isWhile(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.While> | null,\n): node is t.While {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DoWhileStatement\":\n    case \"WhileStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExpressionWrapper(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExpressionWrapper> | null,\n): node is t.ExpressionWrapper {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExpressionStatement\":\n    case \"ParenthesizedExpression\":\n    case \"TypeCastExpression\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.For> | null,\n): node is t.For {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isForXStatement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ForXStatement> | null,\n): node is t.ForXStatement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunction(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Function> | null,\n): node is t.Function {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFunctionParent(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FunctionParent> | null,\n): node is t.FunctionParent {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"ObjectMethod\":\n    case \"ArrowFunctionExpression\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"StaticBlock\":\n    case \"TSModuleBlock\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPureish(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pureish> | null,\n): node is t.Pureish {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"ArrowFunctionExpression\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Declaration> | null,\n): node is t.Declaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"FunctionDeclaration\":\n    case \"VariableDeclaration\":\n    case \"ClassDeclaration\":\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n    case \"EnumDeclaration\":\n    case \"TSDeclareFunction\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSEnumDeclaration\":\n    case \"TSModuleDeclaration\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Declaration\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPatternLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.PatternLike> | null,\n): node is t.PatternLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLVal(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.LVal> | null,\n): node is t.LVal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n    case \"RestElement\":\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n    case \"TSParameterProperty\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSNonNullExpression\":\n      break;\n    case \"Placeholder\":\n      switch (node.expectedNode) {\n        case \"Pattern\":\n        case \"Identifier\":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSEntityName(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSEntityName> | null,\n): node is t.TSEntityName {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Identifier\":\n    case \"TSQualifiedName\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Identifier\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Literal> | null,\n): node is t.Literal {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"RegExpLiteral\":\n    case \"TemplateLiteral\":\n    case \"BigIntLiteral\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImmutable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Immutable> | null,\n): node is t.Immutable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n    case \"NullLiteral\":\n    case \"BooleanLiteral\":\n    case \"BigIntLiteral\":\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXOpeningElement\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n    case \"DecimalLiteral\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"StringLiteral\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUserWhitespacable(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UserWhitespacable> | null,\n): node is t.UserWhitespacable {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMethod(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Method> | null,\n): node is t.Method {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isObjectMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ObjectMember> | null,\n): node is t.ObjectMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectMethod\":\n    case \"ObjectProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Property> | null,\n): node is t.Property {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ObjectProperty\":\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n    case \"ClassPrivateProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isUnaryLike(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.UnaryLike> | null,\n): node is t.UnaryLike {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"UnaryExpression\":\n    case \"SpreadElement\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPattern(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Pattern> | null,\n): node is t.Pattern {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AssignmentPattern\":\n    case \"ArrayPattern\":\n    case \"ObjectPattern\":\n      break;\n    case \"Placeholder\":\n      if (node.expectedNode === \"Pattern\") break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isClass(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Class> | null,\n): node is t.Class {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isImportOrExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ImportOrExportDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n    case \"ImportDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isExportDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ExportDeclaration> | null,\n): node is t.ExportDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportAllDeclaration\":\n    case \"ExportDefaultDeclaration\":\n    case \"ExportNamedDeclaration\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isModuleSpecifier(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleSpecifier> | null,\n): node is t.ModuleSpecifier {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ExportSpecifier\":\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isAccessor(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Accessor> | null,\n): node is t.Accessor {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassAccessorProperty\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isPrivate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Private> | null,\n): node is t.Private {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n    case \"PrivateName\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlow(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Flow> | null,\n): node is t.Flow {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ClassImplements\":\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"DeclaredPredicate\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"FunctionTypeParam\":\n    case \"GenericTypeAnnotation\":\n    case \"InferredPredicate\":\n    case \"InterfaceExtends\":\n    case \"InterfaceDeclaration\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"ObjectTypeInternalSlot\":\n    case \"ObjectTypeCallProperty\":\n    case \"ObjectTypeIndexer\":\n    case \"ObjectTypeProperty\":\n    case \"ObjectTypeSpreadProperty\":\n    case \"OpaqueType\":\n    case \"QualifiedTypeIdentifier\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"TypeAlias\":\n    case \"TypeAnnotation\":\n    case \"TypeCastExpression\":\n    case \"TypeParameter\":\n    case \"TypeParameterDeclaration\":\n    case \"TypeParameterInstantiation\":\n    case \"UnionTypeAnnotation\":\n    case \"Variance\":\n    case \"VoidTypeAnnotation\":\n    case \"EnumDeclaration\":\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowType> | null,\n): node is t.FlowType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"ArrayTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"BooleanLiteralTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"ExistsTypeAnnotation\":\n    case \"FunctionTypeAnnotation\":\n    case \"GenericTypeAnnotation\":\n    case \"InterfaceTypeAnnotation\":\n    case \"IntersectionTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NullableTypeAnnotation\":\n    case \"NumberLiteralTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"ObjectTypeAnnotation\":\n    case \"StringLiteralTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"TupleTypeAnnotation\":\n    case \"TypeofTypeAnnotation\":\n    case \"UnionTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n    case \"IndexedAccessType\":\n    case \"OptionalIndexedAccessType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowBaseAnnotation(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowBaseAnnotation> | null,\n): node is t.FlowBaseAnnotation {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"AnyTypeAnnotation\":\n    case \"BooleanTypeAnnotation\":\n    case \"NullLiteralTypeAnnotation\":\n    case \"MixedTypeAnnotation\":\n    case \"EmptyTypeAnnotation\":\n    case \"NumberTypeAnnotation\":\n    case \"StringTypeAnnotation\":\n    case \"SymbolTypeAnnotation\":\n    case \"ThisTypeAnnotation\":\n    case \"VoidTypeAnnotation\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowDeclaration> | null,\n): node is t.FlowDeclaration {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclareClass\":\n    case \"DeclareFunction\":\n    case \"DeclareInterface\":\n    case \"DeclareModule\":\n    case \"DeclareModuleExports\":\n    case \"DeclareTypeAlias\":\n    case \"DeclareOpaqueType\":\n    case \"DeclareVariable\":\n    case \"DeclareExportDeclaration\":\n    case \"DeclareExportAllDeclaration\":\n    case \"InterfaceDeclaration\":\n    case \"OpaqueType\":\n    case \"TypeAlias\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isFlowPredicate(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.FlowPredicate> | null,\n): node is t.FlowPredicate {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"DeclaredPredicate\":\n    case \"InferredPredicate\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumBody(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumBody> | null,\n): node is t.EnumBody {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanBody\":\n    case \"EnumNumberBody\":\n    case \"EnumStringBody\":\n    case \"EnumSymbolBody\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isEnumMember(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.EnumMember> | null,\n): node is t.EnumMember {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"EnumBooleanMember\":\n    case \"EnumNumberMember\":\n    case \"EnumStringMember\":\n    case \"EnumDefaultedMember\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isJSX(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.JSX> | null,\n): node is t.JSX {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"JSXAttribute\":\n    case \"JSXClosingElement\":\n    case \"JSXElement\":\n    case \"JSXEmptyExpression\":\n    case \"JSXExpressionContainer\":\n    case \"JSXSpreadChild\":\n    case \"JSXIdentifier\":\n    case \"JSXMemberExpression\":\n    case \"JSXNamespacedName\":\n    case \"JSXOpeningElement\":\n    case \"JSXSpreadAttribute\":\n    case \"JSXText\":\n    case \"JSXFragment\":\n    case \"JSXOpeningFragment\":\n    case \"JSXClosingFragment\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isMiscellaneous(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.Miscellaneous> | null,\n): node is t.Miscellaneous {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"Noop\":\n    case \"Placeholder\":\n    case \"V8IntrinsicIdentifier\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTypeScript(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TypeScript> | null,\n): node is t.TypeScript {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSParameterProperty\":\n    case \"TSDeclareFunction\":\n    case \"TSDeclareMethod\":\n    case \"TSQualifiedName\":\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSNamedTupleMember\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSInterfaceDeclaration\":\n    case \"TSInterfaceBody\":\n    case \"TSTypeAliasDeclaration\":\n    case \"TSInstantiationExpression\":\n    case \"TSAsExpression\":\n    case \"TSSatisfiesExpression\":\n    case \"TSTypeAssertion\":\n    case \"TSEnumDeclaration\":\n    case \"TSEnumMember\":\n    case \"TSModuleDeclaration\":\n    case \"TSModuleBlock\":\n    case \"TSImportType\":\n    case \"TSImportEqualsDeclaration\":\n    case \"TSExternalModuleReference\":\n    case \"TSNonNullExpression\":\n    case \"TSExportAssignment\":\n    case \"TSNamespaceExportDeclaration\":\n    case \"TSTypeAnnotation\":\n    case \"TSTypeParameterInstantiation\":\n    case \"TSTypeParameterDeclaration\":\n    case \"TSTypeParameter\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSTypeElement(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSTypeElement> | null,\n): node is t.TSTypeElement {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSCallSignatureDeclaration\":\n    case \"TSConstructSignatureDeclaration\":\n    case \"TSPropertySignature\":\n    case \"TSMethodSignature\":\n    case \"TSIndexSignature\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSType> | null,\n): node is t.TSType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSFunctionType\":\n    case \"TSConstructorType\":\n    case \"TSTypeReference\":\n    case \"TSTypePredicate\":\n    case \"TSTypeQuery\":\n    case \"TSTypeLiteral\":\n    case \"TSArrayType\":\n    case \"TSTupleType\":\n    case \"TSOptionalType\":\n    case \"TSRestType\":\n    case \"TSUnionType\":\n    case \"TSIntersectionType\":\n    case \"TSConditionalType\":\n    case \"TSInferType\":\n    case \"TSParenthesizedType\":\n    case \"TSTypeOperator\":\n    case \"TSIndexedAccessType\":\n    case \"TSMappedType\":\n    case \"TSLiteralType\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSImportType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\nexport function isTSBaseType(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.TSBaseType> | null,\n): node is t.TSBaseType {\n  if (!node) return false;\n\n  switch (node.type) {\n    case \"TSAnyKeyword\":\n    case \"TSBooleanKeyword\":\n    case \"TSBigIntKeyword\":\n    case \"TSIntrinsicKeyword\":\n    case \"TSNeverKeyword\":\n    case \"TSNullKeyword\":\n    case \"TSNumberKeyword\":\n    case \"TSObjectKeyword\":\n    case \"TSStringKeyword\":\n    case \"TSSymbolKeyword\":\n    case \"TSUndefinedKeyword\":\n    case \"TSUnknownKeyword\":\n    case \"TSVoidKeyword\":\n    case \"TSThisType\":\n    case \"TSLiteralType\":\n      break;\n    default:\n      return false;\n  }\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isNumericLiteral`\n */\nexport function isNumberLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.NumberLiteral> | null,\n): boolean {\n  deprecationWarning(\"isNumberLiteral\", \"isNumericLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"NumberLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRegExpLiteral`\n */\nexport function isRegexLiteral(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RegexLiteral> | null,\n): boolean {\n  deprecationWarning(\"isRegexLiteral\", \"isRegExpLiteral\");\n  if (!node) return false;\n\n  if (node.type !== \"RegexLiteral\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isRestElement`\n */\nexport function isRestProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.RestProperty> | null,\n): boolean {\n  deprecationWarning(\"isRestProperty\", \"isRestElement\");\n  if (!node) return false;\n\n  if (node.type !== \"RestProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isSpreadElement`\n */\nexport function isSpreadProperty(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.SpreadProperty> | null,\n): boolean {\n  deprecationWarning(\"isSpreadProperty\", \"isSpreadElement\");\n  if (!node) return false;\n\n  if (node.type !== \"SpreadProperty\") return false;\n\n  return opts == null || shallowEqual(node, opts);\n}\n/**\n * @deprecated Use `isImportOrExportDeclaration`\n */\nexport function isModuleDeclaration(\n  node: t.Node | null | undefined,\n  opts?: Opts<t.ModuleDeclaration> | null,\n): node is t.ImportOrExportDeclaration {\n  deprecationWarning(\"isModuleDeclaration\", \"isImportOrExportDeclaration\");\n  return isImportOrExportDeclaration(node, opts);\n}\n","import {\n  isIdentifier,\n  isMemberExpression,\n  isStringLiteral,\n  isThisExpression,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Determines whether or not the input node `member` matches the\n * input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function matchesPattern(\n  member: t.Node | null | undefined,\n  match: string | string[],\n  allowPartial?: boolean,\n): boolean {\n  // not a member expression\n  if (!isMemberExpression(member)) return false;\n\n  const parts = Array.isArray(match) ? match : match.split(\".\");\n  const nodes = [];\n\n  let node;\n  for (node = member; isMemberExpression(node); node = node.object) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if (isIdentifier(node)) {\n      value = node.name;\n    } else if (isStringLiteral(node)) {\n      value = node.value;\n    } else if (isThisExpression(node)) {\n      value = \"this\";\n    } else {\n      return false;\n    }\n\n    if (parts[i] !== value) return false;\n  }\n\n  return true;\n}\n","import matchesPattern from \"./matchesPattern.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Build a function that when called will return whether or not the\n * input `node` `MemberExpression` matches the input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function buildMatchMemberExpression(\n  match: string,\n  allowPartial?: boolean,\n) {\n  const parts = match.split(\".\");\n\n  return (member: t.Node) => matchesPattern(member, parts, allowPartial);\n}\n","import buildMatchMemberExpression from \"../buildMatchMemberExpression.ts\";\n\nconst isReactComponent = buildMatchMemberExpression(\"React.Component\");\n\nexport default isReactComponent;\n","export default function isCompatTag(tagName?: string): boolean {\n  // Must start with a lowercase ASCII letter\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n","import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // If nodeType is nullish, it can't be an alias of targetType.\n  if (nodeType == null) return false;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n\n  return false;\n}\n","import { PLACEHOLDERS_ALIAS } from \"../definitions/index.ts\";\n\n/**\n * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.\n */\nexport default function isPlaceholderType(\n  placeholderType: string,\n  targetType: string,\n): boolean {\n  if (placeholderType === targetType) return true;\n\n  const aliases: Array<string> | undefined =\n    PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases) {\n    for (const alias of aliases) {\n      if (targetType === alias) return true;\n    }\n  }\n\n  return false;\n}\n","import shallowEqual from \"../utils/shallowEqual.ts\";\nimport isType from \"./isType.ts\";\nimport isPlaceholderType from \"./isPlaceholderType.ts\";\nimport { FLIPPED_ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function is<T extends t.Node[\"type\"]>(\n  type: T,\n  node: t.Node | null | undefined,\n  opts?: undefined,\n): node is Extract<t.Node, { type: T }>;\n\nexport default function is<\n  T extends t.Node[\"type\"],\n  P extends Extract<t.Node, { type: T }>,\n>(type: T, n: t.Node | null | undefined, required: Partial<P>): n is P;\n\nexport default function is<P extends t.Node>(\n  type: string,\n  node: t.Node | null | undefined,\n  opts: Partial<P>,\n): node is P;\n\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node;\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n */\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node {\n  if (!node) return false;\n\n  const matches = isType(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === \"Placeholder\" && type in FLIPPED_ALIAS_KEYS) {\n      // We can only return true if the placeholder doesn't replace a real node,\n      // but it replaces a category of nodes (an alias).\n      //\n      // t.is(\"Identifier\", node) gives some guarantees about node's shape, so we\n      // can't say that Placeholder(expectedNode: \"Identifier\") is an identifier\n      // because it doesn't have the same properties.\n      // On the other hand, t.is(\"Expression\", node) doesn't say anything about\n      // the shape of node because Expression can be many different nodes: we can,\n      // and should, safely report expression placeholders as Expressions.\n      return isPlaceholderType(node.expectedNode, type);\n    }\n    return false;\n  }\n\n  if (typeof opts === \"undefined\") {\n    return true;\n  } else {\n    return shallowEqual(node, opts);\n  }\n}\n","import {\n  isIdentifierName,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\nexport default function isValidIdentifier(\n  name: string,\n  reserved: boolean = true,\n): boolean {\n  if (typeof name !== \"string\") return false;\n\n  if (reserved) {\n    // \"await\" is invalid in module, valid in script; better be safe (see #4952)\n    if (isKeyword(name) || isStrictReservedWord(name, true)) {\n      return false;\n    }\n  }\n\n  return isIdentifierName(name);\n}\n","export const STATEMENT_OR_BLOCK_KEYS = [\"consequent\", \"body\", \"alternate\"];\nexport const FLATTENABLE_KEYS = [\"body\", \"expressions\"];\nexport const FOR_INIT_KEYS = [\"left\", \"init\"];\nexport const COMMENT_KEYS = [\n  \"leadingComments\",\n  \"trailingComments\",\n  \"innerComments\",\n] as const;\n\nexport const LOGICAL_OPERATORS = [\"||\", \"&&\", \"??\"];\nexport const UPDATE_OPERATORS = [\"++\", \"--\"];\n\nexport const BOOLEAN_NUMBER_BINARY_OPERATORS = [\">\", \"<\", \">=\", \"<=\"];\nexport const EQUALITY_BINARY_OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\nexport const COMPARISON_BINARY_OPERATORS = [\n  ...EQUALITY_BINARY_OPERATORS,\n  \"in\",\n  \"instanceof\",\n];\nexport const BOOLEAN_BINARY_OPERATORS = [\n  ...COMPARISON_BINARY_OPERATORS,\n  ...BOOLEAN_NUMBER_BINARY_OPERATORS,\n];\nexport const NUMBER_BINARY_OPERATORS = [\n  \"-\",\n  \"/\",\n  \"%\",\n  \"*\",\n  \"**\",\n  \"&\",\n  \"|\",\n  \">>\",\n  \">>>\",\n  \"<<\",\n  \"^\",\n];\nexport const BINARY_OPERATORS = [\n  \"+\",\n  ...NUMBER_BINARY_OPERATORS,\n  ...BOOLEAN_BINARY_OPERATORS,\n  \"|>\",\n];\n\nexport const ASSIGNMENT_OPERATORS = [\n  \"=\",\n  \"+=\",\n  ...NUMBER_BINARY_OPERATORS.map(op => op + \"=\"),\n  ...LOGICAL_OPERATORS.map(op => op + \"=\"),\n];\n\nexport const BOOLEAN_UNARY_OPERATORS = [\"delete\", \"!\"];\nexport const NUMBER_UNARY_OPERATORS = [\"+\", \"-\", \"~\"];\nexport const STRING_UNARY_OPERATORS = [\"typeof\"];\nexport const UNARY_OPERATORS = [\n  \"void\",\n  \"throw\",\n  ...BOOLEAN_UNARY_OPERATORS,\n  ...NUMBER_UNARY_OPERATORS,\n  ...STRING_UNARY_OPERATORS,\n];\n\nexport const INHERIT_KEYS = {\n  optional: [\"typeAnnotation\", \"typeParameters\", \"returnType\"],\n  force: [\"start\", \"loc\", \"end\"],\n} as const;\n\nexport const BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\nexport const NOT_LOCAL_BINDING = Symbol.for(\n  \"should not be considered a local binding\",\n);\n","import is from \"../validators/is.ts\";\nimport { validateField, validateChild } from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  deprecated?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"deprecated\", \"validate\"];\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          deprecated: field.deprecated,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n","import is from \"../validators/is.ts\";\nimport isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"../index.ts\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants/index.ts\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n        ),\n      ),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertValueType(\"string\");\n        }\n\n        const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n        const pattern = assertOneOf(\"=\");\n\n        return function (node: t.AssignmentExpression, key, val) {\n          const validator = is(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\", \"OptionalMemberExpression\")\n        : assertNodeType(\n            \"Identifier\",\n            \"MemberExpression\",\n            \"OptionalMemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? Object.assign(() => {}, {\n            each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n          })\n        : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n        : assertNodeType(\n            \"VariableDeclaration\",\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Identifier\", \"Pattern\", \"RestElement\")),\n    ),\n  },\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate: (function () {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};\n\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (!isValidIdentifier(val, false)) {\n              throw new TypeError(`\"${val}\" is not a valid identifier name`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n\n    const [, parentKey] = match;\n    const nonComp = { computed: false };\n\n    // We can't check if `parent.property === node`, because nodes are validated\n    // before replacing them in the AST.\n    if (parentKey === \"property\") {\n      if (is(\"MemberExpression\", parent, nonComp)) return;\n      if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if (is(\"Property\", parent, nonComp)) return;\n      if (is(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if (is(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n    } else if (parentKey === \"meta\") {\n      if (is(\"MetaProperty\", parent, { meta: node })) return;\n    }\n\n    if (\n      // Ideally we should call isStrictReservedWord if this node is a descendant\n      // of a block in strict mode. Also, we should pass the inModule option so\n      // we can disable \"await\" in module.\n      (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n      // Even if \"this\" is a keyword, we are using the Identifier\n      // node to represent it.\n      node.name !== \"this\"\n    ) {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  },\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: chain(\n        assertValueType(\"number\"),\n        Object.assign(\n          function (node, key, val) {\n            if (1 / val < 0 || !Number.isFinite(val)) {\n              const error = new Error(\n                \"NumericLiterals must be non-negative finite numbers. \" +\n                  `You can use t.valueToNode(${val}) instead.`,\n              );\n              if (process.env.BABEL_8_BREAKING) {\n                // TODO(@nicolo-ribaudo) Fix regenerator to not pass negative\n                // numbers here.\n                if (!IS_STANDALONE) {\n                  if (!new Error().stack.includes(\"regenerator\")) {\n                    throw error;\n                  }\n                }\n              } else {\n                // TODO: Enable this warning once regenerator is fixed.\n                // https://github.com/facebook/regenerator/pull/680\n                // console.warn(error);\n              }\n            }\n          } satisfies Validator,\n          { type: \"number\" },\n        ),\n      ),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            const invalid = /[^gimsuy]/.exec(val);\n            if (invalid) {\n              throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\"),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_TYPES_8_BREAKING ? { default: \"method\" } : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"DecimalLiteral\",\n          \"PrivateName\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: [\n              \"Expression\",\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && node.computed) {\n              throw new TypeError(\n                \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n        function (node: t.ObjectProperty, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          if (val && !is(\"Identifier\", node.key)) {\n            throw new TypeError(\n              \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n            );\n          }\n        } as Validator,\n      ),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: (function () {\n    const pattern = assertNodeType(\n      \"Identifier\",\n      \"Pattern\",\n      \"TSAsExpression\",\n      \"TSSatisfiesExpression\",\n      \"TSNonNullExpression\",\n      \"TSTypeAssertion\",\n    );\n    const expression = assertNodeType(\"Expression\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      const validator = is(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"MemberExpression\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n  },\n  validate(parent: t.ArrayPattern | t.ObjectPattern, key) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n    const [, listKey, index] = match as unknown as [\n      string,\n      keyof typeof parent,\n      string,\n    ];\n    if ((parent[listKey] as t.Node[]).length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  },\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"SwitchCase\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: chain(\n        assertNodeType(\"BlockStatement\"),\n        Object.assign(\n          function (node: t.TryStatement) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (!node.handler && !node.finalizer) {\n              throw new TypeError(\n                \"TryStatement expects either a handler or finalizer, or both\",\n              );\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\"BlockStatement\"],\n          },\n        ),\n      ),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"Expression\")\n        : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n        // https://github.com/tc39/proposal-async-explicit-resource-management\n        \"await using\",\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"VariableDeclarator\")),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    if (!is(\"ForXStatement\", parent, { left: node })) return;\n    if (node.declarations.length !== 1) {\n      throw new TypeError(\n        `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n      );\n    }\n  },\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"LVal\");\n        }\n\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n        );\n        const without = assertNodeType(\"Identifier\");\n\n        return function (node: t.VariableDeclarator, key, val) {\n          const validator = node.init ? normal : without;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"ClassAccessorProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n            \"StaticBlock\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // The id may be omitted if this is the child of an\n      // ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate: (function () {\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"TSDeclareFunction\",\n        \"FunctionDeclaration\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: chain(\n        assertNodeType(\"Declaration\"),\n        Object.assign(\n          function (node: t.ExportNamedDeclaration, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (val && node.specifiers.length) {\n              throw new TypeError(\n                \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n              );\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Declaration\"] },\n        ),\n        function (node: t.ExportNamedDeclaration, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          // This validator isn't put at the top level because we can run it\n          // even if this node doesn't have a parent.\n\n          if (val && node.source) {\n            throw new TypeError(\"Cannot export a declaration from a source\");\n          }\n        },\n      ),\n    },\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    specifiers: {\n      default: [],\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          (function () {\n            const sourced = assertNodeType(\n              \"ExportSpecifier\",\n              \"ExportDefaultSpecifier\",\n              \"ExportNamespaceSpecifier\",\n            );\n            const sourceless = assertNodeType(\"ExportSpecifier\");\n\n            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n\n            return function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator;\n          })(),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return function (node, key, val) {\n          if (is(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        };\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    attributes: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    // TODO(Babel 8): Deprecated\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    source: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: chain(\n        assertNodeType(\"Identifier\"),\n        Object.assign(\n          function (node: t.MetaProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            let property;\n            switch (val.name) {\n              case \"function\":\n                property = \"sent\";\n                break;\n              case \"new\":\n                property = \"target\";\n                break;\n              case \"import\":\n                property = \"meta\";\n                break;\n            }\n            if (!is(\"Identifier\", node.property, { name: property })) {\n              throw new TypeError(\"Unrecognised MetaProperty\");\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Identifier\"] },\n        ),\n      ),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\n          \"Identifier\",\n          \"Pattern\",\n          \"RestElement\",\n          \"TSParameterProperty\",\n        ),\n      ),\n    ),\n  },\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\", \"typeParameters\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.YieldExpression, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && !node.argument) {\n              throw new TypeError(\n                \"Property delegate of YieldExpression cannot be true if there is no argument\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n      ),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\", \"typeAnnotation\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n","import {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  const isDeclareClass = name === \"DeclareClass\";\n\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      ...(isDeclareClass ? [\"mixins\", \"implements\"] : []),\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      ...(isDeclareClass\n        ? {\n            mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n            implements: validateOptional(arrayOfType(\"ClassImplements\")),\n          }\n        : {}),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType([\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ]),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n","import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n","import { ALIAS_KEYS } from \"./utils.ts\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwn(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n","import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils.ts\";\nimport { PLACEHOLDERS } from \"./placeholders.ts\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n","import defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils.ts\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING\n    ? {\n        object: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n        callee: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n      }\n    : {\n        object: {\n          validate: assertNodeType(\"Expression\"),\n        },\n        callee: {\n          validate: assertNodeType(\"Expression\"),\n        },\n      },\n});\n\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ObjectProperty\", \"SpreadElement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\", \"SpreadElement\")),\n      ),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n","import {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils.ts\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core.ts\";\nimport is from \"../validators/is.ts\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    [\"ArrayPattern\", \"Identifier\", \"ObjectPattern\", \"RestElement\"],\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\", \"typeParameters\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType([\"TSType\", \"TSNamedTupleMember\"]),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    const: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n","export const DEPRECATED_ALIASES = {\n  ModuleDeclaration: \"ImportOrExportDeclaration\",\n};\n","import toFastProperties from \"to-fast-properties\";\nimport \"./core.ts\";\nimport \"./flow.ts\";\nimport \"./jsx.ts\";\nimport \"./misc.ts\";\nimport \"./experimental.ts\";\nimport \"./typescript.ts\";\nimport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n} from \"./utils.ts\";\nimport {\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n} from \"./placeholders.ts\";\nimport { DEPRECATED_ALIASES } from \"./deprecated-aliases.ts\";\n\n(\n  Object.keys(DEPRECATED_ALIASES) as (keyof typeof DEPRECATED_ALIASES)[]\n).forEach(deprecatedAlias => {\n  FLIPPED_ALIAS_KEYS[deprecatedAlias] =\n    FLIPPED_ALIAS_KEYS[DEPRECATED_ALIASES[deprecatedAlias]];\n});\n\n// We do this here, because at this point the visitor keys should be ready and setup\ntoFastProperties(VISITOR_KEYS);\ntoFastProperties(ALIAS_KEYS);\ntoFastProperties(FLIPPED_ALIAS_KEYS);\ntoFastProperties(NODE_FIELDS);\ntoFastProperties(BUILDER_KEYS);\ntoFastProperties(DEPRECATED_KEYS);\n\ntoFastProperties(PLACEHOLDERS_ALIAS);\ntoFastProperties(PLACEHOLDERS_FLIPPED_ALIAS);\n\nconst TYPES: Array<string> = [].concat(\n  Object.keys(VISITOR_KEYS),\n  Object.keys(FLIPPED_ALIAS_KEYS),\n  Object.keys(DEPRECATED_KEYS),\n);\n\nexport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_ALIASES,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n  TYPES,\n};\n\nexport type { FieldOptions } from \"./utils.ts\";\n","import {\n  NODE_FIELDS,\n  NODE_PARENT_VALIDATIONS,\n  type FieldOptions,\n} from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function validate(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n): void {\n  if (!node) return;\n\n  const fields = NODE_FIELDS[node.type];\n  if (!fields) return;\n\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\n\nexport function validateField(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n  field: FieldOptions | undefined | null,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n}\n\nexport function validateChild(\n  node: t.Node | undefined | null,\n  key: string,\n  val?: t.Node | undefined | null,\n) {\n  if (val == null) return;\n  const validate = NODE_PARENT_VALIDATIONS[val.type];\n  if (!validate) return;\n  validate(node, key, val);\n}\n","import validate from \"../validators/validate.ts\";\nimport type * as t from \"../index.ts\";\nimport { BUILDER_KEYS } from \"../index.ts\";\n\nexport default function validateNode<N extends t.Node>(node: N) {\n  // todo: because keys not in BUILDER_KEYS are not validated - this actually allows invalid nodes in some cases\n  const keys = BUILDER_KEYS[node.type] as (keyof N & string)[];\n  for (const key of keys) {\n    validate(node, key, node[key]);\n  }\n  return node;\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport validateNode from \"../validateNode.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  return validateNode<t.ArrayExpression>({\n    type: \"ArrayExpression\",\n    elements,\n  });\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal | t.OptionalMemberExpression,\n  right: t.Expression,\n): t.AssignmentExpression {\n  return validateNode<t.AssignmentExpression>({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  return validateNode<t.BinaryExpression>({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  return validateNode<t.InterpreterDirective>({\n    type: \"InterpreterDirective\",\n    value,\n  });\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  return validateNode<t.Directive>({\n    type: \"Directive\",\n    value,\n  });\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  return validateNode<t.DirectiveLiteral>({\n    type: \"DirectiveLiteral\",\n    value,\n  });\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  return validateNode<t.BlockStatement>({\n    type: \"BlockStatement\",\n    body,\n    directives,\n  });\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  return validateNode<t.BreakStatement>({\n    type: \"BreakStatement\",\n    label,\n  });\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.CallExpression {\n  return validateNode<t.CallExpression>({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  return validateNode<t.CatchClause>({\n    type: \"CatchClause\",\n    param,\n    body,\n  });\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  return validateNode<t.ConditionalExpression>({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  return validateNode<t.ContinueStatement>({\n    type: \"ContinueStatement\",\n    label,\n  });\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  return validateNode<t.DoWhileStatement>({\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  });\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  return validateNode<t.ExpressionStatement>({\n    type: \"ExpressionStatement\",\n    expression,\n  });\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  return validateNode<t.File>({\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  });\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  return validateNode<t.ForInStatement>({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  });\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  return validateNode<t.ForStatement>({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  });\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  return validateNode<t.FunctionDeclaration>({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  return validateNode<t.FunctionExpression>({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function identifier(name: string): t.Identifier {\n  return validateNode<t.Identifier>({\n    type: \"Identifier\",\n    name,\n  });\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  return validateNode<t.IfStatement>({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  return validateNode<t.LabeledStatement>({\n    type: \"LabeledStatement\",\n    label,\n    body,\n  });\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  return validateNode<t.StringLiteral>({\n    type: \"StringLiteral\",\n    value,\n  });\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  return validateNode<t.NumericLiteral>({\n    type: \"NumericLiteral\",\n    value,\n  });\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  return validateNode<t.BooleanLiteral>({\n    type: \"BooleanLiteral\",\n    value,\n  });\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  return validateNode<t.RegExpLiteral>({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  });\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  return validateNode<t.LogicalExpression>({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: true | false | null = null,\n): t.MemberExpression {\n  return validateNode<t.MemberExpression>({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.NewExpression {\n  return validateNode<t.NewExpression>({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  return validateNode<t.Program>({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n  });\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  return validateNode<t.ObjectExpression>({\n    type: \"ObjectExpression\",\n    properties,\n  });\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  return validateNode<t.ObjectMethod>({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  });\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  return validateNode<t.ObjectProperty>({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  });\n}\nexport function restElement(argument: t.LVal): t.RestElement {\n  return validateNode<t.RestElement>({\n    type: \"RestElement\",\n    argument,\n  });\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  return validateNode<t.ReturnStatement>({\n    type: \"ReturnStatement\",\n    argument,\n  });\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  return validateNode<t.SequenceExpression>({\n    type: \"SequenceExpression\",\n    expressions,\n  });\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  return validateNode<t.ParenthesizedExpression>({\n    type: \"ParenthesizedExpression\",\n    expression,\n  });\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  return validateNode<t.SwitchCase>({\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  });\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  return validateNode<t.SwitchStatement>({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  });\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  return validateNode<t.ThrowStatement>({\n    type: \"ThrowStatement\",\n    argument,\n  });\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  return validateNode<t.TryStatement>({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  });\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  return validateNode<t.UnaryExpression>({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  return validateNode<t.UpdateExpression>({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  return validateNode<t.VariableDeclaration>({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  });\n}\nexport function variableDeclarator(\n  id: t.LVal,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  return validateNode<t.VariableDeclarator>({\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  });\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  return validateNode<t.WhileStatement>({\n    type: \"WhileStatement\",\n    test,\n    body,\n  });\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  return validateNode<t.WithStatement>({\n    type: \"WithStatement\",\n    object,\n    body,\n  });\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  return validateNode<t.AssignmentPattern>({\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  });\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike | t.LVal>,\n): t.ArrayPattern {\n  return validateNode<t.ArrayPattern>({\n    type: \"ArrayPattern\",\n    elements,\n  });\n}\nexport function arrowFunctionExpression(\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  return validateNode<t.ArrowFunctionExpression>({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  });\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  return validateNode<t.ClassBody>({\n    type: \"ClassBody\",\n    body,\n  });\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  return validateNode<t.ClassExpression>({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function classDeclaration(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  return validateNode<t.ClassDeclaration>({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  return validateNode<t.ExportAllDeclaration>({\n    type: \"ExportAllDeclaration\",\n    source,\n  });\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  return validateNode<t.ExportDefaultDeclaration>({\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  });\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  return validateNode<t.ExportNamedDeclaration>({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  return validateNode<t.ExportSpecifier>({\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  });\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  return validateNode<t.ForOfStatement>({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  });\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  return validateNode<t.ImportDeclaration>({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  });\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  return validateNode<t.ImportDefaultSpecifier>({\n    type: \"ImportDefaultSpecifier\",\n    local,\n  });\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  return validateNode<t.ImportNamespaceSpecifier>({\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  });\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  return validateNode<t.ImportSpecifier>({\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  });\n}\nexport function importExpression(\n  source: t.Expression,\n  options: t.Expression | null = null,\n): t.ImportExpression {\n  return validateNode<t.ImportExpression>({\n    type: \"ImportExpression\",\n    source,\n    options,\n  });\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  return validateNode<t.MetaProperty>({\n    type: \"MetaProperty\",\n    meta,\n    property,\n  });\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  return validateNode<t.ClassMethod>({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  });\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  return validateNode<t.ObjectPattern>({\n    type: \"ObjectPattern\",\n    properties,\n  });\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  return validateNode<t.SpreadElement>({\n    type: \"SpreadElement\",\n    argument,\n  });\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  return validateNode<t.TaggedTemplateExpression>({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  });\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  return validateNode<t.TemplateElement>({\n    type: \"TemplateElement\",\n    value,\n    tail,\n  });\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  return validateNode<t.TemplateLiteral>({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  });\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  return validateNode<t.YieldExpression>({\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  });\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  return validateNode<t.AwaitExpression>({\n    type: \"AwaitExpression\",\n    argument,\n  });\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function bigIntLiteral(value: string): t.BigIntLiteral {\n  return validateNode<t.BigIntLiteral>({\n    type: \"BigIntLiteral\",\n    value,\n  });\n}\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  return validateNode<t.ExportNamespaceSpecifier>({\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  });\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  return validateNode<t.OptionalMemberExpression>({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n  optional: boolean,\n): t.OptionalCallExpression {\n  return validateNode<t.OptionalCallExpression>({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  });\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  return validateNode<t.ClassProperty>({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  return validateNode<t.ClassAccessorProperty>({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  return validateNode<t.ClassPrivateProperty>({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  });\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  return validateNode<t.ClassPrivateMethod>({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  });\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  return validateNode<t.PrivateName>({\n    type: \"PrivateName\",\n    id,\n  });\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  return validateNode<t.StaticBlock>({\n    type: \"StaticBlock\",\n    body,\n  });\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  return validateNode<t.ArrayTypeAnnotation>({\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  });\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  return validateNode<t.BooleanLiteralTypeAnnotation>({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  return validateNode<t.ClassImplements>({\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  });\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  return validateNode<t.DeclareClass>({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  return validateNode<t.DeclareFunction>({\n    type: \"DeclareFunction\",\n    id,\n  });\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  return validateNode<t.DeclareInterface>({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  return validateNode<t.DeclareModule>({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  });\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  return validateNode<t.DeclareModuleExports>({\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  });\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  return validateNode<t.DeclareTypeAlias>({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  return validateNode<t.DeclareOpaqueType>({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  });\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  return validateNode<t.DeclareVariable>({\n    type: \"DeclareVariable\",\n    id,\n  });\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n): t.DeclareExportDeclaration {\n  return validateNode<t.DeclareExportDeclaration>({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n): t.DeclareExportAllDeclaration {\n  return validateNode<t.DeclareExportAllDeclaration>({\n    type: \"DeclareExportAllDeclaration\",\n    source,\n  });\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  return validateNode<t.DeclaredPredicate>({\n    type: \"DeclaredPredicate\",\n    value,\n  });\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  return validateNode<t.FunctionTypeAnnotation>({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  });\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  return validateNode<t.FunctionTypeParam>({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  });\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  return validateNode<t.GenericTypeAnnotation>({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  });\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  return validateNode<t.InterfaceExtends>({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  });\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  return validateNode<t.InterfaceDeclaration>({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  return validateNode<t.InterfaceTypeAnnotation>({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  });\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  return validateNode<t.IntersectionTypeAnnotation>({\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  });\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  return validateNode<t.NullableTypeAnnotation>({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  return validateNode<t.NumberLiteralTypeAnnotation>({\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  return validateNode<t.ObjectTypeAnnotation>({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  });\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  return validateNode<t.ObjectTypeInternalSlot>({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  });\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  return validateNode<t.ObjectTypeCallProperty>({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  });\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  return validateNode<t.ObjectTypeIndexer>({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  });\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  return validateNode<t.ObjectTypeProperty>({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  });\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  return validateNode<t.ObjectTypeSpreadProperty>({\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  });\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  return validateNode<t.OpaqueType>({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  });\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  return validateNode<t.QualifiedTypeIdentifier>({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  });\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  return validateNode<t.StringLiteralTypeAnnotation>({\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  return validateNode<t.TupleTypeAnnotation>({\n    type: \"TupleTypeAnnotation\",\n    types,\n  });\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  return validateNode<t.TypeofTypeAnnotation>({\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  });\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  return validateNode<t.TypeAlias>({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  return validateNode<t.TypeAnnotation>({\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  return validateNode<t.TypeCastExpression>({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  return validateNode<t.TypeParameter>({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  });\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  return validateNode<t.TypeParameterDeclaration>({\n    type: \"TypeParameterDeclaration\",\n    params,\n  });\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  return validateNode<t.TypeParameterInstantiation>({\n    type: \"TypeParameterInstantiation\",\n    params,\n  });\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  return validateNode<t.UnionTypeAnnotation>({\n    type: \"UnionTypeAnnotation\",\n    types,\n  });\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  return validateNode<t.Variance>({\n    type: \"Variance\",\n    kind,\n  });\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  return validateNode<t.EnumDeclaration>({\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  });\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  return validateNode<t.EnumBooleanBody>({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  return validateNode<t.EnumNumberBody>({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  return validateNode<t.EnumStringBody>({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  return validateNode<t.EnumSymbolBody>({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  return validateNode<t.EnumBooleanMember>({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  });\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  return validateNode<t.EnumNumberMember>({\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  });\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  return validateNode<t.EnumStringMember>({\n    type: \"EnumStringMember\",\n    id,\n    init,\n  });\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  return validateNode<t.EnumDefaultedMember>({\n    type: \"EnumDefaultedMember\",\n    id,\n  });\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  return validateNode<t.IndexedAccessType>({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  return validateNode<t.OptionalIndexedAccessType>({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  });\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  return validateNode<t.JSXAttribute>({\n    type: \"JSXAttribute\",\n    name,\n    value,\n  });\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  return validateNode<t.JSXClosingElement>({\n    type: \"JSXClosingElement\",\n    name,\n  });\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  return validateNode<t.JSXElement>({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  });\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  return validateNode<t.JSXExpressionContainer>({\n    type: \"JSXExpressionContainer\",\n    expression,\n  });\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  return validateNode<t.JSXSpreadChild>({\n    type: \"JSXSpreadChild\",\n    expression,\n  });\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  return validateNode<t.JSXIdentifier>({\n    type: \"JSXIdentifier\",\n    name,\n  });\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  return validateNode<t.JSXMemberExpression>({\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  });\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  return validateNode<t.JSXNamespacedName>({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  });\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  return validateNode<t.JSXOpeningElement>({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  });\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  return validateNode<t.JSXSpreadAttribute>({\n    type: \"JSXSpreadAttribute\",\n    argument,\n  });\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  return validateNode<t.JSXText>({\n    type: \"JSXText\",\n    value,\n  });\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  return validateNode<t.JSXFragment>({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  });\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  return validateNode<t.Placeholder>({\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  });\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  return validateNode<t.V8IntrinsicIdentifier>({\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  });\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  return validateNode<t.BindExpression>({\n    type: \"BindExpression\",\n    object,\n    callee,\n  });\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  return validateNode<t.ImportAttribute>({\n    type: \"ImportAttribute\",\n    key,\n    value,\n  });\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  return validateNode<t.Decorator>({\n    type: \"Decorator\",\n    expression,\n  });\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  return validateNode<t.DoExpression>({\n    type: \"DoExpression\",\n    body,\n    async,\n  });\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  return validateNode<t.ExportDefaultSpecifier>({\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  });\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  return validateNode<t.RecordExpression>({\n    type: \"RecordExpression\",\n    properties,\n  });\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  return validateNode<t.TupleExpression>({\n    type: \"TupleExpression\",\n    elements,\n  });\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  return validateNode<t.DecimalLiteral>({\n    type: \"DecimalLiteral\",\n    value,\n  });\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  return validateNode<t.ModuleExpression>({\n    type: \"ModuleExpression\",\n    body,\n  });\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  return validateNode<t.PipelineTopicExpression>({\n    type: \"PipelineTopicExpression\",\n    expression,\n  });\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  return validateNode<t.PipelineBareFunction>({\n    type: \"PipelineBareFunction\",\n    callee,\n  });\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  return validateNode<t.TSParameterProperty>({\n    type: \"TSParameterProperty\",\n    parameter,\n  });\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  return validateNode<t.TSDeclareFunction>({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  return validateNode<t.TSDeclareMethod>({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  return validateNode<t.TSQualifiedName>({\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  });\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  return validateNode<t.TSCallSignatureDeclaration>({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  return validateNode<t.TSConstructSignatureDeclaration>({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSPropertySignature {\n  return validateNode<t.TSPropertySignature>({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  return validateNode<t.TSMethodSignature>({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  return validateNode<t.TSIndexSignature>({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  return validateNode<t.TSFunctionType>({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  return validateNode<t.TSConstructorType>({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  return validateNode<t.TSTypeReference>({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  });\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  return validateNode<t.TSTypePredicate>({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  });\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  return validateNode<t.TSTypeQuery>({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  });\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  return validateNode<t.TSTypeLiteral>({\n    type: \"TSTypeLiteral\",\n    members,\n  });\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  return validateNode<t.TSArrayType>({\n    type: \"TSArrayType\",\n    elementType,\n  });\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  return validateNode<t.TSTupleType>({\n    type: \"TSTupleType\",\n    elementTypes,\n  });\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  return validateNode<t.TSOptionalType>({\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  });\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  return validateNode<t.TSRestType>({\n    type: \"TSRestType\",\n    typeAnnotation,\n  });\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  return validateNode<t.TSNamedTupleMember>({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  });\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  return validateNode<t.TSUnionType>({\n    type: \"TSUnionType\",\n    types,\n  });\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  return validateNode<t.TSIntersectionType>({\n    type: \"TSIntersectionType\",\n    types,\n  });\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  return validateNode<t.TSConditionalType>({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  });\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  return validateNode<t.TSInferType>({\n    type: \"TSInferType\",\n    typeParameter,\n  });\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  return validateNode<t.TSParenthesizedType>({\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  });\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(typeAnnotation: t.TSType): t.TSTypeOperator {\n  return validateNode<t.TSTypeOperator>({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null,\n  });\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  return validateNode<t.TSIndexedAccessType>({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  return validateNode<t.TSMappedType>({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  });\n}\nexport { tsMappedType as tSMappedType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  return validateNode<t.TSLiteralType>({\n    type: \"TSLiteralType\",\n    literal,\n  });\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  return validateNode<t.TSExpressionWithTypeArguments>({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  return validateNode<t.TSInterfaceDeclaration>({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  return validateNode<t.TSInterfaceBody>({\n    type: \"TSInterfaceBody\",\n    body,\n  });\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  return validateNode<t.TSTypeAliasDeclaration>({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  });\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  return validateNode<t.TSInstantiationExpression>({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  return validateNode<t.TSAsExpression>({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  return validateNode<t.TSSatisfiesExpression>({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  return validateNode<t.TSTypeAssertion>({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  });\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  return validateNode<t.TSEnumDeclaration>({\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  });\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  return validateNode<t.TSEnumMember>({\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  });\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  return validateNode<t.TSModuleDeclaration>({\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n  });\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  return validateNode<t.TSModuleBlock>({\n    type: \"TSModuleBlock\",\n    body,\n  });\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  return validateNode<t.TSImportType>({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  });\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  return validateNode<t.TSImportEqualsDeclaration>({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  });\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  return validateNode<t.TSExternalModuleReference>({\n    type: \"TSExternalModuleReference\",\n    expression,\n  });\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  return validateNode<t.TSNonNullExpression>({\n    type: \"TSNonNullExpression\",\n    expression,\n  });\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  return validateNode<t.TSExportAssignment>({\n    type: \"TSExportAssignment\",\n    expression,\n  });\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  return validateNode<t.TSNamespaceExportDeclaration>({\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  });\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  return validateNode<t.TSTypeAnnotation>({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  return validateNode<t.TSTypeParameterInstantiation>({\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  });\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  return validateNode<t.TSTypeParameterDeclaration>({\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  });\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  return validateNode<t.TSTypeParameter>({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  });\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  deprecationWarning(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  deprecationWarning(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(argument: t.LVal) {\n  deprecationWarning(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  deprecationWarning(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n","import { stringLiteral } from \"../../builders/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\nimport { inherits } from \"../../index.ts\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: t.JSXText,\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(inherits(stringLiteral(str), child));\n}\n","import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated/index.ts\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild.ts\";\nimport type * as t from \"../../index.ts\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n","import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isNode(node: any): node is t.Node {\n  return !!(node && VISITOR_KEYS[node.type]);\n}\n","import isNode from \"../validators/isNode.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function assertNode(node?: any): asserts node is t.Node {\n  if (!isNode(node)) {\n    const type = node?.type ?? JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertImportExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportExpression {\n  assert(\"ImportExpression\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertImportOrExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportOrExportDeclaration {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nexport function assertModuleDeclaration(node: any, opts: any): void {\n  deprecationWarning(\n    \"assertModuleDeclaration\",\n    \"assertImportOrExportDeclaration\",\n  );\n  assert(\"ModuleDeclaration\", node, opts);\n}\n","import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n","import {\n  isAnyTypeAnnotation,\n  isGenericTypeAnnotation,\n  isUnionTypeAnnotation,\n  isFlowBaseAnnotation,\n  isIdentifier,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.GenericTypeAnnotation[\"id\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.FlowType | false | null | undefined>,\n): t.FlowType[] {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.GenericTypeAnnotation>();\n  const bases = new Map<t.FlowBaseAnnotation[\"type\"], t.FlowBaseAnnotation>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.FlowType[]>();\n\n  const types: t.FlowType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (isFlowBaseAnnotation(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isUnionTypeAnnotation(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (isGenericTypeAnnotation(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics.has(name)) {\n        let existing: t.Flow = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n","import { unionTypeAnnotation } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/flow/removeTypeDuplicates.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createFlowUnionType<T extends t.FlowType>(\n  types: [T] | Array<T>,\n): T | t.UnionTypeAnnotation {\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0] as T;\n  } else {\n    return unionTypeAnnotation(flattened);\n  }\n}\n","import {\n  isIdentifier,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodesIn: ReadonlyArray<t.TSType>,\n): Array<t.TSType> {\n  const nodes = Array.from(nodesIn);\n\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    if (isTSTypeReference(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params,\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n","import { tsUnionType } from \"../generated/index.ts\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates.ts\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index.ts\";\nimport type * as t from \"../../index.ts\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n","import { numericLiteral, unaryExpression } from \"./generated/index.ts\";\n\nexport function buildUndefinedNode() {\n  return unaryExpression(\"void\", numericLiteral(0), true);\n}\n","import { NODE_FIELDS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\nimport { isFile, isIdentifier } from \"../validators/generated/index.ts\";\n\nconst { hasOwn } = process.env.BABEL_8_BREAKING\n  ? Object\n  : { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (hasOwn(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (hasOwn(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n  } else if (!hasOwn(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (hasOwn(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (hasOwn(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (hasOwn(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (hasOwn(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node`, including only\n * properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function clone<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false);\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function cloneDeep<T extends t.Node>(node: T): T {\n  return cloneNode(node);\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * excluding `_private` and location properties.\n */\nexport default function cloneDeepWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ true, /* withoutLoc */ true);\n}\n","import cloneNode from \"./cloneNode.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Create a shallow clone of a `node` excluding `_private` and location properties.\n */\nexport default function cloneWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false, /* withoutLoc */ true);\n}\n","import type * as t from \"../index.ts\";\n\n/**\n * Add comments of certain type to a node.\n */\nexport default function addComments<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  comments: Array<t.Comment>,\n): T {\n  if (!comments || !node) return node;\n\n  const key = `${type}Comments` as const;\n\n  if (node[key]) {\n    if (type === \"leading\") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n\n  return node;\n}\n","import addComments from \"./addComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Add comment of certain type to a node.\n */\nexport default function addComment<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n): T {\n  return addComments(node, type, [\n    {\n      type: line ? \"CommentLine\" : \"CommentBlock\",\n      value: content,\n    } as t.Comment,\n  ]);\n}\n","import type * as t from \"../index.ts\";\n\nexport default function inherit<\n  C extends t.Node | undefined,\n  P extends t.Node | undefined,\n>(key: keyof C & keyof P, child: C, parent: P): void {\n  if (child && parent) {\n    // @ts-expect-error Could further refine key definitions\n    child[key] = Array.from(\n      new Set([].concat(child[key], parent[key]).filter(Boolean)),\n    );\n  }\n}\n","import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritInnerComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"innerComments\", child, parent);\n}\n","import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritLeadingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"leadingComments\", child, parent);\n}\n","import inherit from \"../utils/inherit.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function inheritTrailingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"trailingComments\", child, parent);\n}\n","import inheritTrailingComments from \"./inheritTrailingComments.ts\";\nimport inheritLeadingComments from \"./inheritLeadingComments.ts\";\nimport inheritInnerComments from \"./inheritInnerComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all unique comments from `parent` node to `child` node.\n */\nexport default function inheritsComments<T extends t.Node>(\n  child: T,\n  parent: t.Node,\n): T {\n  inheritTrailingComments(child, parent);\n  inheritLeadingComments(child, parent);\n  inheritInnerComments(child, parent);\n\n  return child;\n}\n","import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Remove comment properties from a node.\n */\nexport default function removeComments<T extends t.Node>(node: T): T {\n  COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n\n  return node;\n}\n","/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport { FLIPPED_ALIAS_KEYS } from \"../../definitions/index.ts\";\n\nexport const STANDARDIZED_TYPES = FLIPPED_ALIAS_KEYS[\"Standardized\"];\nexport const EXPRESSION_TYPES = FLIPPED_ALIAS_KEYS[\"Expression\"];\nexport const BINARY_TYPES = FLIPPED_ALIAS_KEYS[\"Binary\"];\nexport const SCOPABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Scopable\"];\nexport const BLOCKPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"BlockParent\"];\nexport const BLOCK_TYPES = FLIPPED_ALIAS_KEYS[\"Block\"];\nexport const STATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"Statement\"];\nexport const TERMINATORLESS_TYPES = FLIPPED_ALIAS_KEYS[\"Terminatorless\"];\nexport const COMPLETIONSTATEMENT_TYPES =\n  FLIPPED_ALIAS_KEYS[\"CompletionStatement\"];\nexport const CONDITIONAL_TYPES = FLIPPED_ALIAS_KEYS[\"Conditional\"];\nexport const LOOP_TYPES = FLIPPED_ALIAS_KEYS[\"Loop\"];\nexport const WHILE_TYPES = FLIPPED_ALIAS_KEYS[\"While\"];\nexport const EXPRESSIONWRAPPER_TYPES = FLIPPED_ALIAS_KEYS[\"ExpressionWrapper\"];\nexport const FOR_TYPES = FLIPPED_ALIAS_KEYS[\"For\"];\nexport const FORXSTATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"ForXStatement\"];\nexport const FUNCTION_TYPES = FLIPPED_ALIAS_KEYS[\"Function\"];\nexport const FUNCTIONPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParent\"];\nexport const PUREISH_TYPES = FLIPPED_ALIAS_KEYS[\"Pureish\"];\nexport const DECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"Declaration\"];\nexport const PATTERNLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"PatternLike\"];\nexport const LVAL_TYPES = FLIPPED_ALIAS_KEYS[\"LVal\"];\nexport const TSENTITYNAME_TYPES = FLIPPED_ALIAS_KEYS[\"TSEntityName\"];\nexport const LITERAL_TYPES = FLIPPED_ALIAS_KEYS[\"Literal\"];\nexport const IMMUTABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Immutable\"];\nexport const USERWHITESPACABLE_TYPES = FLIPPED_ALIAS_KEYS[\"UserWhitespacable\"];\nexport const METHOD_TYPES = FLIPPED_ALIAS_KEYS[\"Method\"];\nexport const OBJECTMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"ObjectMember\"];\nexport const PROPERTY_TYPES = FLIPPED_ALIAS_KEYS[\"Property\"];\nexport const UNARYLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"UnaryLike\"];\nexport const PATTERN_TYPES = FLIPPED_ALIAS_KEYS[\"Pattern\"];\nexport const CLASS_TYPES = FLIPPED_ALIAS_KEYS[\"Class\"];\nexport const IMPORTOREXPORTDECLARATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"ImportOrExportDeclaration\"];\nexport const EXPORTDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ExportDeclaration\"];\nexport const MODULESPECIFIER_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleSpecifier\"];\nexport const ACCESSOR_TYPES = FLIPPED_ALIAS_KEYS[\"Accessor\"];\nexport const PRIVATE_TYPES = FLIPPED_ALIAS_KEYS[\"Private\"];\nexport const FLOW_TYPES = FLIPPED_ALIAS_KEYS[\"Flow\"];\nexport const FLOWTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowType\"];\nexport const FLOWBASEANNOTATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"FlowBaseAnnotation\"];\nexport const FLOWDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"FlowDeclaration\"];\nexport const FLOWPREDICATE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowPredicate\"];\nexport const ENUMBODY_TYPES = FLIPPED_ALIAS_KEYS[\"EnumBody\"];\nexport const ENUMMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"EnumMember\"];\nexport const JSX_TYPES = FLIPPED_ALIAS_KEYS[\"JSX\"];\nexport const MISCELLANEOUS_TYPES = FLIPPED_ALIAS_KEYS[\"Miscellaneous\"];\nexport const TYPESCRIPT_TYPES = FLIPPED_ALIAS_KEYS[\"TypeScript\"];\nexport const TSTYPEELEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"TSTypeElement\"];\nexport const TSTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSType\"];\nexport const TSBASETYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSBaseType\"];\n/**\n * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.\n */\nexport const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;\n","import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated/index.ts\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n","import toBlock from \"./toBlock.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n","import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n","import toIdentifier from \"./toIdentifier.ts\";\n\nexport default function toBindingIdentifierName(name: string): string {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n\n  return name;\n}\n","import { isIdentifier } from \"../validators/generated/index.ts\";\nimport { stringLiteral } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n","import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n","import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * A prefix AST traversal implementation meant for simple searching\n * and processing.\n */\nexport default function traverseFast<Options = {}>(\n  node: t.Node | null | undefined,\n  enter: (node: t.Node, opts?: Options) => void,\n  opts?: Options,\n): void {\n  if (!node) return;\n\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  opts = opts || ({} as Options);\n  enter(node, opts);\n\n  for (const key of keys) {\n    const subNode: t.Node | undefined | null =\n      // @ts-expect-error key must present in node\n      node[key];\n\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        traverseFast(node, enter, opts);\n      }\n    } else {\n      traverseFast(subNode, enter, opts);\n    }\n  }\n}\n","import { COMMENT_KEYS } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n","import traverseFast from \"../traverse/traverseFast.ts\";\nimport removeProperties from \"./removeProperties.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function removePropertiesDeep<T extends t.Node>(\n  tree: T,\n  opts?: { preserveComments: boolean } | null,\n): T {\n  traverseFast(tree, removeProperties, opts);\n\n  return tree;\n}\n","import {\n  isIdentifier,\n  isStringLiteral,\n} from \"../validators/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n","import {\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated/index.ts\";\nimport { expressionStatement } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default toStatement as {\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false {\n  if (isStatement(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n  } else if (isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n  } else if (isAssignmentExpression(node)) {\n    return expressionStatement(node);\n  }\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n","import isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if (isValidIdentifier(key)) {\n        nodeKey = identifier(key);\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n","import { memberExpression } from \"../builders/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Append a node to a member expression.\n */\nexport default function appendToMemberExpression(\n  member: t.MemberExpression,\n  append: t.MemberExpression[\"property\"],\n  computed: boolean = false,\n): t.MemberExpression {\n  member.object = memberExpression(\n    member.object,\n    member.property,\n    member.computed,\n  );\n  member.property = append;\n  member.computed = !!computed;\n\n  return member;\n}\n","import { INHERIT_KEYS } from \"../constants/index.ts\";\nimport inheritsComments from \"../comments/inheritsComments.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Inherit all contextual properties from `parent` node to `child` node.\n */\nexport default function inherits<T extends t.Node | null | undefined>(\n  child: T,\n  parent: t.Node | null | undefined,\n): T {\n  if (!child || !parent) return child;\n\n  // optionally inherit specific properties if not null\n  for (const key of INHERIT_KEYS.optional) {\n    // @ts-expect-error Fixme: refine parent types\n    if (child[key] == null) {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit \"private\" properties\n  for (const key of Object.keys(parent)) {\n    if (key[0] === \"_\" && key !== \"__clone\") {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit select properties\n  for (const key of INHERIT_KEYS.force) {\n    // @ts-expect-error Fixme: refine parent types\n    child[key] = parent[key];\n  }\n\n  inheritsComments(child, parent);\n\n  return child;\n}\n","import { memberExpression } from \"../builders/generated/index.ts\";\nimport { isSuper } from \"../index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Prepend a node to a member expression.\n */\nexport default function prependToMemberExpression<\n  T extends Pick<t.MemberExpression, \"object\" | \"property\">,\n>(member: T, prepend: t.MemberExpression[\"object\"]): T {\n  if (isSuper(member.object)) {\n    throw new Error(\n      \"Cannot prepend node to super property access (`super.foo`).\",\n    );\n  }\n  member.object = memberExpression(prepend, member.object);\n\n  return member;\n}\n","import {\n  isExportDeclaration,\n  isIdentifier,\n  isDeclaration,\n  isFunctionDeclaration,\n  isFunctionExpression,\n  isExportAllDeclaration,\n  isAssignmentExpression,\n  isUnaryExpression,\n} from \"../validators/generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport { getBindingIdentifiers as default };\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates: true,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, Array<t.Identifier>>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: false,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n\n/**\n * Return a list of binding identifiers associated with the input `node`.\n */\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n  newBindingsOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  const search: t.Node[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n\n    if (\n      newBindingsOnly &&\n      // These two nodes do not introduce _new_ bindings, but they are included\n      // in getBindingIdentifiers.keys for backwards compatibility.\n      // TODO(@nicolo-ribaudo): Check if we can remove them from .keys in a\n      // backward-compatible way, and if not what we need to do to remove them\n      // in Babel 8.\n      (isAssignmentExpression(id) || isUnaryExpression(id))\n    ) {\n      continue;\n    }\n\n    const keys =\n      // @ts-expect-error getBindingIdentifiers.keys do not cover all AST types\n      getBindingIdentifiers.keys[id.type];\n\n    if (isIdentifier(id)) {\n      if (duplicates) {\n        const _ids = (ids[id.name] = ids[id.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n\n    if (isExportDeclaration(id) && !isExportAllDeclaration(id)) {\n      if (isDeclaration(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (isFunctionDeclaration(id)) {\n        search.push(id.id);\n        continue;\n      }\n\n      if (isFunctionExpression(id)) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes =\n          // @ts-expect-error key must present in id\n          id[key] as t.Node[] | t.Node | undefined | null;\n        if (nodes) {\n          Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);\n        }\n      }\n    }\n  }\n\n  // $FlowIssue Object.create() seems broken\n  return ids;\n}\n\n/**\n * Mapping of types to their identifier keys.\n */\ngetBindingIdentifiers.keys = {\n  DeclareClass: [\"id\"],\n  DeclareFunction: [\"id\"],\n  DeclareModule: [\"id\"],\n  DeclareVariable: [\"id\"],\n  DeclareInterface: [\"id\"],\n  DeclareTypeAlias: [\"id\"],\n  DeclareOpaqueType: [\"id\"],\n  InterfaceDeclaration: [\"id\"],\n  TypeAlias: [\"id\"],\n  OpaqueType: [\"id\"],\n\n  CatchClause: [\"param\"],\n  LabeledStatement: [\"label\"],\n  UnaryExpression: [\"argument\"],\n  AssignmentExpression: [\"left\"],\n\n  ImportSpecifier: [\"local\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportDeclaration: [\"specifiers\"],\n\n  ExportSpecifier: [\"exported\"],\n  ExportNamespaceSpecifier: [\"exported\"],\n  ExportDefaultSpecifier: [\"exported\"],\n\n  FunctionDeclaration: [\"id\", \"params\"],\n  FunctionExpression: [\"id\", \"params\"],\n  ArrowFunctionExpression: [\"params\"],\n  ObjectMethod: [\"params\"],\n  ClassMethod: [\"params\"],\n  ClassPrivateMethod: [\"params\"],\n\n  ForInStatement: [\"left\"],\n  ForOfStatement: [\"left\"],\n\n  ClassDeclaration: [\"id\"],\n  ClassExpression: [\"id\"],\n\n  RestElement: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n\n  ObjectProperty: [\"value\"],\n\n  AssignmentPattern: [\"left\"],\n  ArrayPattern: [\"elements\"],\n  ObjectPattern: [\"properties\"],\n\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\"],\n};\n","import getBindingIdentifiers from \"./getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default getOuterBindingIdentifiers as {\n  (node: t.Node, duplicates: true): Record<string, Array<t.Identifier>>;\n  (node: t.Node, duplicates?: false): Record<string, t.Identifier>;\n  (\n    node: t.Node,\n    duplicates?: boolean,\n  ): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n};\n\nfunction getOuterBindingIdentifiers(\n  node: t.Node,\n  duplicates: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  return getBindingIdentifiers(node, duplicates, true);\n}\n","import { VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n","import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers.ts\";\nimport type * as t from \"../index.ts\";\n/**\n * Check if the input `node` is a binding identifier.\n */\nexport default function isBinding(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  if (\n    grandparent &&\n    node.type === \"Identifier\" &&\n    parent.type === \"ObjectProperty\" &&\n    grandparent.type === \"ObjectExpression\"\n  ) {\n    // We need to special-case this, because getBindingIdentifiers\n    // has an ObjectProperty->value entry for destructuring patterns.\n    return false;\n  }\n\n  const keys =\n    // @ts-expect-error getBindingIdentifiers.keys does not cover all AST types\n    getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val =\n        // @ts-expect-error key must present in parent\n        parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n","import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\nexport default function isLet(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node) &&\n    (node.kind !== \"var\" ||\n      // @ts-expect-error Fixme: document private properties\n      node[BLOCK_SCOPED_SYMBOL])\n  );\n}\n","import {\n  isClassDeclaration,\n  isFunctionDeclaration,\n} from \"./generated/index.ts\";\nimport isLet from \"./isLet.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is block scoped.\n */\nexport default function isBlockScoped(node: t.Node): boolean {\n  return isFunctionDeclaration(node) || isClassDeclaration(node) || isLet(node);\n}\n","import isType from \"./isType.ts\";\nimport { isIdentifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n","import { NODE_FIELDS, VISITOR_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if two nodes are equivalent\n */\nexport default function isNodesEquivalent<T extends Partial<t.Node>>(\n  a: T,\n  b: any,\n): b is T {\n  if (\n    typeof a !== \"object\" ||\n    typeof b !== \"object\" ||\n    a == null ||\n    b == null\n  ) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    const val_a =\n      // @ts-expect-error field must present in a\n      a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (typeof val_a === \"object\" && !visitorKeys?.includes(field)) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\nexport default function isReferenced(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      // parent.value === node\n      return !grandparent || grandparent.type !== \"ObjectPattern\";\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      // @ts-expect-error todo(flow->ts): Property 'source' does not exist on type 'AnyTypeAnnotation'.\n      if (grandparent?.source) {\n        return false;\n      }\n      return parent.local === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: type X = { someProperty: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n\n      return true;\n  }\n\n  return true;\n}\n","import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n","import { isIdentifier, isImportDefaultSpecifier } from \"./generated/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\nexport default function isSpecifierDefault(\n  specifier: t.ModuleSpecifier,\n): boolean {\n  return (\n    isImportDefaultSpecifier(specifier) ||\n    // @ts-expect-error todo(flow->ts): stricter type for specifier\n    isIdentifier(specifier.imported || specifier.exported, {\n      name: \"default\",\n    })\n  );\n}\n","import isValidIdentifier from \"./isValidIdentifier.ts\";\n\nconst RESERVED_WORDS_ES3_ONLY: Set<string> = new Set([\n  \"abstract\",\n  \"boolean\",\n  \"byte\",\n  \"char\",\n  \"double\",\n  \"enum\",\n  \"final\",\n  \"float\",\n  \"goto\",\n  \"implements\",\n  \"int\",\n  \"interface\",\n  \"long\",\n  \"native\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"short\",\n  \"static\",\n  \"synchronized\",\n  \"throws\",\n  \"transient\",\n  \"volatile\",\n]);\n\n/**\n * Check if the input `name` is a valid identifier name according to the ES3 specification.\n *\n * Additional ES3 reserved words are\n */\nexport default function isValidES3Identifier(name: string): boolean {\n  return isValidIdentifier(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n","import { isVariableDeclaration } from \"./generated/index.ts\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants/index.ts\";\nimport type * as t from \"../index.ts\";\n\n/**\n * Check if the input `node` is a variable declaration.\n */\nexport default function isVar(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node, { kind: \"var\" }) &&\n    !(\n      // @ts-expect-error document private properties\n      node[BLOCK_SCOPED_SYMBOL]\n    )\n  );\n}\n","import isReactComponent from \"./validators/react/isReactComponent.ts\";\nimport isCompatTag from \"./validators/react/isCompatTag.ts\";\nimport buildChildren from \"./builders/react/buildChildren.ts\";\n\n// asserts\nexport { default as assertNode } from \"./asserts/assertNode.ts\";\nexport * from \"./asserts/generated/index.ts\";\n\n// builders\nexport { default as createTypeAnnotationBasedOnTypeof } from \"./builders/flow/createTypeAnnotationBasedOnTypeof.ts\";\n/** @deprecated use createFlowUnionType instead */\nexport { default as createUnionTypeAnnotation } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createFlowUnionType } from \"./builders/flow/createFlowUnionType.ts\";\nexport { default as createTSUnionType } from \"./builders/typescript/createTSUnionType.ts\";\nexport * from \"./builders/generated/index.ts\";\nexport * from \"./builders/generated/uppercase.js\";\nexport * from \"./builders/productions.ts\";\n\n// clone\nexport { default as cloneNode } from \"./clone/cloneNode.ts\";\nexport { default as clone } from \"./clone/clone.ts\";\nexport { default as cloneDeep } from \"./clone/cloneDeep.ts\";\nexport { default as cloneDeepWithoutLoc } from \"./clone/cloneDeepWithoutLoc.ts\";\nexport { default as cloneWithoutLoc } from \"./clone/cloneWithoutLoc.ts\";\n\n// comments\nexport { default as addComment } from \"./comments/addComment.ts\";\nexport { default as addComments } from \"./comments/addComments.ts\";\nexport { default as inheritInnerComments } from \"./comments/inheritInnerComments.ts\";\nexport { default as inheritLeadingComments } from \"./comments/inheritLeadingComments.ts\";\nexport { default as inheritsComments } from \"./comments/inheritsComments.ts\";\nexport { default as inheritTrailingComments } from \"./comments/inheritTrailingComments.ts\";\nexport { default as removeComments } from \"./comments/removeComments.ts\";\n\n// constants\nexport * from \"./constants/generated/index.ts\";\nexport * from \"./constants/index.ts\";\n\n// converters\nexport { default as ensureBlock } from \"./converters/ensureBlock.ts\";\nexport { default as toBindingIdentifierName } from \"./converters/toBindingIdentifierName.ts\";\nexport { default as toBlock } from \"./converters/toBlock.ts\";\nexport { default as toComputedKey } from \"./converters/toComputedKey.ts\";\nexport { default as toExpression } from \"./converters/toExpression.ts\";\nexport { default as toIdentifier } from \"./converters/toIdentifier.ts\";\nexport { default as toKeyAlias } from \"./converters/toKeyAlias.ts\";\nexport { default as toStatement } from \"./converters/toStatement.ts\";\nexport { default as valueToNode } from \"./converters/valueToNode.ts\";\n\n// definitions\nexport * from \"./definitions/index.ts\";\n\n// modifications\nexport { default as appendToMemberExpression } from \"./modifications/appendToMemberExpression.ts\";\nexport { default as inherits } from \"./modifications/inherits.ts\";\nexport { default as prependToMemberExpression } from \"./modifications/prependToMemberExpression.ts\";\nexport {\n  default as removeProperties,\n  type Options as RemovePropertiesOptions,\n} from \"./modifications/removeProperties.ts\";\nexport { default as removePropertiesDeep } from \"./modifications/removePropertiesDeep.ts\";\nexport { default as removeTypeDuplicates } from \"./modifications/flow/removeTypeDuplicates.ts\";\n\n// retrievers\nexport { default as getBindingIdentifiers } from \"./retrievers/getBindingIdentifiers.ts\";\nexport { default as getOuterBindingIdentifiers } from \"./retrievers/getOuterBindingIdentifiers.ts\";\n\n// traverse\nexport { default as traverse } from \"./traverse/traverse.ts\";\nexport * from \"./traverse/traverse.ts\";\nexport { default as traverseFast } from \"./traverse/traverseFast.ts\";\n\n// utils\nexport { default as shallowEqual } from \"./utils/shallowEqual.ts\";\n\n// validators\nexport { default as is } from \"./validators/is.ts\";\nexport { default as isBinding } from \"./validators/isBinding.ts\";\nexport { default as isBlockScoped } from \"./validators/isBlockScoped.ts\";\nexport { default as isImmutable } from \"./validators/isImmutable.ts\";\nexport { default as isLet } from \"./validators/isLet.ts\";\nexport { default as isNode } from \"./validators/isNode.ts\";\nexport { default as isNodesEquivalent } from \"./validators/isNodesEquivalent.ts\";\nexport { default as isPlaceholderType } from \"./validators/isPlaceholderType.ts\";\nexport { default as isReferenced } from \"./validators/isReferenced.ts\";\nexport { default as isScope } from \"./validators/isScope.ts\";\nexport { default as isSpecifierDefault } from \"./validators/isSpecifierDefault.ts\";\nexport { default as isType } from \"./validators/isType.ts\";\nexport { default as isValidES3Identifier } from \"./validators/isValidES3Identifier.ts\";\nexport { default as isValidIdentifier } from \"./validators/isValidIdentifier.ts\";\nexport { default as isVar } from \"./validators/isVar.ts\";\nexport { default as matchesPattern } from \"./validators/matchesPattern.ts\";\nexport { default as validate } from \"./validators/validate.ts\";\nexport { default as buildMatchMemberExpression } from \"./validators/buildMatchMemberExpression.ts\";\nexport * from \"./validators/generated/index.ts\";\n\n// react\nexport const react = {\n  isReactComponent,\n  isCompatTag,\n  buildChildren,\n};\n\nexport type * from \"./ast-types/generated/index.ts\";\n\n// this is used by @babel/traverse to warn about deprecated visitors\nexport { default as __internal__deprecationWarning } from \"./utils/deprecationWarning.ts\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.toSequenceExpression =\n    // eslint-disable-next-line no-restricted-globals\n    require(\"./converters/toSequenceExpression.js\").default;\n}\n"],"names":["shallowEqual","actual","expected","keys","Object","key","warnings","Set","deprecationWarning","oldName","newName","prefix","has","add","internal","trace","captureShortStackTrace","console","warn","skip","length","stackTraceLimit","prepareStackTrace","Error","stackTrace","err","stack","shortStackTrace","slice","test","getFileName","map","frame","join","isArrayExpression","node","opts","type","isAssignmentExpression","isBinaryExpression","isInterpreterDirective","isDirective","isDirectiveLiteral","isBlockStatement","isBreakStatement","isCallExpression","isCatchClause","isConditionalExpression","isContinueStatement","isDebuggerStatement","isDoWhileStatement","isEmptyStatement","isExpressionStatement","isFile","isForInStatement","isForStatement","isFunctionDeclaration","isFunctionExpression","isIdentifier","isIfStatement","isLabeledStatement","isStringLiteral","isNumericLiteral","isNullLiteral","isBooleanLiteral","isRegExpLiteral","isLogicalExpression","isMemberExpression","isNewExpression","isProgram","isObjectExpression","isObjectMethod","isObjectProperty","isRestElement","isReturnStatement","isSequenceExpression","isParenthesizedExpression","isSwitchCase","isSwitchStatement","isThisExpression","isThrowStatement","isTryStatement","isUnaryExpression","isUpdateExpression","isVariableDeclaration","isVariableDeclarator","isWhileStatement","isWithStatement","isAssignmentPattern","isArrayPattern","isArrowFunctionExpression","isClassBody","isClassExpression","isClassDeclaration","isExportAllDeclaration","isExportDefaultDeclaration","isExportNamedDeclaration","isExportSpecifier","isForOfStatement","isImportDeclaration","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","isImportExpression","isMetaProperty","isClassMethod","isObjectPattern","isSpreadElement","isSuper","isTaggedTemplateExpression","isTemplateElement","isTemplateLiteral","isYieldExpression","isAwaitExpression","isImport","isBigIntLiteral","isExportNamespaceSpecifier","isOptionalMemberExpression","isOptionalCallExpression","isClassProperty","isClassAccessorProperty","isClassPrivateProperty","isClassPrivateMethod","isPrivateName","isStaticBlock","isAnyTypeAnnotation","isArrayTypeAnnotation","isBooleanTypeAnnotation","isBooleanLiteralTypeAnnotation","isNullLiteralTypeAnnotation","isClassImplements","isDeclareClass","isDeclareFunction","isDeclareInterface","isDeclareModule","isDeclareModuleExports","isDeclareTypeAlias","isDeclareOpaqueType","isDeclareVariable","isDeclareExportDeclaration","isDeclareExportAllDeclaration","isDeclaredPredicate","isExistsTypeAnnotation","isFunctionTypeAnnotation","isFunctionTypeParam","isGenericTypeAnnotation","isInferredPredicate","isInterfaceExtends","isInterfaceDeclaration","isInterfaceTypeAnnotation","isIntersectionTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isNullableTypeAnnotation","isNumberLiteralTypeAnnotation","isNumberTypeAnnotation","isObjectTypeAnnotation","isObjectTypeInternalSlot","isObjectTypeCallProperty","isObjectTypeIndexer","isObjectTypeProperty","isObjectTypeSpreadProperty","isOpaqueType","isQualifiedTypeIdentifier","isStringLiteralTypeAnnotation","isStringTypeAnnotation","isSymbolTypeAnnotation","isThisTypeAnnotation","isTupleTypeAnnotation","isTypeofTypeAnnotation","isTypeAlias","isTypeAnnotation","isTypeCastExpression","isTypeParameter","isTypeParameterDeclaration","isTypeParameterInstantiation","isUnionTypeAnnotation","isVariance","isVoidTypeAnnotation","isEnumDeclaration","isEnumBooleanBody","isEnumNumberBody","isEnumStringBody","isEnumSymbolBody","isEnumBooleanMember","isEnumNumberMember","isEnumStringMember","isEnumDefaultedMember","isIndexedAccessType","isOptionalIndexedAccessType","isJSXAttribute","isJSXClosingElement","isJSXElement","isJSXEmptyExpression","isJSXExpressionContainer","isJSXSpreadChild","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXOpeningElement","isJSXSpreadAttribute","isJSXText","isJSXFragment","isJSXOpeningFragment","isJSXClosingFragment","isNoop","isPlaceholder","isV8IntrinsicIdentifier","isArgumentPlaceholder","isBindExpression","isImportAttribute","isDecorator","isDoExpression","isExportDefaultSpecifier","isRecordExpression","isTupleExpression","isDecimalLiteral","isModuleExpression","isTopicReference","isPipelineTopicExpression","isPipelineBareFunction","isPipelinePrimaryTopicReference","isTSParameterProperty","isTSDeclareFunction","isTSDeclareMethod","isTSQualifiedName","isTSCallSignatureDeclaration","isTSConstructSignatureDeclaration","isTSPropertySignature","isTSMethodSignature","isTSIndexSignature","isTSAnyKeyword","isTSBooleanKeyword","isTSBigIntKeyword","isTSIntrinsicKeyword","isTSNeverKeyword","isTSNullKeyword","isTSNumberKeyword","isTSObjectKeyword","isTSStringKeyword","isTSSymbolKeyword","isTSUndefinedKeyword","isTSUnknownKeyword","isTSVoidKeyword","isTSThisType","isTSFunctionType","isTSConstructorType","isTSTypeReference","isTSTypePredicate","isTSTypeQuery","isTSTypeLiteral","isTSArrayType","isTSTupleType","isTSOptionalType","isTSRestType","isTSNamedTupleMember","isTSUnionType","isTSIntersectionType","isTSConditionalType","isTSInferType","isTSParenthesizedType","isTSTypeOperator","isTSIndexedAccessType","isTSMappedType","isTSLiteralType","isTSExpressionWithTypeArguments","isTSInterfaceDeclaration","isTSInterfaceBody","isTSTypeAliasDeclaration","isTSInstantiationExpression","isTSAsExpression","isTSSatisfiesExpression","isTSTypeAssertion","isTSEnumDeclaration","isTSEnumMember","isTSModuleDeclaration","isTSModuleBlock","isTSImportType","isTSImportEqualsDeclaration","isTSExternalModuleReference","isTSNonNullExpression","isTSExportAssignment","isTSNamespaceExportDeclaration","isTSTypeAnnotation","isTSTypeParameterInstantiation","isTSTypeParameterDeclaration","isTSTypeParameter","isStandardized","expectedNode","isExpression","isBinary","isScopable","isBlockParent","isBlock","isStatement","isTerminatorless","isCompletionStatement","isConditional","isLoop","isWhile","isExpressionWrapper","isFor","isForXStatement","isFunction","isFunctionParent","isPureish","isDeclaration","isPatternLike","isLVal","isTSEntityName","isLiteral","isUserWhitespacable","isMethod","isObjectMember","isProperty","isUnaryLike","isPattern","isClass","isImportOrExportDeclaration","isExportDeclaration","isModuleSpecifier","isAccessor","isPrivate","isFlow","isFlowType","isFlowBaseAnnotation","isFlowDeclaration","isFlowPredicate","isEnumBody","isEnumMember","isJSX","isMiscellaneous","isTypeScript","isTSTypeElement","isTSType","isTSBaseType","isNumberLiteral","isRegexLiteral","isRestProperty","isSpreadProperty","isModuleDeclaration","matchesPattern","member","match","allowPartial","parts","Array","isArray","split","nodes","object","push","property","i","j","value","name","buildMatchMemberExpression","isReactComponent","isCompatTag","tagName","isType","nodeType","targetType","ALIAS_KEYS","aliases","FLIPPED_ALIAS_KEYS","alias","isPlaceholderType","placeholderType","PLACEHOLDERS_ALIAS","is","matches","isValidIdentifier","reserved","isKeyword","isStrictReservedWord","isIdentifierName","STATEMENT_OR_BLOCK_KEYS","FLATTENABLE_KEYS","FOR_INIT_KEYS","COMMENT_KEYS","LOGICAL_OPERATORS","UPDATE_OPERATORS","BOOLEAN_NUMBER_BINARY_OPERATORS","EQUALITY_BINARY_OPERATORS","COMPARISON_BINARY_OPERATORS","BOOLEAN_BINARY_OPERATORS","NUMBER_BINARY_OPERATORS","BINARY_OPERATORS","ASSIGNMENT_OPERATORS","op","BOOLEAN_UNARY_OPERATORS","NUMBER_UNARY_OPERATORS","STRING_UNARY_OPERATORS","UNARY_OPERATORS","INHERIT_KEYS","optional","force","BLOCK_SCOPED_SYMBOL","Symbol","for","NOT_LOCAL_BINDING","VISITOR_KEYS","NODE_FIELDS","BUILDER_KEYS","DEPRECATED_KEYS","NODE_PARENT_VALIDATIONS","getType","val","validate","typeIs","typeName","assertNodeType","validateType","validateOptional","validateOptionalType","arrayOf","elementType","chain","assertValueType","assertEach","arrayOfType","validateArrayOfType","callback","validator","subkey","v","process","env","BABEL_TYPES_8_BREAKING","validateChild","each","assertOneOf","values","indexOf","TypeError","JSON","stringify","oneOf","types","oneOfNodeTypes","assertNodeOrValueType","oneOfNodeOrValueTypes","valid","assertShape","shape","errors","validateField","error","message","shapeOf","assertOptionalChainStart","current","callee","fns","args","fn","chainOf","validTypeOpts","validFieldKeys","store","defineAliasedType","defined","inherits","additional","filter","a","includes","unshift","defineType","fields","getOwnPropertyNames","field","def","default","deprecated","visitor","builder","k","deprecatedAlias","concat","undefined","forEach","elements","operator","identifier","pattern","left","right","expression","inOp","assign","directives","body","label","arguments","typeArguments","typeParameters","param","consequent","alternate","program","comments","tokens","init","update","functionCommon","params","generator","async","functionTypeAnnotationCommon","returnType","functionDeclarationCommon","declare","id","predicate","parent","patternLikeCommon","typeAnnotation","decorators","exec","parentKey","nonComp","computed","imported","meta","isReservedWord","Number","isFinite","flags","invalid","normal","sourceType","interpreter","properties","kind","shorthand","argument","listKey","index","expressions","discriminant","cases","block","handler","finalizer","declarations","without","definite","superClass","superTypeParameters","implements","mixins","abstract","source","exportKind","attributes","assertions","declaration","specifiers","sourced","sourceless","local","exported","lval","await","module","phase","importKind","options","classMethodOrPropertyCommon","accessibility","static","override","classMethodOrDeclareMethodCommon","access","tag","quasi","raw","cooked","templateElementCookedValidator","unterminatedCalled","str","firstInvalidLoc","readStringContents","unterminated","strictNumericEscape","invalidEscapeSequence","numericSeparatorInEscapeSequence","unexpectedNumericSeparator","invalidDigit","invalidCodePoint","tail","quasis","delegate","readonly","variance","defineInterfaceishType","extends","supertype","impltype","rest","this","indexers","callProperties","internalSlots","exact","inexact","method","proto","qualification","bound","explicitType","members","hasUnknownMembers","objectType","indexType","openingElement","closingElement","children","namespace","selfClosing","openingFragment","closingFragment","PLACEHOLDERS","Declaration","Pattern","PLACEHOLDERS_FLIPPED_ALIAS","hasOwn","bool","tSFunctionTypeAnnotationCommon","parameter","signatureDeclarationCommon","callConstructSignatureDeclaration","namedTypeElementCommon","parameters","tsKeywordTypes","fnOrCtrBase","parameterName","asserts","exprName","elementTypes","unionOrIntersection","checkType","extendsType","trueType","falseType","typeParameter","nameType","literal","unaryExpression","unaryOperator","TSTypeExpression","const","initializer","global","qualifier","isExport","moduleReference","in","out","constraint","DEPRECATED_ALIASES","ModuleDeclaration","toFastProperties","TYPES","validateNode","arrayExpression","assignmentExpression","binaryExpression","interpreterDirective","directive","directiveLiteral","blockStatement","breakStatement","callExpression","_arguments","catchClause","conditionalExpression","continueStatement","debuggerStatement","doWhileStatement","emptyStatement","expressionStatement","file","forInStatement","forStatement","functionDeclaration","functionExpression","ifStatement","labeledStatement","stringLiteral","numericLiteral","nullLiteral","booleanLiteral","regExpLiteral","logicalExpression","memberExpression","newExpression","objectExpression","objectMethod","objectProperty","restElement","returnStatement","sequenceExpression","parenthesizedExpression","switchCase","switchStatement","thisExpression","throwStatement","tryStatement","updateExpression","variableDeclaration","variableDeclarator","whileStatement","withStatement","assignmentPattern","arrayPattern","arrowFunctionExpression","classBody","classExpression","classDeclaration","exportAllDeclaration","exportDefaultDeclaration","exportNamedDeclaration","exportSpecifier","forOfStatement","_await","importDeclaration","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","importExpression","metaProperty","classMethod","_static","objectPattern","spreadElement","_super","taggedTemplateExpression","templateElement","templateLiteral","yieldExpression","awaitExpression","_import","bigIntLiteral","exportNamespaceSpecifier","optionalMemberExpression","optionalCallExpression","classProperty","classAccessorProperty","classPrivateProperty","classPrivateMethod","privateName","staticBlock","anyTypeAnnotation","arrayTypeAnnotation","booleanTypeAnnotation","booleanLiteralTypeAnnotation","nullLiteralTypeAnnotation","classImplements","declareClass","_extends","declareFunction","declareInterface","declareModule","declareModuleExports","declareTypeAlias","declareOpaqueType","declareVariable","declareExportDeclaration","declareExportAllDeclaration","declaredPredicate","existsTypeAnnotation","functionTypeAnnotation","functionTypeParam","genericTypeAnnotation","inferredPredicate","interfaceExtends","interfaceDeclaration","interfaceTypeAnnotation","intersectionTypeAnnotation","mixedTypeAnnotation","emptyTypeAnnotation","nullableTypeAnnotation","numberLiteralTypeAnnotation","numberTypeAnnotation","objectTypeAnnotation","objectTypeInternalSlot","objectTypeCallProperty","objectTypeIndexer","objectTypeProperty","objectTypeSpreadProperty","opaqueType","qualifiedTypeIdentifier","stringLiteralTypeAnnotation","stringTypeAnnotation","symbolTypeAnnotation","thisTypeAnnotation","tupleTypeAnnotation","typeofTypeAnnotation","typeAlias","typeCastExpression","_default","typeParameterDeclaration","typeParameterInstantiation","unionTypeAnnotation","voidTypeAnnotation","enumDeclaration","enumBooleanBody","enumNumberBody","enumStringBody","enumSymbolBody","enumBooleanMember","enumNumberMember","enumStringMember","enumDefaultedMember","indexedAccessType","optionalIndexedAccessType","jsxAttribute","jsxClosingElement","jsxElement","jsxEmptyExpression","jsxExpressionContainer","jsxSpreadChild","jsxIdentifier","jsxMemberExpression","jsxNamespacedName","jsxOpeningElement","jsxSpreadAttribute","jsxText","jsxFragment","jsxOpeningFragment","jsxClosingFragment","noop","placeholder","v8IntrinsicIdentifier","argumentPlaceholder","bindExpression","importAttribute","decorator","doExpression","exportDefaultSpecifier","recordExpression","tupleExpression","decimalLiteral","moduleExpression","topicReference","pipelineTopicExpression","pipelineBareFunction","pipelinePrimaryTopicReference","tsParameterProperty","tsDeclareFunction","tsDeclareMethod","tsQualifiedName","tsCallSignatureDeclaration","tsConstructSignatureDeclaration","tsPropertySignature","tsMethodSignature","tsIndexSignature","tsAnyKeyword","tsBooleanKeyword","tsBigIntKeyword","tsIntrinsicKeyword","tsNeverKeyword","tsNullKeyword","tsNumberKeyword","tsObjectKeyword","tsStringKeyword","tsSymbolKeyword","tsUndefinedKeyword","tsUnknownKeyword","tsVoidKeyword","tsThisType","tsFunctionType","tsConstructorType","tsTypeReference","tsTypePredicate","tsTypeQuery","tsTypeLiteral","tsArrayType","tsTupleType","tsOptionalType","tsRestType","tsNamedTupleMember","tsUnionType","tsIntersectionType","tsConditionalType","tsInferType","tsParenthesizedType","tsTypeOperator","tsIndexedAccessType","tsMappedType","tsLiteralType","tsExpressionWithTypeArguments","tsInterfaceDeclaration","tsInterfaceBody","tsTypeAliasDeclaration","tsInstantiationExpression","tsAsExpression","tsSatisfiesExpression","tsTypeAssertion","tsEnumDeclaration","tsEnumMember","tsModuleDeclaration","tsModuleBlock","tsImportType","tsImportEqualsDeclaration","tsExternalModuleReference","tsNonNullExpression","tsExportAssignment","tsNamespaceExportDeclaration","tsTypeAnnotation","tsTypeParameterInstantiation","tsTypeParameterDeclaration","tsTypeParameter","NumberLiteral","RegexLiteral","RestProperty","SpreadProperty","cleanJSXElementLiteralChild","child","lines","lastNonEmptyLine","line","isFirstLine","isLastLine","isLastNonEmptyLine","trimmedLine","replace","buildChildren","isNode","assertNode","assert","assertArrayExpression","assertAssignmentExpression","assertBinaryExpression","assertInterpreterDirective","assertDirective","assertDirectiveLiteral","assertBlockStatement","assertBreakStatement","assertCallExpression","assertCatchClause","assertConditionalExpression","assertContinueStatement","assertDebuggerStatement","assertDoWhileStatement","assertEmptyStatement","assertExpressionStatement","assertFile","assertForInStatement","assertForStatement","assertFunctionDeclaration","assertFunctionExpression","assertIdentifier","assertIfStatement","assertLabeledStatement","assertStringLiteral","assertNumericLiteral","assertNullLiteral","assertBooleanLiteral","assertRegExpLiteral","assertLogicalExpression","assertMemberExpression","assertNewExpression","assertProgram","assertObjectExpression","assertObjectMethod","assertObjectProperty","assertRestElement","assertReturnStatement","assertSequenceExpression","assertParenthesizedExpression","assertSwitchCase","assertSwitchStatement","assertThisExpression","assertThrowStatement","assertTryStatement","assertUnaryExpression","assertUpdateExpression","assertVariableDeclaration","assertVariableDeclarator","assertWhileStatement","assertWithStatement","assertAssignmentPattern","assertArrayPattern","assertArrowFunctionExpression","assertClassBody","assertClassExpression","assertClassDeclaration","assertExportAllDeclaration","assertExportDefaultDeclaration","assertExportNamedDeclaration","assertExportSpecifier","assertForOfStatement","assertImportDeclaration","assertImportDefaultSpecifier","assertImportNamespaceSpecifier","assertImportSpecifier","assertImportExpression","assertMetaProperty","assertClassMethod","assertObjectPattern","assertSpreadElement","assertSuper","assertTaggedTemplateExpression","assertTemplateElement","assertTemplateLiteral","assertYieldExpression","assertAwaitExpression","assertImport","assertBigIntLiteral","assertExportNamespaceSpecifier","assertOptionalMemberExpression","assertOptionalCallExpression","assertClassProperty","assertClassAccessorProperty","assertClassPrivateProperty","assertClassPrivateMethod","assertPrivateName","assertStaticBlock","assertAnyTypeAnnotation","assertArrayTypeAnnotation","assertBooleanTypeAnnotation","assertBooleanLiteralTypeAnnotation","assertNullLiteralTypeAnnotation","assertClassImplements","assertDeclareClass","assertDeclareFunction","assertDeclareInterface","assertDeclareModule","assertDeclareModuleExports","assertDeclareTypeAlias","assertDeclareOpaqueType","assertDeclareVariable","assertDeclareExportDeclaration","assertDeclareExportAllDeclaration","assertDeclaredPredicate","assertExistsTypeAnnotation","assertFunctionTypeAnnotation","assertFunctionTypeParam","assertGenericTypeAnnotation","assertInferredPredicate","assertInterfaceExtends","assertInterfaceDeclaration","assertInterfaceTypeAnnotation","assertIntersectionTypeAnnotation","assertMixedTypeAnnotation","assertEmptyTypeAnnotation","assertNullableTypeAnnotation","assertNumberLiteralTypeAnnotation","assertNumberTypeAnnotation","assertObjectTypeAnnotation","assertObjectTypeInternalSlot","assertObjectTypeCallProperty","assertObjectTypeIndexer","assertObjectTypeProperty","assertObjectTypeSpreadProperty","assertOpaqueType","assertQualifiedTypeIdentifier","assertStringLiteralTypeAnnotation","assertStringTypeAnnotation","assertSymbolTypeAnnotation","assertThisTypeAnnotation","assertTupleTypeAnnotation","assertTypeofTypeAnnotation","assertTypeAlias","assertTypeAnnotation","assertTypeCastExpression","assertTypeParameter","assertTypeParameterDeclaration","assertTypeParameterInstantiation","assertUnionTypeAnnotation","assertVariance","assertVoidTypeAnnotation","assertEnumDeclaration","assertEnumBooleanBody","assertEnumNumberBody","assertEnumStringBody","assertEnumSymbolBody","assertEnumBooleanMember","assertEnumNumberMember","assertEnumStringMember","assertEnumDefaultedMember","assertIndexedAccessType","assertOptionalIndexedAccessType","assertJSXAttribute","assertJSXClosingElement","assertJSXElement","assertJSXEmptyExpression","assertJSXExpressionContainer","assertJSXSpreadChild","assertJSXIdentifier","assertJSXMemberExpression","assertJSXNamespacedName","assertJSXOpeningElement","assertJSXSpreadAttribute","assertJSXText","assertJSXFragment","assertJSXOpeningFragment","assertJSXClosingFragment","assertNoop","assertPlaceholder","assertV8IntrinsicIdentifier","assertArgumentPlaceholder","assertBindExpression","assertImportAttribute","assertDecorator","assertDoExpression","assertExportDefaultSpecifier","assertRecordExpression","assertTupleExpression","assertDecimalLiteral","assertModuleExpression","assertTopicReference","assertPipelineTopicExpression","assertPipelineBareFunction","assertPipelinePrimaryTopicReference","assertTSParameterProperty","assertTSDeclareFunction","assertTSDeclareMethod","assertTSQualifiedName","assertTSCallSignatureDeclaration","assertTSConstructSignatureDeclaration","assertTSPropertySignature","assertTSMethodSignature","assertTSIndexSignature","assertTSAnyKeyword","assertTSBooleanKeyword","assertTSBigIntKeyword","assertTSIntrinsicKeyword","assertTSNeverKeyword","assertTSNullKeyword","assertTSNumberKeyword","assertTSObjectKeyword","assertTSStringKeyword","assertTSSymbolKeyword","assertTSUndefinedKeyword","assertTSUnknownKeyword","assertTSVoidKeyword","assertTSThisType","assertTSFunctionType","assertTSConstructorType","assertTSTypeReference","assertTSTypePredicate","assertTSTypeQuery","assertTSTypeLiteral","assertTSArrayType","assertTSTupleType","assertTSOptionalType","assertTSRestType","assertTSNamedTupleMember","assertTSUnionType","assertTSIntersectionType","assertTSConditionalType","assertTSInferType","assertTSParenthesizedType","assertTSTypeOperator","assertTSIndexedAccessType","assertTSMappedType","assertTSLiteralType","assertTSExpressionWithTypeArguments","assertTSInterfaceDeclaration","assertTSInterfaceBody","assertTSTypeAliasDeclaration","assertTSInstantiationExpression","assertTSAsExpression","assertTSSatisfiesExpression","assertTSTypeAssertion","assertTSEnumDeclaration","assertTSEnumMember","assertTSModuleDeclaration","assertTSModuleBlock","assertTSImportType","assertTSImportEqualsDeclaration","assertTSExternalModuleReference","assertTSNonNullExpression","assertTSExportAssignment","assertTSNamespaceExportDeclaration","assertTSTypeAnnotation","assertTSTypeParameterInstantiation","assertTSTypeParameterDeclaration","assertTSTypeParameter","assertStandardized","assertExpression","assertBinary","assertScopable","assertBlockParent","assertBlock","assertStatement","assertTerminatorless","assertCompletionStatement","assertConditional","assertLoop","assertWhile","assertExpressionWrapper","assertFor","assertForXStatement","assertFunction","assertFunctionParent","assertPureish","assertDeclaration","assertPatternLike","assertLVal","assertTSEntityName","assertLiteral","assertImmutable","assertUserWhitespacable","assertMethod","assertObjectMember","assertProperty","assertUnaryLike","assertPattern","assertClass","assertImportOrExportDeclaration","assertExportDeclaration","assertModuleSpecifier","assertAccessor","assertPrivate","assertFlow","assertFlowType","assertFlowBaseAnnotation","assertFlowDeclaration","assertFlowPredicate","assertEnumBody","assertEnumMember","assertJSX","assertMiscellaneous","assertTypeScript","assertTSTypeElement","assertTSType","assertTSBaseType","assertNumberLiteral","assertRegexLiteral","assertRestProperty","assertSpreadProperty","assertModuleDeclaration","createTypeAnnotationBasedOnTypeof","getQualifiedName","removeTypeDuplicates","nodesIn","from","generics","Map","bases","typeGroups","set","existing","get","baseType","genericName","createFlowUnionType","flattened","createTSUnionType","typeAnnotations","buildUndefinedNode","cloneIfNode","obj","deep","withoutLoc","commentsCache","cloneNodeInternal","cloneIfNodeOrArray","cloneNode","newNode","maybeCloneComments","loc","leadingComments","innerComments","trailingComments","extra","comment","cache","ret","clone","cloneDeep","cloneDeepWithoutLoc","cloneWithoutLoc","addComments","addComment","content","inherit","Boolean","inheritInnerComments","inheritLeadingComments","inheritTrailingComments","inheritsComments","removeComments","STANDARDIZED_TYPES","EXPRESSION_TYPES","BINARY_TYPES","SCOPABLE_TYPES","BLOCKPARENT_TYPES","BLOCK_TYPES","STATEMENT_TYPES","TERMINATORLESS_TYPES","COMPLETIONSTATEMENT_TYPES","CONDITIONAL_TYPES","LOOP_TYPES","WHILE_TYPES","EXPRESSIONWRAPPER_TYPES","FOR_TYPES","FORXSTATEMENT_TYPES","FUNCTION_TYPES","FUNCTIONPARENT_TYPES","PUREISH_TYPES","DECLARATION_TYPES","PATTERNLIKE_TYPES","LVAL_TYPES","TSENTITYNAME_TYPES","LITERAL_TYPES","IMMUTABLE_TYPES","USERWHITESPACABLE_TYPES","METHOD_TYPES","OBJECTMEMBER_TYPES","PROPERTY_TYPES","UNARYLIKE_TYPES","PATTERN_TYPES","CLASS_TYPES","IMPORTOREXPORTDECLARATION_TYPES","EXPORTDECLARATION_TYPES","MODULESPECIFIER_TYPES","ACCESSOR_TYPES","PRIVATE_TYPES","FLOW_TYPES","FLOWTYPE_TYPES","FLOWBASEANNOTATION_TYPES","FLOWDECLARATION_TYPES","FLOWPREDICATE_TYPES","ENUMBODY_TYPES","ENUMMEMBER_TYPES","JSX_TYPES","MISCELLANEOUS_TYPES","TYPESCRIPT_TYPES","TSTYPEELEMENT_TYPES","TSTYPE_TYPES","TSBASETYPE_TYPES","MODULEDECLARATION_TYPES","toBlock","blockNodes","ensureBlock","result","toIdentifier","input","c","isIdentifierChar","codePointAt","toUpperCase","toBindingIdentifierName","toComputedKey","toExpression","traverseFast","enter","subNode","CLEAR_KEYS","CLEAR_KEYS_PLUS_COMMENTS","removeProperties","preserveComments","symbols","getOwnPropertySymbols","sym","removePropertiesDeep","tree","toKeyAlias","increment","uid","MAX_SAFE_INTEGER","toStatement","ignore","mustHaveId","newType","objectToString","Function","call","bind","prototype","toString","isRegExp","isPlainObject","getPrototypeOf","valueToNode","Math","abs","numerator","isNaN","props","nodeKey","appendToMemberExpression","append","prependToMemberExpression","prepend","getBindingIdentifiers","duplicates","outerOnly","newBindingsOnly","search","ids","create","shift","_ids","DeclareClass","DeclareFunction","DeclareModule","DeclareVariable","DeclareInterface","DeclareTypeAlias","DeclareOpaqueType","InterfaceDeclaration","TypeAlias","OpaqueType","CatchClause","LabeledStatement","UnaryExpression","AssignmentExpression","ImportSpecifier","ImportNamespaceSpecifier","ImportDefaultSpecifier","ImportDeclaration","ExportSpecifier","ExportNamespaceSpecifier","ExportDefaultSpecifier","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ObjectMethod","ClassMethod","ClassPrivateMethod","ForInStatement","ForOfStatement","ClassDeclaration","ClassExpression","RestElement","UpdateExpression","ObjectProperty","AssignmentPattern","ArrayPattern","ObjectPattern","VariableDeclaration","VariableDeclarator","getOuterBindingIdentifiers","traverse","handlers","state","exit","traverseSimpleImpl","ancestors","pop","isBinding","grandparent","isLet","isBlockScoped","isImmutable","isNodesEquivalent","b","visitorKeys","val_a","val_b","isReferenced","isScope","isSpecifierDefault","specifier","RESERVED_WORDS_ES3_ONLY","isValidES3Identifier","isVar","react"],"mappings":"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"}