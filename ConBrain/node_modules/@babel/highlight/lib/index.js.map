{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/// <reference path=\"../../../lib/third-party-libs.d.ts\" />\n\nimport type { Token as JSToken, JSXToken } from \"js-tokens\";\nimport jsTokens from \"js-tokens\";\n\nimport {\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nimport chalk, { Chalk as ChalkClass, type ChalkInstance as Chalk } from \"chalk\";\n\n/**\n * Names that are always allowed as identifiers, but also appear as keywords\n * within certain syntactic productions.\n *\n * https://tc39.es/ecma262/#sec-keywords-and-reserved-words\n *\n * `target` has been omitted since it is very likely going to be a false\n * positive.\n */\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\ntype InternalTokenType =\n  | \"keyword\"\n  | \"capitalized\"\n  | \"jsxIdentifier\"\n  | \"punctuator\"\n  | \"number\"\n  | \"string\"\n  | \"regex\"\n  | \"comment\"\n  | \"invalid\";\n\ntype Token = {\n  type: InternalTokenType | \"uncolored\";\n  value: string;\n};\n/**\n * Chalk styles for token types.\n */\nfunction getDefs(chalk: Chalk): Record<InternalTokenType, Chalk> {\n  return {\n    keyword: chalk.cyan,\n    capitalized: chalk.yellow,\n    jsxIdentifier: chalk.yellow,\n    punctuator: chalk.yellow,\n    number: chalk.magenta,\n    string: chalk.green,\n    regex: chalk.magenta,\n    comment: chalk.grey,\n    invalid: chalk.white.bgRed.bold,\n  };\n}\n\n/**\n * RegExp to test for newlines in terminal.\n */\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\n/**\n * RegExp to test for the three types of brackets.\n */\nconst BRACKET = /^[()[\\]{}]$/;\n\nlet tokenize: (\n  text: string,\n) => Generator<{ type: InternalTokenType | \"uncolored\"; value: string }>;\n\nif (process.env.BABEL_8_BREAKING) {\n  /**\n   * Get the type of token, specifying punctuator type.\n   */\n  const getTokenType = function (\n    token: JSToken | JSXToken,\n  ): InternalTokenType | \"uncolored\" {\n    if (token.type === \"IdentifierName\") {\n      if (\n        isKeyword(token.value) ||\n        isStrictReservedWord(token.value, true) ||\n        sometimesKeywords.has(token.value)\n      ) {\n        return \"keyword\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"Punctuator\" && BRACKET.test(token.value)) {\n      return \"uncolored\";\n    }\n\n    if (token.type === \"Invalid\" && token.value === \"@\") {\n      return \"punctuator\";\n    }\n\n    switch (token.type) {\n      case \"NumericLiteral\":\n        return \"number\";\n\n      case \"StringLiteral\":\n      case \"JSXString\":\n      case \"NoSubstitutionTemplate\":\n        return \"string\";\n\n      case \"RegularExpressionLiteral\":\n        return \"regex\";\n\n      case \"Punctuator\":\n      case \"JSXPunctuator\":\n        return \"punctuator\";\n\n      case \"MultiLineComment\":\n      case \"SingleLineComment\":\n        return \"comment\";\n\n      case \"Invalid\":\n      case \"JSXInvalid\":\n        return \"invalid\";\n\n      case \"JSXIdentifier\":\n        return \"jsxIdentifier\";\n\n      default:\n        return \"uncolored\";\n    }\n  };\n\n  /**\n   * Turn a string of JS into an array of objects.\n   */\n  tokenize = function* (text: string): Generator<Token> {\n    for (const token of jsTokens(text, { jsx: true })) {\n      switch (token.type) {\n        case \"TemplateHead\":\n          yield { type: \"string\", value: token.value.slice(0, -2) };\n          yield { type: \"punctuator\", value: \"${\" };\n          break;\n\n        case \"TemplateMiddle\":\n          yield { type: \"punctuator\", value: \"}\" };\n          yield { type: \"string\", value: token.value.slice(1, -2) };\n          yield { type: \"punctuator\", value: \"${\" };\n          break;\n\n        case \"TemplateTail\":\n          yield { type: \"punctuator\", value: \"}\" };\n          yield { type: \"string\", value: token.value.slice(1) };\n          break;\n\n        default:\n          yield {\n            type: getTokenType(token),\n            value: token.value,\n          };\n      }\n    }\n  };\n} else {\n  /**\n   * RegExp to test for what seems to be a JSX tag name.\n   */\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  // The token here is defined in js-tokens@4. However we don't bother\n  // typing it since the whole block will be removed in Babel 8\n  const getTokenType = function (token: any, offset: number, text: string) {\n    if (token.type === \"name\") {\n      if (\n        isKeyword(token.value) ||\n        isStrictReservedWord(token.value, true) ||\n        sometimesKeywords.has(token.value)\n      ) {\n        return \"keyword\";\n      }\n\n      if (\n        JSX_TAG.test(token.value) &&\n        (text[offset - 1] === \"<\" || text.slice(offset - 2, offset) == \"</\")\n      ) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (\n      token.type === \"invalid\" &&\n      (token.value === \"@\" || token.value === \"#\")\n    ) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = function* (text: string) {\n    let match;\n    while ((match = (jsTokens as any).default.exec(text))) {\n      const token = (jsTokens as any).matchToToken(match);\n\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value,\n      };\n    }\n  };\n}\n\n/**\n * Highlight `text` using the token definitions in `defs`.\n */\nfunction highlightTokens(defs: Record<string, Chalk>, text: string) {\n  let highlighted = \"\";\n\n  for (const { type, value } of tokenize(text)) {\n    const colorize = defs[type];\n    if (colorize) {\n      highlighted += value\n        .split(NEWLINE)\n        .map(str => colorize(str))\n        .join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n\n  return highlighted;\n}\n\n/**\n * Highlight `text` using the token definitions in `defs`.\n */\n\ntype Options = {\n  forceColor?: boolean;\n};\n\n/**\n * Whether the code should be highlighted given the passed options.\n */\nexport function shouldHighlight(options: Options): boolean {\n  return chalk.level > 0 || options.forceColor;\n}\n\nlet chalkWithForcedColor: Chalk = undefined;\nfunction getChalk(forceColor: boolean) {\n  if (forceColor) {\n    chalkWithForcedColor ??= process.env.BABEL_8_BREAKING\n      ? new ChalkClass({ level: 1 })\n      : // @ts-expect-error .Instance was .constructor in chalk 2\n        new chalk.constructor({ enabled: true, level: 1 });\n    return chalkWithForcedColor;\n  }\n  return chalk;\n}\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.getChalk = (options: Options) => getChalk(options.forceColor);\n}\n\n/**\n * Highlight `code`.\n */\nexport default function highlight(code: string, options: Options = {}): string {\n  if (code !== \"\" && shouldHighlight(options)) {\n    const defs = getDefs(getChalk(options.forceColor));\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}\n"],"names":["sometimesKeywords","Set","getDefs","chalk","keyword","cyan","capitalized","yellow","jsxIdentifier","punctuator","number","magenta","string","green","regex","comment","grey","invalid","white","bgRed","bold","NEWLINE","BRACKET","tokenize","getTokenType","token","type","isKeyword","value","isStrictReservedWord","has","toLowerCase","test","text","jsTokens","jsx","slice","highlightTokens","defs","highlighted","colorize","split","map","str","join","shouldHighlight","options","level","forceColor","chalkWithForcedColor","undefined","getChalk","ChalkClass","highlight","code"],"mappings":"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"}