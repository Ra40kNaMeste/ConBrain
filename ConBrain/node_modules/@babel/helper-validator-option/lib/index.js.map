{"version":3,"file":"index.js","sources":["../src/find-suggestion.ts","../src/validator.ts"],"sourcesContent":["const { min } = Math;\n\n// a minimal leven distance implementation\n// balanced maintainability with code size\n// It is not blazingly fast but should be okay for Babel user case\n// where it will be run for at most tens of time on strings\n// that have less than 20 ASCII characters\n\n// https://rosettacode.org/wiki/Levenshtein_distance#ES5\nfunction levenshtein(a: string, b: string): number {\n  let t = [],\n    u: number[] = [],\n    i,\n    j;\n  const m = a.length,\n    n = b.length;\n  if (!m) {\n    return n;\n  }\n  if (!n) {\n    return m;\n  }\n  for (j = 0; j <= n; j++) {\n    t[j] = j;\n  }\n  for (i = 1; i <= m; i++) {\n    for (u = [i], j = 1; j <= n; j++) {\n      u[j] =\n        a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;\n    }\n    t = u;\n  }\n  return u[n];\n}\n\n/**\n * Given a string `str` and an array of candidates `arr`,\n * return the first of elements in candidates that has minimal\n * Levenshtein distance with `str`.\n * @export\n * @param {string} str\n * @param {string[]} arr\n * @returns {string}\n */\nexport function findSuggestion(str: string, arr: readonly string[]): string {\n  const distances = arr.map<number>(el => levenshtein(el, str));\n  return arr[distances.indexOf(min(...distances))];\n}\n","import { findSuggestion } from \"./find-suggestion.ts\";\n\nexport class OptionValidator {\n  declare descriptor: string;\n  constructor(descriptor: string) {\n    this.descriptor = descriptor;\n  }\n\n  /**\n   * Validate if the given `options` follow the name of keys defined in the `TopLevelOptionShape`\n   *\n   * @param {Object} options\n   * @param {Object} TopLevelOptionShape\n   *   An object with all the valid key names that `options` should be allowed to have\n   *   The property values of `TopLevelOptionShape` can be arbitrary\n   * @memberof OptionValidator\n   */\n  validateTopLevelOptions(options: Object, TopLevelOptionShape: Object): void {\n    const validOptionNames = Object.keys(TopLevelOptionShape);\n    for (const option of Object.keys(options)) {\n      if (!validOptionNames.includes(option)) {\n        throw new Error(\n          this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${findSuggestion(option, validOptionNames)}'?`),\n        );\n      }\n    }\n  }\n\n  // note: we do not consider rewrite them to high order functions\n  // until we have to support `validateNumberOption`.\n  validateBooleanOption<T extends boolean>(\n    name: string,\n    value?: boolean,\n    defaultValue?: T,\n  ): boolean | T {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(\n        typeof value === \"boolean\",\n        `'${name}' option must be a boolean.`,\n      );\n    }\n    return value;\n  }\n\n  validateStringOption<T extends string>(\n    name: string,\n    value?: string,\n    defaultValue?: T,\n  ): string | T {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(\n        typeof value === \"string\",\n        `'${name}' option must be a string.`,\n      );\n    }\n    return value;\n  }\n  /**\n   * A helper interface copied from the `invariant` npm package.\n   * It throws given `message` when `condition` is not met\n   *\n   * @param {boolean} condition\n   * @param {string} message\n   * @memberof OptionValidator\n   */\n  invariant(condition: boolean, message: string): void {\n    if (!condition) {\n      throw new Error(this.formatMessage(message));\n    }\n  }\n\n  formatMessage(message: string): string {\n    return `${this.descriptor}: ${message}`;\n  }\n}\n"],"names":["min","Math","levenshtein","a","b","t","u","i","j","m","length","n","findSuggestion","str","arr","distances","map","el","indexOf","OptionValidator","constructor","descriptor","validateTopLevelOptions","options","TopLevelOptionShape","validOptionNames","Object","keys","option","includes","Error","formatMessage","validateBooleanOption","name","value","defaultValue","undefined","invariant","validateStringOption","condition","message"],"mappings":"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"}