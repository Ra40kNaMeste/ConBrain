{"version":3,"names":["jsx","declare","template","types","t","addNamed","addNamespace","isModule","annotateAsPure","DEFAULT","importSource","runtime","pragma","pragmaFrag","JSX_SOURCE_ANNOTATION_REGEX","JSX_RUNTIME_ANNOTATION_REGEX","JSX_ANNOTATION_REGEX","JSX_FRAG_ANNOTATION_REGEX","get","pass","name","set","v","hasProto","node","properties","some","value","isObjectProperty","computed","shorthand","isIdentifier","key","isStringLiteral","createPlugin","development","_","options","pure","PURE_ANNOTATION","throwIfNamespace","filter","RUNTIME_DEFAULT","IMPORT_SOURCE_DEFAULT","PRAGMA_DEFAULT","PRAGMA_FRAG_DEFAULT","Error","useBuiltInsFormatted","JSON","stringify","useBuiltIns","injectMetaPropertiesVisitor","JSXOpeningElement","path","state","attributes","isThisAllowed","scope","push","jsxAttribute","jsxIdentifier","jsxExpressionContainer","thisExpression","makeSource","pushContainer","inherits","visitor","JSXNamespacedName","buildCodeFrameError","JSXSpreadChild","Program","enter","file","source","sourceSet","pragmaSet","pragmaFragSet","ast","comments","comment","sourceMatches","exec","runtimeMatches","jsxMatches","jsxFragMatches","createElement","toMemberExpression","fragment","cloneNode","define","id","createImportLazily","traverse","JSXFragment","exit","callExpr","buildCreateElementFragmentCall","buildJSXFragmentCall","replaceWith","JSXElement","shouldUseCreateElement","buildCreateElementCall","buildJSXElementCall","JSXAttribute","isJSXElement","isDerivedClass","classPath","superClass","isFunctionParent","isArrowFunctionExpression","isMethod","kind","parentPath","isTSModuleBlock","parent","call","args","callExpression","openingPath","seenPropsSpread","i","length","attr","isJSXAttribute","isJSXSpreadAttribute","convertJSXIdentifier","isJSXIdentifier","isReferenced","isValidIdentifier","type","stringLiteral","isJSXMemberExpression","memberExpression","object","property","isJSXNamespacedName","namespace","convertAttributeValue","isJSXExpressionContainer","expression","accumulateAttribute","array","attribute","arg","argument","isObjectExpression","spreadElement","booleanLiteral","replace","extra","raw","objectProperty","buildChildrenProperty","children","childrenNode","arrayExpression","undefined","identifier","getTag","attribsArray","extracted","Object","create","sourceSelfError","keyValue","react","buildChildren","attribs","buildJSXOpeningElementAttributes","objectExpression","buildUndefinedNode","__source","__self","props","reduce","nullLiteral","buildCreateElementOpeningElementAttributes","tagExpr","tagName","isCompatTag","found","isSpreadElement","getSource","importName","actualSource","reference","importedInterop","importPosition","split","map","location","loc","fileNameIdentifier","filename","generateUidIdentifier","getProgramParent","init","makeTrace","start","line","column","lineNumber","column0Based","fileLineLiteral","numericLiteral","fileColumnLiteral","pluginName","slice"],"sources":["../src/create-plugin.ts"],"sourcesContent":["import jsx from \"@babel/plugin-syntax-jsx\";\nimport { declare } from \"@babel/helper-plugin-utils\";\nimport { template, types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\nimport { addNamed, addNamespace, isModule } from \"@babel/helper-module-imports\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport type {\n  CallExpression,\n  Class,\n  Expression,\n  Identifier,\n  JSXAttribute,\n  JSXElement,\n  JSXFragment,\n  JSXOpeningElement,\n  JSXSpreadAttribute,\n  MemberExpression,\n  ObjectExpression,\n  Program,\n} from \"@babel/types\";\n\nconst DEFAULT = {\n  importSource: \"react\",\n  runtime: \"automatic\",\n  pragma: \"React.createElement\",\n  pragmaFrag: \"React.Fragment\",\n};\n\nconst JSX_SOURCE_ANNOTATION_REGEX =\n  /^\\s*\\*?\\s*@jsxImportSource\\s+([^\\s]+)\\s*$/m;\nconst JSX_RUNTIME_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxRuntime\\s+([^\\s]+)\\s*$/m;\n\nconst JSX_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsx\\s+([^\\s]+)\\s*$/m;\nconst JSX_FRAG_ANNOTATION_REGEX = /^\\s*\\*?\\s*@jsxFrag\\s+([^\\s]+)\\s*$/m;\n\nconst get = (pass: PluginPass, name: string) =>\n  pass.get(`@babel/plugin-react-jsx/${name}`);\nconst set = (pass: PluginPass, name: string, v: any) =>\n  pass.set(`@babel/plugin-react-jsx/${name}`, v);\n\nfunction hasProto(node: t.ObjectExpression) {\n  return node.properties.some(\n    value =>\n      t.isObjectProperty(value, { computed: false, shorthand: false }) &&\n      (t.isIdentifier(value.key, { name: \"__proto__\" }) ||\n        t.isStringLiteral(value.key, { value: \"__proto__\" })),\n  );\n}\n\nexport interface Options {\n  filter?: (node: t.Node, pass: PluginPass) => boolean;\n  importSource?: string;\n  pragma?: string;\n  pragmaFrag?: string;\n  pure?: string;\n  runtime?: \"automatic\" | \"classic\";\n  throwIfNamespace?: boolean;\n  useBuiltIns: boolean;\n  useSpread?: boolean;\n}\nexport default function createPlugin({\n  name,\n  development,\n}: {\n  name: string;\n  development: boolean;\n}) {\n  return declare((_, options: Options) => {\n    const {\n      pure: PURE_ANNOTATION,\n\n      throwIfNamespace = true,\n\n      filter,\n\n      runtime: RUNTIME_DEFAULT = process.env.BABEL_8_BREAKING\n        ? \"automatic\"\n        : development\n          ? \"automatic\"\n          : \"classic\",\n\n      importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource,\n      pragma: PRAGMA_DEFAULT = DEFAULT.pragma,\n      pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag,\n    } = options;\n\n    if (process.env.BABEL_8_BREAKING) {\n      if (\"useSpread\" in options) {\n        throw new Error(\n          '@babel/plugin-transform-react-jsx: Since Babel 8, an inline object with spread elements is always used, and the \"useSpread\" option is no longer available. Please remove it from your config.',\n        );\n      }\n\n      if (\"useBuiltIns\" in options) {\n        const useBuiltInsFormatted = JSON.stringify(options.useBuiltIns);\n        throw new Error(\n          `@babel/plugin-transform-react-jsx: Since \"useBuiltIns\" is removed in Babel 8, you can remove it from the config.\n- Babel 8 now transforms JSX spread to object spread. If you need to transpile object spread with\n\\`useBuiltIns: ${useBuiltInsFormatted}\\`, you can use the following config\n{\n  \"plugins\": [\n    \"@babel/plugin-transform-react-jsx\"\n    [\"@babel/plugin-transform-object-rest-spread\", { \"loose\": true, \"useBuiltIns\": ${useBuiltInsFormatted} }]\n  ]\n}`,\n        );\n      }\n\n      if (filter != null && RUNTIME_DEFAULT === \"automatic\") {\n        throw new Error(\n          '@babel/plugin-transform-react-jsx: \"filter\" option can not be used with automatic runtime. If you are upgrading from Babel 7, please specify `runtime: \"classic\"`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-var\n      var { useSpread = false, useBuiltIns = false } = options;\n\n      if (RUNTIME_DEFAULT === \"classic\") {\n        if (typeof useSpread !== \"boolean\") {\n          throw new Error(\n            \"transform-react-jsx currently only accepts a boolean option for \" +\n              \"useSpread (defaults to false)\",\n          );\n        }\n\n        if (typeof useBuiltIns !== \"boolean\") {\n          throw new Error(\n            \"transform-react-jsx currently only accepts a boolean option for \" +\n              \"useBuiltIns (defaults to false)\",\n          );\n        }\n\n        if (useSpread && useBuiltIns) {\n          throw new Error(\n            \"transform-react-jsx currently only accepts useBuiltIns or useSpread \" +\n              \"but not both\",\n          );\n        }\n      }\n    }\n\n    const injectMetaPropertiesVisitor: Visitor<PluginPass> = {\n      JSXOpeningElement(path, state) {\n        const attributes = [];\n        if (isThisAllowed(path.scope)) {\n          attributes.push(\n            t.jsxAttribute(\n              t.jsxIdentifier(\"__self\"),\n              t.jsxExpressionContainer(t.thisExpression()),\n            ),\n          );\n        }\n        attributes.push(\n          t.jsxAttribute(\n            t.jsxIdentifier(\"__source\"),\n            t.jsxExpressionContainer(makeSource(path, state)),\n          ),\n        );\n        path.pushContainer(\"attributes\", attributes);\n      },\n    };\n\n    return {\n      name,\n      inherits: jsx,\n      visitor: {\n        JSXNamespacedName(path) {\n          if (throwIfNamespace) {\n            throw path.buildCodeFrameError(\n              `Namespace tags are not supported by default. React's JSX doesn't support namespace tags. \\\nYou can set \\`throwIfNamespace: false\\` to bypass this warning.`,\n            );\n          }\n        },\n\n        JSXSpreadChild(path) {\n          throw path.buildCodeFrameError(\n            \"Spread children are not supported in React.\",\n          );\n        },\n\n        Program: {\n          enter(path, state) {\n            const { file } = state;\n            let runtime: string = RUNTIME_DEFAULT;\n\n            let source: string = IMPORT_SOURCE_DEFAULT;\n            let pragma: string = PRAGMA_DEFAULT;\n            let pragmaFrag: string = PRAGMA_FRAG_DEFAULT;\n\n            let sourceSet = !!options.importSource;\n            let pragmaSet = !!options.pragma;\n            let pragmaFragSet = !!options.pragmaFrag;\n\n            if (file.ast.comments) {\n              for (const comment of file.ast.comments) {\n                const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (sourceMatches) {\n                  source = sourceMatches[1];\n                  sourceSet = true;\n                }\n\n                const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (runtimeMatches) {\n                  runtime = runtimeMatches[1];\n                }\n\n                const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);\n                if (jsxMatches) {\n                  pragma = jsxMatches[1];\n                  pragmaSet = true;\n                }\n                const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(\n                  comment.value,\n                );\n                if (jsxFragMatches) {\n                  pragmaFrag = jsxFragMatches[1];\n                  pragmaFragSet = true;\n                }\n              }\n            }\n\n            set(state, \"runtime\", runtime);\n            if (runtime === \"classic\") {\n              if (sourceSet) {\n                throw path.buildCodeFrameError(\n                  `importSource cannot be set when runtime is classic.`,\n                );\n              }\n\n              const createElement = toMemberExpression(pragma);\n              const fragment = toMemberExpression(pragmaFrag);\n\n              set(state, \"id/createElement\", () => t.cloneNode(createElement));\n              set(state, \"id/fragment\", () => t.cloneNode(fragment));\n\n              set(state, \"defaultPure\", pragma === DEFAULT.pragma);\n            } else if (runtime === \"automatic\") {\n              if (pragmaSet || pragmaFragSet) {\n                throw path.buildCodeFrameError(\n                  `pragma and pragmaFrag cannot be set when runtime is automatic.`,\n                );\n              }\n\n              const define = (name: string, id: string) =>\n                set(state, name, createImportLazily(state, path, id, source));\n\n              define(\"id/jsx\", development ? \"jsxDEV\" : \"jsx\");\n              define(\"id/jsxs\", development ? \"jsxDEV\" : \"jsxs\");\n              define(\"id/createElement\", \"createElement\");\n              define(\"id/fragment\", \"Fragment\");\n\n              set(state, \"defaultPure\", source === DEFAULT.importSource);\n            } else {\n              throw path.buildCodeFrameError(\n                `Runtime must be either \"classic\" or \"automatic\".`,\n              );\n            }\n\n            if (development) {\n              path.traverse(injectMetaPropertiesVisitor, state);\n            }\n          },\n\n          // TODO(Babel 8): Decide if this should be removed or brought back.\n          // see: https://github.com/babel/babel/pull/12253#discussion_r513086528\n          //\n          // exit(path, state) {\n          //   if (\n          //     get(state, \"runtime\") === \"classic\" &&\n          //     get(state, \"pragmaSet\") &&\n          //     get(state, \"usedFragment\") &&\n          //     !get(state, \"pragmaFragSet\")\n          //   ) {\n          //     throw new Error(\n          //       \"transform-react-jsx: pragma has been set but \" +\n          //         \"pragmaFrag has not been set\",\n          //     );\n          //   }\n          // },\n        },\n\n        JSXFragment: {\n          exit(path, file) {\n            let callExpr;\n            if (get(file, \"runtime\") === \"classic\") {\n              callExpr = buildCreateElementFragmentCall(path, file);\n            } else {\n              callExpr = buildJSXFragmentCall(path, file);\n            }\n\n            path.replaceWith(t.inherits(callExpr, path.node));\n          },\n        },\n\n        JSXElement: {\n          exit(path, file) {\n            let callExpr;\n            if (\n              get(file, \"runtime\") === \"classic\" ||\n              shouldUseCreateElement(path)\n            ) {\n              callExpr = buildCreateElementCall(path, file);\n            } else {\n              callExpr = buildJSXElementCall(path, file);\n            }\n\n            path.replaceWith(t.inherits(callExpr, path.node));\n          },\n        },\n\n        JSXAttribute(path) {\n          if (t.isJSXElement(path.node.value)) {\n            path.node.value = t.jsxExpressionContainer(path.node.value);\n          }\n        },\n      },\n    };\n\n    // Returns whether the class has specified a superclass.\n    function isDerivedClass(classPath: NodePath<Class>) {\n      return classPath.node.superClass !== null;\n    }\n\n    // Returns whether `this` is allowed at given scope.\n    function isThisAllowed(scope: Scope) {\n      // This specifically skips arrow functions as they do not rewrite `this`.\n      do {\n        const { path } = scope;\n        if (path.isFunctionParent() && !path.isArrowFunctionExpression()) {\n          if (!path.isMethod()) {\n            // If the closest parent is a regular function, `this` will be rebound, therefore it is fine to use `this`.\n            return true;\n          }\n          // Current node is within a method, so we need to check if the method is a constructor.\n          if (path.node.kind !== \"constructor\") {\n            // We are not in a constructor, therefore it is always fine to use `this`.\n            return true;\n          }\n          // Now we are in a constructor. If it is a derived class, we do not reference `this`.\n          return !isDerivedClass(path.parentPath.parentPath as NodePath<Class>);\n        }\n        if (path.isTSModuleBlock()) {\n          // If the closest parent is a TS Module block, `this` will not be allowed.\n          return false;\n        }\n      } while ((scope = scope.parent));\n      // We are not in a method or function. It is fine to use `this`.\n      return true;\n    }\n\n    function call(\n      pass: PluginPass,\n      name: string,\n      args: CallExpression[\"arguments\"],\n    ) {\n      const node = t.callExpression(get(pass, `id/${name}`)(), args);\n      if (PURE_ANNOTATION ?? get(pass, \"defaultPure\")) annotateAsPure(node);\n      return node;\n    }\n\n    // We want to use React.createElement, even in the case of\n    // jsx, for <div {...props} key={key} /> to distinguish it\n    // from <div key={key} {...props} />. This is an intermediary\n    // step while we deprecate key spread from props. Afterwards,\n    // we will stop using createElement in the transform.\n    function shouldUseCreateElement(path: NodePath<JSXElement>) {\n      const openingPath = path.get(\"openingElement\");\n      const attributes = openingPath.node.attributes;\n\n      let seenPropsSpread = false;\n      for (let i = 0; i < attributes.length; i++) {\n        const attr = attributes[i];\n        if (\n          seenPropsSpread &&\n          t.isJSXAttribute(attr) &&\n          attr.name.name === \"key\"\n        ) {\n          return true;\n        } else if (t.isJSXSpreadAttribute(attr)) {\n          seenPropsSpread = true;\n        }\n      }\n      return false;\n    }\n\n    function convertJSXIdentifier(\n      node: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n      parent: t.JSXOpeningElement | t.JSXMemberExpression,\n    ): t.ThisExpression | t.StringLiteral | t.MemberExpression | t.Identifier {\n      if (t.isJSXIdentifier(node)) {\n        if (node.name === \"this\" && t.isReferenced(node, parent)) {\n          return t.thisExpression();\n        } else if (t.isValidIdentifier(node.name, false)) {\n          // @ts-expect-error cast AST type to Identifier\n          node.type = \"Identifier\";\n          return node as unknown as t.Identifier;\n        } else {\n          return t.stringLiteral(node.name);\n        }\n      } else if (t.isJSXMemberExpression(node)) {\n        return t.memberExpression(\n          convertJSXIdentifier(node.object, node),\n          convertJSXIdentifier(node.property, node),\n        );\n      } else if (t.isJSXNamespacedName(node)) {\n        /**\n         * If the flag \"throwIfNamespace\" is false\n         * print XMLNamespace like string literal\n         */\n        return t.stringLiteral(`${node.namespace.name}:${node.name.name}`);\n      }\n\n      // todo: this branch should be unreachable\n      return node;\n    }\n\n    function convertAttributeValue(\n      node: t.JSXAttribute[\"value\"] | t.BooleanLiteral,\n    ) {\n      if (t.isJSXExpressionContainer(node)) {\n        return node.expression;\n      } else {\n        return node;\n      }\n    }\n\n    function accumulateAttribute(\n      array: ObjectExpression[\"properties\"],\n      attribute: NodePath<JSXAttribute | JSXSpreadAttribute>,\n    ) {\n      if (t.isJSXSpreadAttribute(attribute.node)) {\n        const arg = attribute.node.argument;\n        // Collect properties into props array if spreading object expression\n        if (t.isObjectExpression(arg) && !hasProto(arg)) {\n          array.push(...arg.properties);\n        } else {\n          array.push(t.spreadElement(arg));\n        }\n        return array;\n      }\n\n      const value = convertAttributeValue(\n        attribute.node.name.name !== \"key\"\n          ? attribute.node.value || t.booleanLiteral(true)\n          : attribute.node.value,\n      );\n\n      if (attribute.node.name.name === \"key\" && value === null) {\n        throw attribute.buildCodeFrameError(\n          'Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.',\n        );\n      }\n\n      if (\n        t.isStringLiteral(value) &&\n        !t.isJSXExpressionContainer(attribute.node.value)\n      ) {\n        value.value = value.value.replace(/\\n\\s+/g, \" \");\n\n        // \"raw\" JSXText should not be used from a StringLiteral because it needs to be escaped.\n        delete value.extra?.raw;\n      }\n\n      if (t.isJSXNamespacedName(attribute.node.name)) {\n        // @ts-expect-error mutating AST\n        attribute.node.name = t.stringLiteral(\n          attribute.node.name.namespace.name +\n            \":\" +\n            attribute.node.name.name.name,\n        );\n      } else if (t.isValidIdentifier(attribute.node.name.name, false)) {\n        // @ts-expect-error mutating AST\n        attribute.node.name.type = \"Identifier\";\n      } else {\n        // @ts-expect-error mutating AST\n        attribute.node.name = t.stringLiteral(attribute.node.name.name);\n      }\n\n      array.push(\n        t.inherits(\n          t.objectProperty(\n            // @ts-expect-error The attribute.node.name is an Identifier now\n            attribute.node.name,\n            value,\n          ),\n          attribute.node,\n        ),\n      );\n      return array;\n    }\n\n    function buildChildrenProperty(children: Expression[]) {\n      let childrenNode;\n      if (children.length === 1) {\n        childrenNode = children[0];\n      } else if (children.length > 1) {\n        childrenNode = t.arrayExpression(children);\n      } else {\n        return undefined;\n      }\n\n      return t.objectProperty(t.identifier(\"children\"), childrenNode);\n    }\n\n    // Builds JSX into:\n    // Production: React.jsx(type, arguments, key)\n    // Development: React.jsxDEV(type, arguments, key, isStaticChildren, source, self)\n    function buildJSXElementCall(path: NodePath<JSXElement>, file: PluginPass) {\n      const openingPath = path.get(\"openingElement\");\n      const args: t.Expression[] = [getTag(openingPath)];\n\n      const attribsArray = [];\n      const extracted = Object.create(null);\n\n      // for React.jsx, key, __source (dev), and __self (dev) is passed in as\n      // a separate argument rather than in the args object. We go through the\n      // props and filter out these three keywords so we can pass them in\n      // as separate arguments later\n      for (const attr of openingPath.get(\"attributes\")) {\n        if (attr.isJSXAttribute() && t.isJSXIdentifier(attr.node.name)) {\n          const { name } = attr.node.name;\n          switch (name) {\n            case \"__source\":\n            case \"__self\":\n              if (extracted[name]) throw sourceSelfError(path, name);\n            /* falls through */\n            case \"key\": {\n              const keyValue = convertAttributeValue(attr.node.value);\n              if (keyValue === null) {\n                throw attr.buildCodeFrameError(\n                  'Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.',\n                );\n              }\n\n              extracted[name] = keyValue;\n              break;\n            }\n            default:\n              attribsArray.push(attr);\n          }\n        } else {\n          attribsArray.push(attr);\n        }\n      }\n\n      const children = t.react.buildChildren(path.node);\n\n      let attribs: t.ObjectExpression;\n\n      if (attribsArray.length || children.length) {\n        attribs = buildJSXOpeningElementAttributes(\n          attribsArray,\n          //@ts-expect-error The children here contains JSXSpreadChild,\n          // which will be thrown later\n          children,\n        );\n      } else {\n        // attributes should never be null\n        attribs = t.objectExpression([]);\n      }\n\n      args.push(attribs);\n\n      if (development) {\n        // isStaticChildren, __source, and __self are only used in development\n        // automatically include __source and __self in this plugin\n        // so we can eliminate the need for separate Babel plugins in Babel 8\n        args.push(\n          extracted.key ?? path.scope.buildUndefinedNode(),\n          t.booleanLiteral(children.length > 1),\n        );\n        if (extracted.__source) {\n          args.push(extracted.__source);\n          if (extracted.__self) args.push(extracted.__self);\n        } else if (extracted.__self) {\n          args.push(path.scope.buildUndefinedNode(), extracted.__self);\n        }\n      } else if (extracted.key !== undefined) {\n        args.push(extracted.key);\n      }\n\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n\n    // Builds props for React.jsx. This function adds children into the props\n    // and ensures that props is always an object\n    function buildJSXOpeningElementAttributes(\n      attribs: NodePath<JSXAttribute | JSXSpreadAttribute>[],\n      children: Expression[],\n    ) {\n      const props = attribs.reduce(accumulateAttribute, []);\n\n      // In React.jsx, children is no longer a separate argument, but passed in\n      // through the argument object\n      if (children?.length > 0) {\n        props.push(buildChildrenProperty(children));\n      }\n\n      return t.objectExpression(props);\n    }\n\n    // Builds JSX Fragment <></> into\n    // Production: React.jsx(type, arguments)\n    // Development: React.jsxDEV(type, { children })\n    function buildJSXFragmentCall(\n      path: NodePath<JSXFragment>,\n      file: PluginPass,\n    ) {\n      const args = [get(file, \"id/fragment\")()];\n\n      const children = t.react.buildChildren(path.node);\n\n      args.push(\n        t.objectExpression(\n          children.length > 0\n            ? [\n                buildChildrenProperty(\n                  //@ts-expect-error The children here contains JSXSpreadChild,\n                  // which will be thrown later\n                  children,\n                ),\n              ]\n            : [],\n        ),\n      );\n\n      if (development) {\n        args.push(\n          path.scope.buildUndefinedNode(),\n          t.booleanLiteral(children.length > 1),\n        );\n      }\n\n      return call(file, children.length > 1 ? \"jsxs\" : \"jsx\", args);\n    }\n\n    // Builds JSX Fragment <></> into\n    // React.createElement(React.Fragment, null, ...children)\n    function buildCreateElementFragmentCall(\n      path: NodePath<JSXFragment>,\n      file: PluginPass,\n    ) {\n      if (filter && !filter(path.node, file)) return;\n\n      return call(file, \"createElement\", [\n        get(file, \"id/fragment\")(),\n        t.nullLiteral(),\n        ...t.react.buildChildren(path.node),\n      ]);\n    }\n\n    // Builds JSX into:\n    // Production: React.createElement(type, arguments, children)\n    // Development: React.createElement(type, arguments, children, source, self)\n    function buildCreateElementCall(\n      path: NodePath<JSXElement>,\n      file: PluginPass,\n    ) {\n      const openingPath = path.get(\"openingElement\");\n\n      return call(file, \"createElement\", [\n        getTag(openingPath),\n        buildCreateElementOpeningElementAttributes(\n          file,\n          path,\n          openingPath.get(\"attributes\"),\n        ),\n        // @ts-expect-error JSXSpreadChild has been transformed in convertAttributeValue\n        ...t.react.buildChildren(path.node),\n      ]);\n    }\n\n    function getTag(openingPath: NodePath<JSXOpeningElement>) {\n      const tagExpr = convertJSXIdentifier(\n        openingPath.node.name,\n        openingPath.node,\n      );\n\n      let tagName: string;\n      if (t.isIdentifier(tagExpr)) {\n        tagName = tagExpr.name;\n      } else if (t.isStringLiteral(tagExpr)) {\n        tagName = tagExpr.value;\n      }\n\n      if (t.react.isCompatTag(tagName)) {\n        return t.stringLiteral(tagName);\n      } else {\n        return tagExpr;\n      }\n    }\n\n    /**\n     * The logic for this is quite terse. It's because we need to\n     * support spread elements. We loop over all attributes,\n     * breaking on spreads, we then push a new object containing\n     * all prior attributes to an array for later processing.\n     */\n    function buildCreateElementOpeningElementAttributes(\n      file: PluginPass,\n      path: NodePath<JSXElement>,\n      attribs: NodePath<JSXAttribute | JSXSpreadAttribute>[],\n    ) {\n      const runtime = get(file, \"runtime\");\n      if (!process.env.BABEL_8_BREAKING) {\n        if (runtime !== \"automatic\") {\n          const objs = [];\n          const props = attribs.reduce(accumulateAttribute, []);\n\n          if (!useSpread) {\n            // Convert syntax to use multiple objects instead of spread\n            let start = 0;\n            props.forEach((prop, i) => {\n              if (t.isSpreadElement(prop)) {\n                if (i > start) {\n                  objs.push(t.objectExpression(props.slice(start, i)));\n                }\n                objs.push(prop.argument);\n                start = i + 1;\n              }\n            });\n            if (props.length > start) {\n              objs.push(t.objectExpression(props.slice(start)));\n            }\n          } else if (props.length) {\n            objs.push(t.objectExpression(props));\n          }\n\n          if (!objs.length) {\n            return t.nullLiteral();\n          }\n\n          if (objs.length === 1) {\n            if (\n              !(\n                t.isSpreadElement(props[0]) &&\n                // If an object expression is spread element's argument\n                // it is very likely to contain __proto__ and we should stop\n                // optimizing spread element\n                t.isObjectExpression(props[0].argument)\n              )\n            ) {\n              return objs[0];\n            }\n          }\n\n          // looks like we have multiple objects\n          if (!t.isObjectExpression(objs[0])) {\n            objs.unshift(t.objectExpression([]));\n          }\n\n          const helper = useBuiltIns\n            ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n            : file.addHelper(\"extends\");\n\n          // spread it\n          return t.callExpression(helper, objs);\n        }\n      }\n\n      const props: ObjectExpression[\"properties\"] = [];\n      const found = Object.create(null);\n\n      for (const attr of attribs) {\n        const { node } = attr;\n        const name =\n          t.isJSXAttribute(node) &&\n          t.isJSXIdentifier(node.name) &&\n          node.name.name;\n\n        if (\n          runtime === \"automatic\" &&\n          (name === \"__source\" || name === \"__self\")\n        ) {\n          if (found[name]) throw sourceSelfError(path, name);\n          found[name] = true;\n        }\n\n        accumulateAttribute(props, attr);\n      }\n\n      return props.length === 1 &&\n        t.isSpreadElement(props[0]) &&\n        // If an object expression is spread element's argument\n        // it is very likely to contain __proto__ and we should stop\n        // optimizing spread element\n        !t.isObjectExpression(props[0].argument)\n        ? props[0].argument\n        : props.length > 0\n          ? t.objectExpression(props)\n          : t.nullLiteral();\n    }\n  });\n\n  function getSource(source: string, importName: string) {\n    switch (importName) {\n      case \"Fragment\":\n        return `${source}/${development ? \"jsx-dev-runtime\" : \"jsx-runtime\"}`;\n      case \"jsxDEV\":\n        return `${source}/jsx-dev-runtime`;\n      case \"jsx\":\n      case \"jsxs\":\n        return `${source}/jsx-runtime`;\n      case \"createElement\":\n        return source;\n    }\n  }\n\n  function createImportLazily(\n    pass: PluginPass,\n    path: NodePath<Program>,\n    importName: string,\n    source: string,\n  ): () => Identifier | MemberExpression {\n    return () => {\n      const actualSource = getSource(source, importName);\n      if (isModule(path)) {\n        let reference = get(pass, `imports/${importName}`);\n        if (reference) return t.cloneNode(reference);\n\n        reference = addNamed(path, importName, actualSource, {\n          importedInterop: \"uncompiled\",\n          importPosition: \"after\",\n        });\n        set(pass, `imports/${importName}`, reference);\n\n        return reference;\n      } else {\n        let reference = get(pass, `requires/${actualSource}`);\n        if (reference) {\n          reference = t.cloneNode(reference);\n        } else {\n          reference = addNamespace(path, actualSource, {\n            importedInterop: \"uncompiled\",\n          });\n          set(pass, `requires/${actualSource}`, reference);\n        }\n\n        return t.memberExpression(reference, t.identifier(importName));\n      }\n    };\n  }\n}\n\nfunction toMemberExpression(id: string): Identifier | MemberExpression {\n  return (\n    id\n      .split(\".\")\n      .map(name => t.identifier(name))\n      // @ts-expect-error - The Array#reduce does not have a signature\n      // where the type of initial value differs from callback return type\n      .reduce((object, property) => t.memberExpression(object, property))\n  );\n}\n\nfunction makeSource(path: NodePath, state: PluginPass) {\n  const location = path.node.loc;\n  if (!location) {\n    // the element was generated and doesn't have location information\n    return path.scope.buildUndefinedNode();\n  }\n\n  // @ts-expect-error todo: avoid mutating PluginPass\n  if (!state.fileNameIdentifier) {\n    const { filename = \"\" } = state;\n\n    const fileNameIdentifier = path.scope.generateUidIdentifier(\"_jsxFileName\");\n    path.scope.getProgramParent().push({\n      id: fileNameIdentifier,\n      init: t.stringLiteral(filename),\n    });\n    // @ts-expect-error todo: avoid mutating PluginPass\n    state.fileNameIdentifier = fileNameIdentifier;\n  }\n\n  return makeTrace(\n    t.cloneNode(\n      // @ts-expect-error todo: avoid mutating PluginPass\n      state.fileNameIdentifier,\n    ),\n    location.start.line,\n    location.start.column,\n  );\n}\n\nfunction makeTrace(\n  fileNameIdentifier: Identifier,\n  lineNumber?: number,\n  column0Based?: number,\n) {\n  const fileLineLiteral =\n    lineNumber != null ? t.numericLiteral(lineNumber) : t.nullLiteral();\n\n  const fileColumnLiteral =\n    column0Based != null ? t.numericLiteral(column0Based + 1) : t.nullLiteral();\n\n  return template.expression.ast`{\n    fileName: ${fileNameIdentifier},\n    lineNumber: ${fileLineLiteral},\n    columnNumber: ${fileColumnLiteral},\n  }`;\n}\n\nfunction sourceSelfError(path: NodePath, name: string) {\n  const pluginName = `transform-react-jsx-${name.slice(2)}`;\n\n  return path.buildCodeFrameError(\n    `Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`,\n  );\n}\n"],"mappings":"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"}